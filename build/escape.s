;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_memfill
	.import		_set_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_check_collision
	.import		_set_scroll_y
	.import		_add_scroll_y
	.import		_sub_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_1_mt
	.import		_buffer_4_mt
	.import		_flush_vram_update_nmi
	.import		_gray_line
	.import		_seed_rng
	.export		_bankLevel
	.export		_bankBuffer
	.import		_set_prg_bank
	.import		_set_chr_bank_0
	.export		_valrigard_idle_left
	.export		_valrigard_idle_right
	.export		_valrigard_swing_left_high
	.export		_valrigard_swing_right_high
	.export		_valrigard_swing_left_mid
	.export		_valrigard_swing_right_mid
	.export		_valrigard_swing_left_low
	.export		_valrigard_swing_right_low
	.export		_valrigard_swing_left_followthrough
	.export		_valrigard_swing_right_followthrough
	.export		_valrigard_dead_left
	.export		_valrigard_dead_right
	.export		_spikeball
	.export		_korbat_left
	.export		_korbat_right
	.export		_sun0
	.export		_sun1
	.export		_cannon_up
	.export		_cannon_up_left
	.export		_cannon_left
	.export		_cannon_down_left
	.export		_cannon_down
	.export		_cannon_down_right
	.export		_cannon_right
	.export		_cannon_up_right
	.export		_grarrl_left
	.export		_grarrl_right
	.export		_acidblob0
	.export		_acidblob1
	.export		_acidblob2
	.export		_acidblob3
	.export		_splyke_tornado0
	.export		_splyke_tornado1
	.export		_splyke_tornado2
	.export		_splyke_idle_left0
	.export		_splyke_idle_left1
	.export		_splyke_idle_right0
	.export		_splyke_idle_right1
	.export		_purple_death_effect0
	.export		_purple_death_effect1
	.export		_splyke_death_effect0
	.export		_splyke_death_effect1
	.export		_metatiles
	.export		_metatile_property_lookup_table
	.export		_level01_enemy
	.export		_level01
	.export		_level02_enemy
	.export		_level02
	.export		_level03_enemy
	.export		_level03
	.export		_level04_enemy
	.export		_level04
	.export		_level05_enemy
	.export		_level05
	.export		_level06_enemy
	.export		_level06
	.export		_level07_enemy
	.export		_level07
	.export		_level10_enemy
	.export		_level10
	.export		_level_debug_tiledump_enemy
	.export		_level_debug_tiledump
	.export		_level_star_test_enemy
	.export		_level_star_test
	.export		_level_enemies_test_enemy
	.export		_level_enemies_test
	.export		_level_nt_length
	.export		_valrigard_starting_nt
	.export		_valrigard_inital_coords
	.export		_level_compressed_nametable_pointers
	.export		_level_nametable_banks
	.export		_level_names
	.export		_level_enemy_data
	.import		_score_string
	.import		_convert_to_decimal
	.import		_sin_lookup
	.import		_cos_lookup
	.import		_brads_lookup
	.import		_abs_subtract
	.import		_strlen
	.import		_LZG_decode
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp0
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_temppointer
	.export		_temp_mutablepointer
	.export		_temp_funcpointer
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_player_frame_timer
	.export		_player_sword_timer
	.export		_player_flags
	.export		_game_mode
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_nt
	.export		_scroll_x
	.export		_pseudo_scroll_y
	.export		_scroll_y
	.export		_min_scroll_y
	.export		_max_scroll_y
	.export		_initial_scroll
	.export		_scroll_count
	.export		_L_R_switch
	.export		_old_x
	.export		_old_y
	.export		_temp_x
	.export		_temp_y
	.export		_level_index
	.export		_energy
	.export		_score
	.export		_enemy_score
	.export		_stars
	.export		_timer
	.export		_song
	.export		_nt_min
	.export		_nt_max
	.export		_nt_current
	.export		_valrigard
	.export		_hitbox
	.export		_hitbox2
	.export		_shuffle_offset
	.export		_shuffle_maximum
	.export		_debug_tile_x
	.export		_debug_tile_y
	.export		_conveyor_delta
	.export		_menu_index
	.export		_tile_clear_queue
	.export		_tile_clear_front
	.export		_tile_clear_back
	.export		_palette_bg
	.export		_palette_sp
	.export		_shuffle_array
	.export		_enemies
	.export		_cmap
	.export		_cmaps
	.export		_draw_sprites
	.export		_draw_player
	.export		_draw_korbat
	.export		_draw_grarrl
	.export		_draw_spikeball
	.export		_draw_cannon
	.export		_draw_cannonball
	.export		_draw_acid
	.export		_draw_acid_drop
	.export		_draw_splyke
	.export		_draw_sun
	.export		_draw_boss
	.export		_draw_purple_death_effect
	.export		_draw_splyke_death_effect
	.export		_draw_score
	.export		_draw_energy
	.export		_draw_screen_U
	.export		_draw_screen_D
	.export		_draw_screen_sub
	.export		_handle_tile_clear_queue
	.export		_begin_level
	.export		_load_level_new
	.export		_calculate_shuffle_array
	.export		_load_title_screen
	.export		_load_game_over_screen
	.export		_clear_screen
	.export		_put_str
	.export		_movement
	.export		_swing_sword
	.export		_bg_collision
	.export		_bg_collision_sub
	.export		_check_spr_objects
	.export		_sprite_collisions
	.export		_collision_with_inert
	.export		_collision_with_killable_slashable
	.export		_collision_with_inert_slashable
	.export		_collision_with_unkillable_unslashable
	.export		_collision_with_splyke
	.export		_collision_with_boss
	.export		_enemy_movement
	.export		_korbat_ai
	.export		_spikeball_ai
	.export		_cannon_ai
	.export		_cannonball_ai
	.export		_acid_ai
	.export		_acid_drop_ai
	.export		_splyke_ai
	.export		_sun_ai
	.export		_boss_ai
	.export		_death_effect_timer_ai
	.export		_draw_screen_sub_lookup_addr_0
	.export		_draw_screen_sub_lookup_index_offset_0
	.export		_draw_screen_sub_lookup_addr_1
	.export		_draw_screen_sub_lookup_index_offset_1
	.export		_leftright_movement_offset_lookup_table
	.export		_leftright_movement_moving_lookup_table
	.export		_updown_movement_offset_lookup_table
	.export		_valrigard_idle_sprite_lookup_table
	.export		_valrigard_sword_swing_sprite_lookup_table
	.export		_valrigard_dead_sprite_lookup_table
	.export		_korbat_sprite_lookup_table
	.export		_grarrl_sprite_lookup_table
	.export		_cannon_sprite_lookup_table
	.export		_cannon_ul_sprite_lookup_table
	.export		_cannon_ur_sprite_lookup_table
	.export		_cannon_dr_sprite_lookup_table
	.export		_cannon_dl_sprite_lookup_table
	.export		_cannon_sprite_quadrant_lookup_table
	.export		_acidblob_sprite_lookup_table
	.export		_sun_sprite_lookup_table
	.export		_splyke_sprite_lookup_table
	.export		_purple_death_effect_sprite_lookup_table
	.export		_splyke_death_effect_sprite_lookup_table
	.export		_main
	.export		_title_string
	.export		_author_string
	.export		_instruction_string
	.export		_level_complete_string
	.export		_down_to_restart_string
	.export		_draw_func_pointers
	.export		_enemy_hitbox_width_lookup_table
	.export		_enemy_hitbox_height_lookup_table
	.export		_collision_functions
	.export		_ai_pointers

.segment	"DATA"

_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$38
_draw_func_pointers:
	.addr	_draw_korbat
	.addr	_draw_korbat
	.addr	_draw_grarrl
	.addr	_draw_splyke
	.addr	_draw_cannon
	.addr	_draw_acid
	.addr	_draw_spikeball
	.addr	_draw_sun
	.addr	_draw_boss
	.addr	_draw_cannonball
	.addr	_draw_acid_drop
	.addr	_draw_purple_death_effect
	.addr	_draw_splyke_death_effect
_collision_functions:
	.addr	_collision_with_inert
	.addr	_collision_with_killable_slashable
	.addr	_collision_with_killable_slashable
	.addr	_collision_with_splyke
	.addr	_collision_with_inert_slashable
	.addr	_collision_with_inert
	.addr	_collision_with_unkillable_unslashable
	.addr	_collision_with_unkillable_unslashable
	.addr	_collision_with_boss
	.addr	_collision_with_unkillable_unslashable
	.addr	_collision_with_unkillable_unslashable
	.addr	_collision_with_inert
	.addr	_collision_with_inert
_ai_pointers:
	.addr	_korbat_ai
	.addr	_korbat_ai
	.addr	_spikeball_ai
	.addr	_splyke_ai
	.addr	_cannon_ai
	.addr	_acid_ai
	.addr	_spikeball_ai
	.addr	_sun_ai
	.addr	_boss_ai
	.addr	_cannonball_ai
	.addr	_acid_drop_ai
	.addr	_death_effect_timer_ai
	.addr	_death_effect_timer_ai

.segment	"RODATA"

_valrigard_idle_left:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F1
	.byte	$01
	.byte	$80
_valrigard_idle_right:
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F1
	.byte	$41
	.byte	$80
_valrigard_swing_left_high:
	.byte	$FE
	.byte	$FD
	.byte	$E2
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F2
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F3
	.byte	$01
	.byte	$80
_valrigard_swing_right_high:
	.byte	$06
	.byte	$FD
	.byte	$E2
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F2
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F3
	.byte	$41
	.byte	$80
_valrigard_swing_left_mid:
	.byte	$FE
	.byte	$FD
	.byte	$E4
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F4
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F3
	.byte	$01
	.byte	$80
_valrigard_swing_right_mid:
	.byte	$06
	.byte	$FD
	.byte	$E4
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F4
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F3
	.byte	$41
	.byte	$80
_valrigard_swing_left_low:
	.byte	$FE
	.byte	$FD
	.byte	$E5
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F5
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F6
	.byte	$01
	.byte	$80
_valrigard_swing_right_low:
	.byte	$06
	.byte	$FD
	.byte	$E5
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F5
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F6
	.byte	$41
	.byte	$80
_valrigard_swing_left_followthrough:
	.byte	$FE
	.byte	$FD
	.byte	$E7
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E8
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F7
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F8
	.byte	$01
	.byte	$80
_valrigard_swing_right_followthrough:
	.byte	$06
	.byte	$FD
	.byte	$E7
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E8
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F7
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F8
	.byte	$41
	.byte	$80
_valrigard_dead_left:
	.byte	$06
	.byte	$05
	.byte	$D1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$D0
	.byte	$01
	.byte	$80
_valrigard_dead_right:
	.byte	$FE
	.byte	$05
	.byte	$D1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$D0
	.byte	$41
	.byte	$80
_spikeball:
	.byte	$FF
	.byte	$FF
	.byte	$12
	.byte	$03
	.byte	$07
	.byte	$FF
	.byte	$12
	.byte	$43
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$83
	.byte	$07
	.byte	$07
	.byte	$12
	.byte	$C3
	.byte	$80
_korbat_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$21
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$31
	.byte	$02
	.byte	$80
_korbat_right:
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$FF
	.byte	$FF
	.byte	$21
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$31
	.byte	$42
	.byte	$80
_sun0:
	.byte	$FF
	.byte	$FF
	.byte	$13
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$13
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$14
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$14
	.byte	$40
	.byte	$80
_sun1:
	.byte	$FF
	.byte	$FF
	.byte	$15
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$15
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$16
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$16
	.byte	$40
	.byte	$80
_cannon_up:
	.byte	$FF
	.byte	$FF
	.byte	$1A
	.byte	$80
	.byte	$07
	.byte	$FF
	.byte	$1A
	.byte	$C0
	.byte	$FF
	.byte	$07
	.byte	$19
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$19
	.byte	$C0
	.byte	$80
_cannon_up_left:
	.byte	$FF
	.byte	$FF
	.byte	$1E
	.byte	$C0
	.byte	$FF
	.byte	$07
	.byte	$1D
	.byte	$C0
	.byte	$07
	.byte	$FF
	.byte	$1C
	.byte	$C0
	.byte	$07
	.byte	$07
	.byte	$1B
	.byte	$C0
	.byte	$80
_cannon_left:
	.byte	$FF
	.byte	$FF
	.byte	$2F
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$1F
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$2F
	.byte	$C0
	.byte	$07
	.byte	$07
	.byte	$1F
	.byte	$C0
	.byte	$80
_cannon_down_left:
	.byte	$FF
	.byte	$FF
	.byte	$1D
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$1B
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$1E
	.byte	$40
	.byte	$07
	.byte	$07
	.byte	$1C
	.byte	$40
	.byte	$80
_cannon_down:
	.byte	$FF
	.byte	$FF
	.byte	$19
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$19
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$1A
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$1A
	.byte	$40
	.byte	$80
_cannon_down_right:
	.byte	$FF
	.byte	$FF
	.byte	$1B
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$1D
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$1C
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$1E
	.byte	$00
	.byte	$80
_cannon_right:
	.byte	$FF
	.byte	$FF
	.byte	$1F
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$2F
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$1F
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$2F
	.byte	$80
	.byte	$80
_cannon_up_right:
	.byte	$FF
	.byte	$FF
	.byte	$1C
	.byte	$80
	.byte	$07
	.byte	$FF
	.byte	$1E
	.byte	$80
	.byte	$FF
	.byte	$07
	.byte	$1B
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$1D
	.byte	$80
	.byte	$80
_grarrl_left:
	.byte	$FF
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$41
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$50
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$51
	.byte	$02
	.byte	$80
_grarrl_right:
	.byte	$07
	.byte	$FF
	.byte	$40
	.byte	$42
	.byte	$FF
	.byte	$FF
	.byte	$41
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$50
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$51
	.byte	$42
	.byte	$80
_acidblob0:
	.byte	$00
	.byte	$FF
	.byte	$28
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$28
	.byte	$43
	.byte	$80
_acidblob1:
	.byte	$00
	.byte	$FF
	.byte	$29
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$29
	.byte	$43
	.byte	$80
_acidblob2:
	.byte	$00
	.byte	$FF
	.byte	$2A
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$2A
	.byte	$43
	.byte	$80
_acidblob3:
	.byte	$00
	.byte	$FF
	.byte	$2B
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$2B
	.byte	$43
	.byte	$80
_splyke_tornado0:
	.byte	$FF
	.byte	$FF
	.byte	$60
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$61
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$70
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$71
	.byte	$00
	.byte	$80
_splyke_tornado1:
	.byte	$FF
	.byte	$FF
	.byte	$62
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$63
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$72
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$73
	.byte	$00
	.byte	$80
_splyke_tornado2:
	.byte	$FF
	.byte	$FF
	.byte	$61
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$60
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$71
	.byte	$40
	.byte	$07
	.byte	$07
	.byte	$70
	.byte	$40
	.byte	$80
_splyke_idle_left0:
	.byte	$FF
	.byte	$FF
	.byte	$64
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$65
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$74
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$75
	.byte	$00
	.byte	$80
_splyke_idle_left1:
	.byte	$FF
	.byte	$FF
	.byte	$64
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$65
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$76
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$75
	.byte	$00
	.byte	$80
_splyke_idle_right0:
	.byte	$FF
	.byte	$FF
	.byte	$65
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$64
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$75
	.byte	$40
	.byte	$07
	.byte	$07
	.byte	$74
	.byte	$40
	.byte	$80
_splyke_idle_right1:
	.byte	$FF
	.byte	$FF
	.byte	$65
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$64
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$75
	.byte	$40
	.byte	$07
	.byte	$07
	.byte	$76
	.byte	$40
	.byte	$80
_purple_death_effect0:
	.byte	$FF
	.byte	$FF
	.byte	$2C
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$2C
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$2C
	.byte	$82
	.byte	$07
	.byte	$07
	.byte	$2C
	.byte	$C2
	.byte	$80
_purple_death_effect1:
	.byte	$FF
	.byte	$FF
	.byte	$2D
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$2D
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$2D
	.byte	$82
	.byte	$07
	.byte	$07
	.byte	$2D
	.byte	$C2
	.byte	$80
_splyke_death_effect0:
	.byte	$FF
	.byte	$FF
	.byte	$2C
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$2C
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$2C
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$2C
	.byte	$C0
	.byte	$80
_splyke_death_effect1:
	.byte	$FF
	.byte	$FF
	.byte	$2E
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$2E
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$2E
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$2E
	.byte	$C0
	.byte	$80
_metatiles:
	.byte	$A0
	.byte	$A0
	.byte	$B0
	.byte	$B0
	.byte	$00
	.byte	$A1
	.byte	$A1
	.byte	$B1
	.byte	$B1
	.byte	$00
	.byte	$A2
	.byte	$A3
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$B2
	.byte	$B3
	.byte	$B2
	.byte	$B3
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$82
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$E6
	.byte	$E3
	.byte	$F6
	.byte	$F3
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$92
	.byte	$F5
	.byte	$00
	.byte	$E2
	.byte	$E7
	.byte	$F2
	.byte	$F7
	.byte	$00
	.byte	$82
	.byte	$E1
	.byte	$F6
	.byte	$F3
	.byte	$00
	.byte	$E6
	.byte	$E3
	.byte	$92
	.byte	$F1
	.byte	$00
	.byte	$E2
	.byte	$E7
	.byte	$F0
	.byte	$F5
	.byte	$00
	.byte	$E0
	.byte	$E5
	.byte	$F2
	.byte	$F7
	.byte	$00
	.byte	$82
	.byte	$E5
	.byte	$92
	.byte	$F5
	.byte	$00
	.byte	$E2
	.byte	$E3
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$E0
	.byte	$E1
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$84
	.byte	$85
	.byte	$94
	.byte	$95
	.byte	$01
	.byte	$88
	.byte	$89
	.byte	$98
	.byte	$99
	.byte	$01
	.byte	$86
	.byte	$87
	.byte	$96
	.byte	$97
	.byte	$01
	.byte	$8A
	.byte	$8B
	.byte	$9A
	.byte	$9B
	.byte	$01
	.byte	$E0
	.byte	$81
	.byte	$F0
	.byte	$91
	.byte	$00
	.byte	$82
	.byte	$E1
	.byte	$92
	.byte	$F1
	.byte	$00
	.byte	$EC
	.byte	$ED
	.byte	$FC
	.byte	$FD
	.byte	$03
	.byte	$A4
	.byte	$A5
	.byte	$B4
	.byte	$B5
	.byte	$03
	.byte	$A6
	.byte	$A5
	.byte	$B6
	.byte	$B5
	.byte	$03
	.byte	$A6
	.byte	$A7
	.byte	$B6
	.byte	$B7
	.byte	$03
	.byte	$AA
	.byte	$AB
	.byte	$BA
	.byte	$BB
	.byte	$02
	.byte	$A8
	.byte	$A9
	.byte	$B8
	.byte	$B9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$AD
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$AE
	.byte	$AF
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$BC
	.byte	$CD
	.byte	$BC
	.byte	$DD
	.byte	$00
	.byte	$CE
	.byte	$BF
	.byte	$DE
	.byte	$BF
	.byte	$00
	.byte	$C4
	.byte	$C5
	.byte	$D4
	.byte	$D5
	.byte	$00
	.byte	$C6
	.byte	$C7
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$D8
	.byte	$D9
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$DA
	.byte	$DB
	.byte	$00
	.byte	$C2
	.byte	$C3
	.byte	$D2
	.byte	$D3
	.byte	$03
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$03
	.byte	$EA
	.byte	$EB
	.byte	$FA
	.byte	$FB
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$8C
	.byte	$9C
	.byte	$9C
	.byte	$01
	.byte	$8D
	.byte	$8D
	.byte	$9D
	.byte	$9D
	.byte	$01
	.byte	$E0
	.byte	$E1
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$E2
	.byte	$E3
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$34
	.byte	$39
	.byte	$3F
	.byte	$3F
	.byte	$01
	.byte	$35
	.byte	$30
	.byte	$3F
	.byte	$3F
	.byte	$01
_metatile_property_lookup_table:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$09
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$01
	.byte	$01
.segment	"BANK0"
_level01_enemy:
	.byte	$61
	.byte	$02
	.byte	$02
	.byte	$75
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$FF
_level01:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$BE
	.byte	$95
	.byte	$22
	.byte	$A4
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$0F
	.byte	$04
	.byte	$07
	.byte	$0F
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$83
	.byte	$0F
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$1E
	.byte	$08
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$2A
	.byte	$0F
	.byte	$02
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$0F
	.byte	$01
	.byte	$15
	.byte	$02
	.byte	$09
	.byte	$18
	.byte	$01
	.byte	$0F
	.byte	$02
	.byte	$2C
	.byte	$2C
	.byte	$26
	.byte	$24
	.byte	$27
	.byte	$02
	.byte	$0A
	.byte	$58
	.byte	$03
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$0B
	.byte	$83
	.byte	$02
	.byte	$03
	.byte	$58
	.byte	$0F
	.byte	$E1
	.byte	$0B
	.byte	$1D
	.byte	$0B
	.byte	$D8
	.byte	$2A
	.byte	$1C
	.byte	$1D
	.byte	$0F
	.byte	$41
	.byte	$02
	.byte	$09
	.byte	$78
	.byte	$1E
	.byte	$1F
	.byte	$0F
	.byte	$41
	.byte	$02
	.byte	$0C
	.byte	$88
	.byte	$2C
	.byte	$0B
	.byte	$36
	.byte	$02
	.byte	$06
	.byte	$38
	.byte	$0B
	.byte	$24
	.byte	$0B
	.byte	$E7
	.byte	$02
	.byte	$05
	.byte	$18
	.byte	$0B
	.byte	$24
	.byte	$0B
	.byte	$E7
	.byte	$02
	.byte	$06
	.byte	$88
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$02
	.byte	$0C
	.byte	$88
	.byte	$2C
	.byte	$0F
	.byte	$41
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$0B
	.byte	$83
	.byte	$0B
	.byte	$9B
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$26
	.byte	$27
	.byte	$02
	.byte	$0C
	.byte	$18
	.byte	$02
	.byte	$0B
	.byte	$38
	.byte	$0B
	.byte	$E8
	.byte	$02
	.byte	$17
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$06
	.byte	$F6
	.byte	$02
	.byte	$3D
	.byte	$68
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$02
	.byte	$03
	.byte	$CD
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$02
	.byte	$03
	.byte	$CD
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$28
	.byte	$16
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$F8
	.byte	$05
	.byte	$02
	.byte	$25
	.byte	$F8
	.byte	$25
	.byte	$0B
	.byte	$F6
	.byte	$2C
	.byte	$08
	.byte	$0B
	.byte	$C8
	.byte	$26
	.byte	$24
	.byte	$02
	.byte	$04
	.byte	$B6
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$0F
	.byte	$02
	.byte	$09
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$0F
	.byte	$04
	.byte	$15
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$0A
	.byte	$02
	.byte	$0C
	.byte	$18
	.byte	$0B
	.byte	$07
	.byte	$28
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$0B
	.byte	$56
	.byte	$02
	.byte	$07
	.byte	$18
	.byte	$07
	.byte	$07
	.byte	$0B
	.byte	$96
	.byte	$2C
	.byte	$0C
	.byte	$04
	.byte	$02
	.byte	$4B
	.byte	$78
	.byte	$0C
	.byte	$04
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$0B
	.byte	$47
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$26
	.byte	$27
	.byte	$22
	.byte	$23
	.byte	$0B
	.byte	$87
	.byte	$0B
	.byte	$C8
	.byte	$02
	.byte	$04
	.byte	$88
	.byte	$0B
	.byte	$47
	.byte	$0B
	.byte	$C8
.segment	"RODATA"
.segment	"BANK0"
_level02_enemy:
	.byte	$8D
	.byte	$02
	.byte	$02
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$02
	.byte	$71
	.byte	$02
	.byte	$02
	.byte	$66
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$5D
	.byte	$00
	.byte	$02
	.byte	$FF
_level02:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$31
	.byte	$7F
	.byte	$32
	.byte	$27
	.byte	$EA
	.byte	$01
	.byte	$09
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$04
	.byte	$07
	.byte	$12
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$12
	.byte	$01
	.byte	$12
	.byte	$83
	.byte	$12
	.byte	$04
	.byte	$0E
	.byte	$10
	.byte	$1D
	.byte	$08
	.byte	$10
	.byte	$13
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$11
	.byte	$85
	.byte	$0C
	.byte	$0D
	.byte	$0D
	.byte	$11
	.byte	$93
	.byte	$06
	.byte	$18
	.byte	$18
	.byte	$2C
	.byte	$2C
	.byte	$1C
	.byte	$1D
	.byte	$11
	.byte	$55
	.byte	$11
	.byte	$98
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$11
	.byte	$05
	.byte	$16
	.byte	$11
	.byte	$E8
	.byte	$2A
	.byte	$12
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$18
	.byte	$10
	.byte	$10
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$2A
	.byte	$1C
	.byte	$1D
	.byte	$11
	.byte	$08
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$48
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$11
	.byte	$F8
	.byte	$10
	.byte	$06
	.byte	$78
	.byte	$01
	.byte	$10
	.byte	$06
	.byte	$75
	.byte	$10
	.byte	$08
	.byte	$88
	.byte	$14
	.byte	$15
	.byte	$10
	.byte	$0C
	.byte	$08
	.byte	$11
	.byte	$98
	.byte	$10
	.byte	$05
	.byte	$38
	.byte	$10
	.byte	$08
	.byte	$A5
	.byte	$10
	.byte	$06
	.byte	$88
	.byte	$0D
	.byte	$15
	.byte	$00
	.byte	$10
	.byte	$09
	.byte	$38
	.byte	$01
	.byte	$01
	.byte	$2C
	.byte	$10
	.byte	$02
	.byte	$5B
	.byte	$10
	.byte	$09
	.byte	$88
	.byte	$2C
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$0B
	.byte	$08
	.byte	$10
	.byte	$0B
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$26
	.byte	$27
	.byte	$10
	.byte	$0A
	.byte	$48
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$12
	.byte	$61
	.byte	$08
	.byte	$10
	.byte	$03
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$68
	.byte	$11
	.byte	$08
	.byte	$25
	.byte	$10
	.byte	$0D
	.byte	$08
	.byte	$2F
	.byte	$02
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$2A
	.byte	$2A
	.byte	$0E
	.byte	$10
	.byte	$14
	.byte	$08
	.byte	$10
	.byte	$05
	.byte	$B8
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$48
	.byte	$26
	.byte	$10
	.byte	$09
	.byte	$B8
	.byte	$07
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$14
	.byte	$0A
	.byte	$10
	.byte	$08
	.byte	$48
	.byte	$1C
	.byte	$1D
	.byte	$12
	.byte	$64
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$12
	.byte	$64
	.byte	$10
	.byte	$08
	.byte	$E8
	.byte	$1C
	.byte	$1D
	.byte	$14
	.byte	$12
	.byte	$C1
	.byte	$10
	.byte	$27
	.byte	$08
	.byte	$28
	.byte	$1E
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$6B
	.byte	$11
	.byte	$88
	.byte	$29
	.byte	$12
	.byte	$E2
	.byte	$12
	.byte	$81
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$0D
	.byte	$05
	.byte	$12
	.byte	$62
	.byte	$10
	.byte	$05
	.byte	$28
	.byte	$0B
	.byte	$07
	.byte	$0A
	.byte	$01
	.byte	$12
	.byte	$63
	.byte	$10
	.byte	$28
	.byte	$48
	.byte	$11
	.byte	$AA
	.byte	$11
	.byte	$E8
	.byte	$04
	.byte	$11
	.byte	$23
	.byte	$11
	.byte	$25
	.byte	$0D
	.byte	$15
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$12
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$09
	.byte	$18
	.byte	$10
	.byte	$07
	.byte	$07
	.byte	$10
	.byte	$07
	.byte	$08
	.byte	$11
	.byte	$87
	.byte	$16
	.byte	$10
	.byte	$07
	.byte	$08
	.byte	$0A
	.byte	$2C
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$10
	.byte	$02
	.byte	$59
	.byte	$22
	.byte	$23
	.byte	$10
	.byte	$09
	.byte	$28
	.byte	$10
	.byte	$03
	.byte	$59
	.byte	$12
	.byte	$02
	.byte	$11
	.byte	$52
	.byte	$2C
.segment	"RODATA"
.segment	"BANK0"
_level03_enemy:
	.byte	$3A
	.byte	$02
	.byte	$01
	.byte	$7A
	.byte	$02
	.byte	$01
	.byte	$7D
	.byte	$02
	.byte	$02
	.byte	$91
	.byte	$01
	.byte	$01
	.byte	$FF
_level03:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$EC
	.byte	$F3
	.byte	$23
	.byte	$9B
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$04
	.byte	$04
	.byte	$12
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$12
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$07
	.byte	$10
	.byte	$1E
	.byte	$08
	.byte	$07
	.byte	$12
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$06
	.byte	$2A
	.byte	$12
	.byte	$05
	.byte	$08
	.byte	$10
	.byte	$0B
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$12
	.byte	$A2
	.byte	$2C
	.byte	$2C
	.byte	$18
	.byte	$18
	.byte	$10
	.byte	$0B
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$10
	.byte	$06
	.byte	$38
	.byte	$11
	.byte	$D8
	.byte	$2C
	.byte	$2C
	.byte	$10
	.byte	$0C
	.byte	$28
	.byte	$10
	.byte	$19
	.byte	$08
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$01
	.byte	$2C
	.byte	$1C
	.byte	$1D
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$2A
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$10
	.byte	$09
	.byte	$28
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$0F
	.byte	$10
	.byte	$0A
	.byte	$48
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$01
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$1B
	.byte	$58
	.byte	$11
	.byte	$A5
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$26
	.byte	$27
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$24
	.byte	$12
	.byte	$01
	.byte	$27
	.byte	$10
	.byte	$07
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$12
	.byte	$02
	.byte	$09
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$23
	.byte	$25
	.byte	$0A
	.byte	$10
	.byte	$08
	.byte	$28
	.byte	$16
	.byte	$10
	.byte	$1B
	.byte	$D8
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$88
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$48
	.byte	$09
	.byte	$1C
	.byte	$1D
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$10
	.byte	$28
	.byte	$88
	.byte	$0A
	.byte	$1E
	.byte	$1F
	.byte	$0B
	.byte	$10
	.byte	$29
	.byte	$98
	.byte	$0A
	.byte	$12
	.byte	$E2
	.byte	$11
	.byte	$09
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$2A
	.byte	$10
	.byte	$03
	.byte	$C9
	.byte	$0B
	.byte	$10
	.byte	$28
	.byte	$98
	.byte	$2C
	.byte	$0F
	.byte	$11
	.byte	$49
	.byte	$10
	.byte	$0A
	.byte	$68
	.byte	$11
	.byte	$49
	.byte	$10
	.byte	$06
	.byte	$58
	.byte	$0D
	.byte	$15
	.byte	$11
	.byte	$49
	.byte	$10
	.byte	$2A
	.byte	$48
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$10
	.byte	$28
	.byte	$48
	.byte	$12
	.byte	$E2
	.byte	$1E
	.byte	$1F
	.byte	$10
	.byte	$07
	.byte	$88
	.byte	$11
	.byte	$69
	.byte	$14
	.byte	$0D
	.byte	$10
	.byte	$07
	.byte	$88
	.byte	$0A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$10
	.byte	$08
	.byte	$68
	.byte	$10
	.byte	$04
	.byte	$C7
	.byte	$10
	.byte	$47
	.byte	$08
	.byte	$10
	.byte	$0D
	.byte	$D8
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$2C
	.byte	$0C
	.byte	$10
	.byte	$08
	.byte	$C8
	.byte	$06
	.byte	$22
	.byte	$23
	.byte	$11
	.byte	$16
	.byte	$10
	.byte	$49
	.byte	$68
	.byte	$10
	.byte	$22
	.byte	$39
	.byte	$10
	.byte	$06
	.byte	$D8
.segment	"RODATA"
.segment	"BANK0"
_level04_enemy:
	.byte	$49
	.byte	$02
	.byte	$02
	.byte	$89
	.byte	$02
	.byte	$02
	.byte	$75
	.byte	$02
	.byte	$02
	.byte	$45
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$01
	.byte	$02
	.byte	$88
	.byte	$01
	.byte	$01
	.byte	$37
	.byte	$01
	.byte	$01
	.byte	$FF
_level04:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$1A
	.byte	$F6
	.byte	$1F
	.byte	$B7
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$15
	.byte	$04
	.byte	$04
	.byte	$15
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$15
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$07
	.byte	$10
	.byte	$1D
	.byte	$08
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$07
	.byte	$15
	.byte	$01
	.byte	$10
	.byte	$09
	.byte	$08
	.byte	$15
	.byte	$83
	.byte	$08
	.byte	$04
	.byte	$11
	.byte	$4F
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$15
	.byte	$C2
	.byte	$0E
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$16
	.byte	$2C
	.byte	$16
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$10
	.byte	$0C
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$10
	.byte	$0B
	.byte	$08
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$66
	.byte	$10
	.byte	$0C
	.byte	$08
	.byte	$0A
	.byte	$10
	.byte	$0C
	.byte	$08
	.byte	$11
	.byte	$39
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0B
	.byte	$11
	.byte	$D8
	.byte	$10
	.byte	$07
	.byte	$38
	.byte	$2A
	.byte	$10
	.byte	$06
	.byte	$19
	.byte	$10
	.byte	$15
	.byte	$08
	.byte	$14
	.byte	$10
	.byte	$0D
	.byte	$58
	.byte	$01
	.byte	$11
	.byte	$F9
	.byte	$10
	.byte	$07
	.byte	$08
	.byte	$10
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$09
	.byte	$10
	.byte	$03
	.byte	$E6
	.byte	$10
	.byte	$08
	.byte	$D8
	.byte	$15
	.byte	$02
	.byte	$30
	.byte	$10
	.byte	$0D
	.byte	$08
	.byte	$10
	.byte	$07
	.byte	$88
	.byte	$12
	.byte	$2E
	.byte	$15
	.byte	$03
	.byte	$13
	.byte	$10
	.byte	$07
	.byte	$D8
	.byte	$09
	.byte	$15
	.byte	$C1
	.byte	$0C
	.byte	$05
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$06
	.byte	$A8
	.byte	$0A
	.byte	$2C
	.byte	$16
	.byte	$2C
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$0D
	.byte	$10
	.byte	$25
	.byte	$38
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$0C
	.byte	$38
	.byte	$2C
	.byte	$2C
	.byte	$26
	.byte	$27
	.byte	$10
	.byte	$0C
	.byte	$08
	.byte	$11
	.byte	$35
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$03
	.byte	$0B
	.byte	$07
	.byte	$0A
	.byte	$02
	.byte	$10
	.byte	$0A
	.byte	$18
	.byte	$01
	.byte	$11
	.byte	$FB
	.byte	$10
	.byte	$15
	.byte	$88
	.byte	$10
	.byte	$0F
	.byte	$08
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$26
	.byte	$24
	.byte	$24
	.byte	$10
	.byte	$03
	.byte	$69
	.byte	$11
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$15
	.byte	$04
	.byte	$09
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$10
	.byte	$22
	.byte	$F8
	.byte	$15
	.byte	$01
	.byte	$0A
	.byte	$10
	.byte	$09
	.byte	$48
	.byte	$10
	.byte	$05
	.byte	$39
	.byte	$10
	.byte	$08
	.byte	$58
	.byte	$1E
	.byte	$1F
	.byte	$10
	.byte	$0A
	.byte	$48
	.byte	$0C
	.byte	$11
	.byte	$FA
	.byte	$05
	.byte	$10
	.byte	$46
	.byte	$18
	.byte	$10
	.byte	$22
	.byte	$36
	.byte	$15
	.byte	$02
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$11
	.byte	$76
	.byte	$10
	.byte	$08
	.byte	$28
	.byte	$22
	.byte	$23
	.byte	$2C
	.byte	$2C
	.byte	$29
	.byte	$15
	.byte	$41
	.byte	$10
	.byte	$0B
	.byte	$78
	.byte	$10
	.byte	$06
	.byte	$38
.segment	"RODATA"
.segment	"BANK0"
_level05_enemy:
	.byte	$88
	.byte	$02
	.byte	$01
	.byte	$59
	.byte	$02
	.byte	$05
	.byte	$81
	.byte	$02
	.byte	$01
	.byte	$4A
	.byte	$01
	.byte	$01
	.byte	$47
	.byte	$01
	.byte	$01
	.byte	$69
	.byte	$01
	.byte	$05
	.byte	$70
	.byte	$01
	.byte	$01
	.byte	$FF
_level05:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DA
	.byte	$B1
	.byte	$0E
	.byte	$15
	.byte	$47
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$04
	.byte	$04
	.byte	$0C
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$07
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$01
	.byte	$0C
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$2A
	.byte	$0C
	.byte	$01
	.byte	$0B
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$15
	.byte	$2A
	.byte	$14
	.byte	$0D
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$0A
	.byte	$0C
	.byte	$E2
	.byte	$03
	.byte	$08
	.byte	$38
	.byte	$09
	.byte	$87
	.byte	$09
	.byte	$49
	.byte	$09
	.byte	$C8
	.byte	$0C
	.byte	$A3
	.byte	$0C
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$0F
	.byte	$03
	.byte	$0D
	.byte	$08
	.byte	$01
	.byte	$03
	.byte	$0D
	.byte	$08
	.byte	$03
	.byte	$0E
	.byte	$28
	.byte	$09
	.byte	$EA
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$09
	.byte	$6A
	.byte	$03
	.byte	$1A
	.byte	$28
	.byte	$03
	.byte	$0D
	.byte	$08
	.byte	$0F
	.byte	$00
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$01
	.byte	$03
	.byte	$0E
	.byte	$48
	.byte	$03
	.byte	$1B
	.byte	$38
	.byte	$03
	.byte	$04
	.byte	$A7
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$A7
	.byte	$0F
	.byte	$03
	.byte	$09
	.byte	$28
	.byte	$03
	.byte	$22
	.byte	$38
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$2A
	.byte	$03
	.byte	$0A
	.byte	$48
	.byte	$2A
	.byte	$1E
	.byte	$1F
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$3B
	.byte	$08
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$03
	.byte	$0B
	.byte	$88
	.byte	$1E
	.byte	$1F
	.byte	$03
	.byte	$07
	.byte	$18
	.byte	$09
	.byte	$54
	.byte	$03
	.byte	$0B
	.byte	$28
	.byte	$09
	.byte	$14
	.byte	$09
	.byte	$7B
	.byte	$03
	.byte	$09
	.byte	$28
	.byte	$00
	.byte	$09
	.byte	$3B
	.byte	$03
	.byte	$0B
	.byte	$F8
	.byte	$03
	.byte	$1B
	.byte	$C8
	.byte	$03
	.byte	$24
	.byte	$77
	.byte	$03
	.byte	$39
	.byte	$08
	.byte	$20
	.byte	$21
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$0C
	.byte	$05
	.byte	$09
	.byte	$F2
.segment	"RODATA"
.segment	"BANK0"
_level06_enemy:
	.byte	$4A
	.byte	$02
	.byte	$01
	.byte	$37
	.byte	$02
	.byte	$01
	.byte	$75
	.byte	$02
	.byte	$06
	.byte	$44
	.byte	$02
	.byte	$01
	.byte	$70
	.byte	$02
	.byte	$02
	.byte	$34
	.byte	$01
	.byte	$01
	.byte	$52
	.byte	$01
	.byte	$01
	.byte	$61
	.byte	$01
	.byte	$01
	.byte	$70
	.byte	$01
	.byte	$01
	.byte	$FF
_level06:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E8
	.byte	$E7
	.byte	$02
	.byte	$14
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$0B
	.byte	$0F
	.byte	$04
	.byte	$04
	.byte	$0F
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$0F
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$03
	.byte	$1D
	.byte	$08
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$08
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$06
	.byte	$17
	.byte	$19
	.byte	$2A
	.byte	$2C
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$09
	.byte	$18
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$0F
	.byte	$C1
	.byte	$0B
	.byte	$88
	.byte	$0F
	.byte	$83
	.byte	$0F
	.byte	$04
	.byte	$0E
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$0D
	.byte	$15
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$03
	.byte	$1B
	.byte	$08
	.byte	$0B
	.byte	$08
	.byte	$2F
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$27
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$07
	.byte	$0F
	.byte	$02
	.byte	$0D
	.byte	$0D
	.byte	$07
	.byte	$15
	.byte	$03
	.byte	$16
	.byte	$78
	.byte	$28
	.byte	$16
	.byte	$28
	.byte	$03
	.byte	$0F
	.byte	$98
	.byte	$26
	.byte	$27
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$0B
	.byte	$42
	.byte	$26
	.byte	$24
	.byte	$24
	.byte	$0F
	.byte	$C1
	.byte	$03
	.byte	$07
	.byte	$98
	.byte	$0F
	.byte	$02
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$23
	.byte	$03
	.byte	$25
	.byte	$67
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$0A
	.byte	$03
	.byte	$05
	.byte	$58
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$6A
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$0F
	.byte	$42
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$0C
	.byte	$03
	.byte	$03
	.byte	$4B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$2A
	.byte	$C8
	.byte	$03
	.byte	$1C
	.byte	$08
	.byte	$0B
	.byte	$08
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$03
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$6D
	.byte	$0B
	.byte	$08
	.byte	$20
	.byte	$21
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$22
	.byte	$23
	.byte	$0B
	.byte	$48
	.byte	$1A
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$0F
	.byte	$83
	.byte	$03
	.byte	$02
	.byte	$CB
	.byte	$2C
	.byte	$2C
.segment	"RODATA"
.segment	"BANK0"
_level07_enemy:
	.byte	$AD
	.byte	$02
	.byte	$02
	.byte	$56
	.byte	$02
	.byte	$06
	.byte	$52
	.byte	$02
	.byte	$06
	.byte	$30
	.byte	$02
	.byte	$02
	.byte	$9D
	.byte	$01
	.byte	$06
	.byte	$2B
	.byte	$01
	.byte	$02
	.byte	$A6
	.byte	$01
	.byte	$05
	.byte	$86
	.byte	$01
	.byte	$01
	.byte	$67
	.byte	$01
	.byte	$02
	.byte	$27
	.byte	$01
	.byte	$02
	.byte	$24
	.byte	$01
	.byte	$01
	.byte	$42
	.byte	$01
	.byte	$02
	.byte	$4C
	.byte	$00
	.byte	$05
	.byte	$5C
	.byte	$00
	.byte	$05
	.byte	$6C
	.byte	$00
	.byte	$05
	.byte	$6A
	.byte	$00
	.byte	$06
	.byte	$4A
	.byte	$00
	.byte	$06
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$FF
_level07:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$2F
	.byte	$2A
	.byte	$28
	.byte	$9A
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$1E
	.byte	$08
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$88
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$88
	.byte	$1C
	.byte	$1D
	.byte	$2C
	.byte	$2C
	.byte	$03
	.byte	$62
	.byte	$17
	.byte	$19
	.byte	$02
	.byte	$C8
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$03
	.byte	$62
	.byte	$18
	.byte	$18
	.byte	$02
	.byte	$C8
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$06
	.byte	$38
	.byte	$30
	.byte	$03
	.byte	$C1
	.byte	$0B
	.byte	$01
	.byte	$16
	.byte	$48
	.byte	$04
	.byte	$02
	.byte	$62
	.byte	$03
	.byte	$02
	.byte	$09
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$7A
	.byte	$0A
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$1C
	.byte	$1D
	.byte	$2A
	.byte	$2A
	.byte	$01
	.byte	$02
	.byte	$6A
	.byte	$02
	.byte	$C8
	.byte	$0A
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$2A
	.byte	$2A
	.byte	$01
	.byte	$02
	.byte	$6A
	.byte	$01
	.byte	$06
	.byte	$68
	.byte	$2C
	.byte	$0C
	.byte	$02
	.byte	$FA
	.byte	$01
	.byte	$07
	.byte	$58
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$07
	.byte	$C8
	.byte	$06
	.byte	$2C
	.byte	$02
	.byte	$77
	.byte	$2A
	.byte	$01
	.byte	$08
	.byte	$78
	.byte	$28
	.byte	$1E
	.byte	$1F
	.byte	$28
	.byte	$01
	.byte	$0A
	.byte	$C8
	.byte	$01
	.byte	$1B
	.byte	$88
	.byte	$01
	.byte	$29
	.byte	$08
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$01
	.byte	$2F
	.byte	$08
	.byte	$28
	.byte	$2C
	.byte	$01
	.byte	$05
	.byte	$47
	.byte	$02
	.byte	$C8
	.byte	$08
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$1C
	.byte	$1D
	.byte	$01
	.byte	$02
	.byte	$A7
	.byte	$02
	.byte	$C8
	.byte	$06
	.byte	$2A
	.byte	$01
	.byte	$02
	.byte	$A5
	.byte	$01
	.byte	$02
	.byte	$6C
	.byte	$28
	.byte	$01
	.byte	$0A
	.byte	$38
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$01
	.byte	$05
	.byte	$98
	.byte	$02
	.byte	$B9
	.byte	$02
	.byte	$1E
	.byte	$2A
	.byte	$02
	.byte	$98
	.byte	$04
	.byte	$02
	.byte	$11
	.byte	$0D
	.byte	$15
	.byte	$01
	.byte	$09
	.byte	$58
	.byte	$02
	.byte	$52
	.byte	$01
	.byte	$0A
	.byte	$98
	.byte	$02
	.byte	$58
	.byte	$02
	.byte	$DC
	.byte	$01
	.byte	$08
	.byte	$48
	.byte	$02
	.byte	$7B
	.byte	$28
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$25
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$01
	.byte	$07
	.byte	$58
	.byte	$26
	.byte	$24
	.byte	$27
	.byte	$01
	.byte	$11
	.byte	$D8
	.byte	$01
	.byte	$07
	.byte	$38
	.byte	$01
	.byte	$22
	.byte	$21
	.byte	$01
	.byte	$02
	.byte	$D5
	.byte	$01
	.byte	$07
	.byte	$18
	.byte	$04
	.byte	$02
	.byte	$C5
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$02
	.byte	$BE
	.byte	$2C
	.byte	$29
	.byte	$01
	.byte	$0A
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$16
	.byte	$02
	.byte	$37
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$01
	.byte	$03
	.byte	$FB
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$29
	.byte	$2C
	.byte	$22
	.byte	$23
	.byte	$01
	.byte	$0F
	.byte	$68
	.byte	$01
	.byte	$27
	.byte	$98
.segment	"RODATA"
.segment	"BANK0"
_level10_enemy:
	.byte	$49
	.byte	$02
	.byte	$04
	.byte	$73
	.byte	$02
	.byte	$05
	.byte	$24
	.byte	$02
	.byte	$06
	.byte	$71
	.byte	$02
	.byte	$06
	.byte	$91
	.byte	$02
	.byte	$02
	.byte	$2A
	.byte	$01
	.byte	$06
	.byte	$9C
	.byte	$00
	.byte	$01
	.byte	$FF
_level10:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DF
	.byte	$E7
	.byte	$EA
	.byte	$1C
	.byte	$25
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$10
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$83
	.byte	$10
	.byte	$04
	.byte	$0E
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$2A
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$10
	.byte	$04
	.byte	$15
	.byte	$03
	.byte	$0C
	.byte	$48
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$1B
	.byte	$68
	.byte	$0F
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$0C
	.byte	$05
	.byte	$10
	.byte	$04
	.byte	$03
	.byte	$06
	.byte	$E8
	.byte	$0B
	.byte	$03
	.byte	$0C
	.byte	$F8
	.byte	$28
	.byte	$10
	.byte	$21
	.byte	$03
	.byte	$18
	.byte	$B8
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$15
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$16
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$03
	.byte	$0B
	.byte	$18
	.byte	$1E
	.byte	$1F
	.byte	$03
	.byte	$17
	.byte	$28
	.byte	$29
	.byte	$2C
	.byte	$29
	.byte	$03
	.byte	$0C
	.byte	$68
	.byte	$03
	.byte	$02
	.byte	$F3
	.byte	$03
	.byte	$0F
	.byte	$58
	.byte	$03
	.byte	$22
	.byte	$1C
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$16
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$54
	.byte	$03
	.byte	$0A
	.byte	$18
	.byte	$08
	.byte	$54
	.byte	$03
	.byte	$0A
	.byte	$38
	.byte	$03
	.byte	$2C
	.byte	$68
	.byte	$10
	.byte	$82
	.byte	$14
	.byte	$03
	.byte	$23
	.byte	$5B
	.byte	$08
	.byte	$83
	.byte	$06
	.byte	$03
	.byte	$04
	.byte	$A4
	.byte	$03
	.byte	$09
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$A4
	.byte	$03
	.byte	$08
	.byte	$88
	.byte	$03
	.byte	$23
	.byte	$33
	.byte	$09
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$24
	.byte	$34
	.byte	$03
	.byte	$02
	.byte	$9C
	.byte	$03
	.byte	$3B
	.byte	$08
	.byte	$03
	.byte	$0C
	.byte	$F8
	.byte	$10
	.byte	$02
	.byte	$0C
	.byte	$03
	.byte	$49
	.byte	$68
	.byte	$08
	.byte	$16
	.byte	$0C
	.byte	$04
	.byte	$03
	.byte	$4B
	.byte	$78
	.byte	$0C
	.byte	$07
	.byte	$07
	.byte	$0A
	.byte	$08
	.byte	$C8
	.byte	$03
	.byte	$23
	.byte	$88
	.byte	$08
	.byte	$E5
	.byte	$03
	.byte	$07
	.byte	$18
	.byte	$08
	.byte	$65
	.byte	$1A
	.byte	$08
	.byte	$82
	.byte	$03
	.byte	$04
	.byte	$88
	.byte	$04
	.byte	$04
	.byte	$10
	.byte	$E1
	.byte	$03
	.byte	$03
	.byte	$8D
.segment	"RODATA"
.segment	"BANK0"
_level_debug_tiledump_enemy:
	.byte	$FF
_level_debug_tiledump:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$8C
	.byte	$5D
	.byte	$0F
	.byte	$C6
	.byte	$01
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$04
	.byte	$07
	.byte	$36
	.byte	$07
	.byte	$04
	.byte	$2C
	.byte	$36
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0E
	.byte	$35
	.byte	$88
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$35
	.byte	$C8
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$35
	.byte	$C8
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$35
	.byte	$C8
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$35
	.byte	$C8
	.byte	$32
	.byte	$36
	.byte	$A2
	.byte	$36
	.byte	$03
	.byte	$35
	.byte	$C8
	.byte	$34
	.byte	$07
	.byte	$07
	.byte	$34
	.byte	$1E
	.byte	$08
	.byte	$34
	.byte	$1B
	.byte	$08
	.byte	$2C
	.byte	$06
	.byte	$05
	.byte	$36
	.byte	$07
	.byte	$34
	.byte	$03
	.byte	$D8
.segment	"RODATA"
.segment	"BANK0"
_level_star_test_enemy:
	.byte	$FF
_level_star_test:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$56
	.byte	$09
	.byte	$15
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$06
	.byte	$2A
	.byte	$17
	.byte	$19
	.byte	$2A
	.byte	$03
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$C8
	.byte	$18
	.byte	$18
	.byte	$01
	.byte	$0C
	.byte	$08
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$0C
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$1C
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$3E
	.byte	$01
	.byte	$1D
	.byte	$38
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$7B
	.byte	$01
	.byte	$1D
	.byte	$38
	.byte	$01
	.byte	$1F
	.byte	$B8
	.byte	$01
	.byte	$1F
	.byte	$B8
	.byte	$01
	.byte	$1F
	.byte	$B8
	.byte	$01
	.byte	$1E
	.byte	$B8
	.byte	$03
	.byte	$05
	.byte	$1A
	.byte	$02
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$43
	.byte	$B8
.segment	"RODATA"
.segment	"BANK0"
_level_enemies_test_enemy:
	.byte	$7B
	.byte	$02
	.byte	$05
	.byte	$8B
	.byte	$02
	.byte	$05
	.byte	$81
	.byte	$02
	.byte	$03
	.byte	$8E
	.byte	$01
	.byte	$03
	.byte	$4D
	.byte	$01
	.byte	$03
	.byte	$20
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$50
	.byte	$02
	.byte	$07
	.byte	$FF
_level_enemies_test:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$6C
	.byte	$D6
	.byte	$09
	.byte	$5C
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$03
	.byte	$1A
	.byte	$0E
	.byte	$01
	.byte	$0C
	.byte	$08
	.byte	$2C
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$2B
	.byte	$01
	.byte	$1B
	.byte	$18
	.byte	$01
	.byte	$1F
	.byte	$28
	.byte	$01
	.byte	$1E
	.byte	$28
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$16
	.byte	$28
	.byte	$14
	.byte	$0D
	.byte	$03
	.byte	$01
	.byte	$15
	.byte	$01
	.byte	$1C
	.byte	$48
	.byte	$01
	.byte	$1E
	.byte	$08
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$18
	.byte	$02
	.byte	$4C
	.byte	$02
	.byte	$C8
	.byte	$01
	.byte	$06
	.byte	$16
	.byte	$01
	.byte	$16
	.byte	$18
	.byte	$01
	.byte	$1D
	.byte	$68
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$F4
	.byte	$01
	.byte	$1D
	.byte	$38
	.byte	$14
	.byte	$01
	.byte	$3D
	.byte	$28
	.byte	$01
	.byte	$46
	.byte	$98
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$93
.segment	"RODATA"
_level_nt_length:
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
_valrigard_starting_nt:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
_valrigard_inital_coords:
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$90
	.byte	$4D
_level_compressed_nametable_pointers:
	.addr	_level01
	.addr	_level02
	.addr	_level03
	.addr	_level04
	.addr	_level05
	.addr	_level06
	.addr	_level07
	.addr	_level10
	.addr	_level_debug_tiledump
	.addr	_level_star_test
	.addr	_level_enemies_test
_level_nametable_banks:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_level_names:
	.addr	L0EDD
	.addr	L0EDF
	.addr	L0EE1
	.addr	L0EE3
	.addr	L0EE5
	.addr	L0EE7
	.addr	L0EE9
	.addr	L0EEB
	.addr	L0EED
	.addr	L0EEF
	.addr	L0EF1
_level_enemy_data:
	.addr	_level01_enemy
	.addr	_level02_enemy
	.addr	_level03_enemy
	.addr	_level04_enemy
	.addr	_level05_enemy
	.addr	_level06_enemy
	.addr	_level07_enemy
	.addr	_level10_enemy
	.addr	_level_debug_tiledump_enemy
	.addr	_level_star_test_enemy
	.addr	_level_enemies_test_enemy
.segment	"RODATA"
_palette_sp:
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$32
	.byte	$0F
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$0F
	.byte	$30
	.byte	$16
	.byte	$00
_cmaps:
	.addr	_cmap
	.addr	_cmap+240
	.addr	_cmap+480
	.addr	_cmap+720
	.addr	_cmap+960
	.addr	_cmap+1200
_draw_screen_sub_lookup_addr_0:
	.byte	$00
	.byte	$40
	.byte	$80
	.byte	$C0
_draw_screen_sub_lookup_index_offset_0:
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0C
_draw_screen_sub_lookup_addr_1:
	.byte	$20
	.byte	$60
	.byte	$A0
	.byte	$E0
_draw_screen_sub_lookup_index_offset_1:
	.byte	$02
	.byte	$06
	.byte	$0A
	.byte	$0E
_leftright_movement_offset_lookup_table:
	.byte	$FF
	.byte	$0F
_leftright_movement_moving_lookup_table:
	.byte	$FF
	.byte	$01
_updown_movement_offset_lookup_table:
	.byte	$FF
	.byte	$0F
_valrigard_idle_sprite_lookup_table:
	.addr	_valrigard_idle_left
	.addr	_valrigard_idle_right
_valrigard_sword_swing_sprite_lookup_table:
	.addr	_valrigard_swing_left_followthrough
	.addr	_valrigard_swing_right_followthrough
	.addr	_valrigard_swing_left_followthrough
	.addr	_valrigard_swing_right_followthrough
	.addr	_valrigard_swing_left_followthrough
	.addr	_valrigard_swing_right_followthrough
	.addr	_valrigard_idle_left
	.addr	_valrigard_idle_right
	.addr	_valrigard_swing_left_high
	.addr	_valrigard_swing_right_high
	.addr	_valrigard_swing_left_mid
	.addr	_valrigard_swing_right_mid
	.addr	_valrigard_swing_left_low
	.addr	_valrigard_swing_right_low
	.addr	_valrigard_swing_left_low
	.addr	_valrigard_swing_right_low
_valrigard_dead_sprite_lookup_table:
	.addr	_valrigard_dead_left
	.addr	_valrigard_dead_right
_korbat_sprite_lookup_table:
	.addr	_korbat_left
	.addr	_korbat_right
_grarrl_sprite_lookup_table:
	.addr	_grarrl_left
	.addr	_grarrl_right
_cannon_sprite_lookup_table:
	.addr	_cannon_up
	.addr	_cannon_up_left
	.addr	_cannon_left
	.addr	_cannon_down_left
	.addr	_cannon_down
	.addr	_cannon_down_right
	.addr	_cannon_right
	.addr	_cannon_up_right
_cannon_ul_sprite_lookup_table:
	.byte	$06
	.byte	$07
	.byte	$00
_cannon_ur_sprite_lookup_table:
	.byte	$02
	.byte	$01
	.byte	$00
_cannon_dr_sprite_lookup_table:
	.byte	$02
	.byte	$03
	.byte	$04
_cannon_dl_sprite_lookup_table:
	.byte	$06
	.byte	$05
	.byte	$04
_cannon_sprite_quadrant_lookup_table:
	.addr	_cannon_ul_sprite_lookup_table
	.addr	_cannon_ur_sprite_lookup_table
	.addr	_cannon_dl_sprite_lookup_table
	.addr	_cannon_dr_sprite_lookup_table
_acidblob_sprite_lookup_table:
	.addr	_acidblob0
	.addr	_acidblob3
	.addr	_acidblob0
	.addr	_acidblob1
	.addr	_acidblob2
	.addr	_acidblob1
	.addr	_acidblob0
_sun_sprite_lookup_table:
	.addr	_sun0
	.addr	_sun1
_splyke_sprite_lookup_table:
	.addr	_splyke_idle_left0
	.addr	_splyke_idle_right0
	.addr	_splyke_idle_left0
	.addr	_splyke_idle_right0
	.addr	_splyke_idle_left1
	.addr	_splyke_idle_right1
	.addr	_splyke_idle_left1
	.addr	_splyke_idle_right1
	.addr	_splyke_tornado0
	.addr	_splyke_tornado0
	.addr	_splyke_tornado1
	.addr	_splyke_tornado1
	.addr	_splyke_tornado2
	.addr	_splyke_tornado2
	.addr	_splyke_tornado1
	.addr	_splyke_tornado1
_purple_death_effect_sprite_lookup_table:
	.addr	_purple_death_effect1
	.addr	_purple_death_effect1
	.addr	_purple_death_effect0
_splyke_death_effect_sprite_lookup_table:
	.addr	_splyke_death_effect1
	.addr	_splyke_death_effect1
	.addr	_splyke_death_effect0
_title_string:
	.byte	$43,$61,$73,$74,$6C,$65,$20,$45,$73,$63,$61,$70,$65,$20,$41,$6C
	.byte	$70,$68,$61,$00
_author_string:
	.byte	$42,$79,$20,$6D,$61,$63,$6F,$73,$74,$65,$6E,$00
_instruction_string:
	.byte	$50,$72,$65,$73,$73,$20,$55,$70,$20,$74,$6F,$20,$73,$74,$61,$72
	.byte	$74,$00
_level_complete_string:
	.byte	$4C,$65,$76,$65,$6C,$20,$63,$6F,$6D,$70,$6C,$65,$74,$65,$21,$00
_down_to_restart_string:
	.byte	$44,$6F,$77,$6E,$20,$74,$6F,$20,$72,$65,$73,$74,$61,$72,$74,$2E
	.byte	$00
_enemy_hitbox_width_lookup_table:
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$06
	.byte	$06
	.byte	$00
_enemy_hitbox_height_lookup_table:
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$06
	.byte	$06
	.byte	$00
L0EE7:
	.byte	$4C,$65,$76,$65,$6C,$20,$20,$36,$20,$00
L0EEB:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$30,$20,$00
L0EE5:
	.byte	$4C,$65,$76,$65,$6C,$20,$20,$35,$20,$00
L0EF1:
	.byte	$45,$6E,$65,$6D,$79,$54,$65,$73,$74,$00
L0EE3:
	.byte	$4C,$65,$76,$65,$6C,$20,$20,$34,$20,$00
L0EE1:
	.byte	$4C,$65,$76,$65,$6C,$20,$20,$33,$20,$00
L0EE9:
	.byte	$4C,$65,$76,$65,$6C,$20,$20,$37,$20,$00
L0EDF:
	.byte	$4C,$65,$76,$65,$6C,$20,$20,$32,$20,$00
L0EEF:
	.byte	$53,$74,$61,$72,$20,$54,$65,$73,$74,$00
L0EDD:
	.byte	$4C,$65,$76,$65,$6C,$20,$20,$31,$20,$00
L0EED:
	.byte	$54,$69,$6C,$65,$20,$44,$75,$6D,$70,$00

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_temppointer:
	.res	2,$00
_temp_mutablepointer:
	.res	2,$00
_temp_funcpointer:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_player_frame_timer:
	.res	1,$00
_player_sword_timer:
	.res	1,$00
_player_flags:
	.res	1,$00
_game_mode:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_nt:
	.res	1,$00
_scroll_x:
	.res	2,$00
_pseudo_scroll_y:
	.res	2,$00
_scroll_y:
	.res	2,$00
_min_scroll_y:
	.res	2,$00
_max_scroll_y:
	.res	2,$00
_initial_scroll:
	.res	2,$00
_scroll_count:
	.res	1,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_level_index:
	.res	1,$00
_energy:
	.res	1,$00
_score:
	.res	2,$00
_enemy_score:
	.res	1,$00
_stars:
	.res	1,$00
_timer:
	.res	1,$00
_song:
	.res	1,$00
_nt_min:
	.res	1,$00
_nt_max:
	.res	1,$00
_nt_current:
	.res	1,$00
_valrigard:
	.res	8,$00
_hitbox:
	.res	4,$00
_hitbox2:
	.res	4,$00
_shuffle_offset:
	.res	1,$00
_shuffle_maximum:
	.res	1,$00
_debug_tile_x:
	.res	1,$00
_debug_tile_y:
	.res	1,$00
_conveyor_delta:
	.res	1,$00
_menu_index:
	.res	1,$00
_tile_clear_queue:
	.res	16,$00
_tile_clear_front:
	.res	1,$00
_tile_clear_back:
	.res	1,$00
.segment	"BSS"
_shuffle_array:
	.res	128,$00
_enemies:
	.res	289,$00
.segment	"XRAM"
_cmap:
	.res	1440,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_player();
;
	jsr     _draw_player
;
; for (y = 0; y < enemies.count; ++y) {
;
	lda     #$00
	sta     _y
	tax
L1B96:	lda     _y
	cmp     _enemies+288
	txa
	sbc     #$00
	bcs     L1B98
;
; temp1 = y + shuffle_offset;
;
	lda     _y
	clc
	adc     _shuffle_offset
	sta     _temp1
;
; AsmSet1ByteFromPtrAtIndexVar(x, shuffle_array, temp1);
;
	ldy     _temp1
	lda     _shuffle_array,y
	sta     _x
;
; if (IS_ENEMY_ACTIVE(x)) {  
;
	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L1B97
;
; temp_x = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp_x
;
; temp_y = enemies.y[x];
;
	ldy     _x
	lda     _enemies+32,y
	sta     _temp_y
;
; if (temp_y < 0xf0) {
;
	cmp     #$F0
	bcs     L1B97
;
; temp0 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp0
;
; AsmCallFunctionAtPtrOffsetByIndexVar(draw_func_pointers, temp0);
;
	asl     a
	tay
	lda     _draw_func_pointers,y
	ldx     _draw_func_pointers+1,y
	jsr     callax
;
; for (y = 0; y < enemies.count; ++y) {
;
	ldx     #$00
L1B97:	inc     _y
	jmp     L1B96
;
; shuffle_offset += enemies.count;
;
L1B98:	lda     _enemies+288
	clc
	adc     _shuffle_offset
	sta     _shuffle_offset
;
; if (shuffle_offset >= shuffle_maximum) { shuffle_offset = 0; }
;
	cmp     _shuffle_maximum
	txa
	sbc     #$00
	bcc     L122E
	lda     #$00
	sta     _shuffle_offset
;
; draw_energy();
;
L122E:	jsr     _draw_energy
;
; draw_score();
;
	jsr     _draw_score
;
; if (!(get_frame_count() & 7)) {
;
	jsr     _get_frame_count
	and     #$07
	bne     L1234
;
; temp0 = palette_bg[7];
;
	lda     _palette_bg+7
	sta     _temp0
;
; palette_bg[7] = palette_bg[6];
;
	lda     _palette_bg+6
	sta     _palette_bg+7
;
; palette_bg[6] = palette_bg[5];
;
	lda     _palette_bg+5
	sta     _palette_bg+6
;
; palette_bg[5] = temp0;
;
	lda     _temp0
	sta     _palette_bg+5
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jmp     _pal_bg
;
; }
;
L1234:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player: near

.segment	"CODE"

;
; temp1 = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _temp1
;
; temp2 = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _temp2
;
; if (STATUS_DEAD) {
;
	lda     _player_flags
	and     #$02
	beq     L1B9A
;
; temp0 = DIRECTION;
;
	lda     _player_flags
	and     #$01
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, valrigard_dead_sprite_lookup_table, temp0);
;
	asl     a
	tay
	lda     _valrigard_dead_sprite_lookup_table,y
	sta     _temppointer
	lda     _valrigard_dead_sprite_lookup_table+1,y
;
; } else if (IS_SWINGING_SWORD) {
;
	jmp     L1B99
L1B9A:	lda     _player_flags
	and     #$04
	beq     L1B9B
;
; temp0 = (player_frame_timer & 0b11111110) | DIRECTION;
;
	lda     _player_frame_timer
	and     #$FE
	sta     ptr1
	lda     _player_flags
	and     #$01
	ora     ptr1
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, valrigard_sword_swing_sprite_lookup_table, temp0);
;
	asl     a
	tay
	lda     _valrigard_sword_swing_sprite_lookup_table,y
	sta     _temppointer
	lda     _valrigard_sword_swing_sprite_lookup_table+1,y
;
; } else {
;
	jmp     L1B99
;
; temp0 = DIRECTION;
;
L1B9B:	lda     _player_flags
	and     #$01
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, valrigard_idle_sprite_lookup_table, temp0);
;
	asl     a
	tay
	lda     _valrigard_idle_sprite_lookup_table,y
	sta     _temppointer
	lda     _valrigard_idle_sprite_lookup_table+1,y
L1B99:	sta     _temppointer+1
;
; oam_meta_spr(temp1, temp2, temppointer);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jsr     _oam_meta_spr
;
; if (player_frame_timer) { 
;
	lda     _player_frame_timer
	beq     L128E
;
; --player_frame_timer;
;
	dec     _player_frame_timer
;
; }
;
L128E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_korbat (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_korbat: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies+128,y
	and     #$01
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, korbat_sprite_lookup_table, temp3); 
;
	asl     a
	tay
	lda     _korbat_sprite_lookup_table,y
	sta     _temppointer
	lda     _korbat_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_grarrl (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_grarrl: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies+128,y
	and     #$01
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, grarrl_sprite_lookup_table, temp3); 
;
	asl     a
	tay
	lda     _grarrl_sprite_lookup_table,y
	sta     _temppointer
	lda     _grarrl_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_spikeball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_spikeball: near

.segment	"CODE"

;
; oam_meta_spr(temp_x, temp_y, spikeball);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_spikeball)
	ldx     #>(_spikeball)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cannon (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cannon: near

.segment	"CODE"

;
; temp3 = enemies.extra2[x];
;
	ldy     _x
	lda     _enemies+224,y
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cannon_sprite_lookup_table, temp3); 
;
	asl     a
	tay
	lda     _cannon_sprite_lookup_table,y
	sta     _temppointer
	lda     _cannon_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cannonball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cannonball: near

.segment	"CODE"

;
; oam_spr(temp_x, temp_y, CANNONBALL_SPRITE_OFFSET, 1);
;
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_acid (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_acid: near

.segment	"CODE"

;
; temp3 = enemies.extra2[x] >> 1;
;
	ldy     _x
	lda     _enemies+224,y
	lsr     a
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, acidblob_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _acidblob_sprite_lookup_table,y
	sta     _temppointer
	lda     _acidblob_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_acid_drop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_acid_drop: near

.segment	"CODE"

;
; oam_spr(temp_x, temp_y, ACIDDROP_SPRITE_OFFSET, 3);
;
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     #$03
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_splyke (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_splyke: near

.segment	"CODE"

;
; temp3 = enemies.extra2[x] & 0b110; // Mask the frame number.
;
	ldy     _x
	lda     _enemies+224,y
	and     #$06
	sta     _temp3
;
; temp4 = ENEMY_DIRECTION(x) | temp3;
;
	ldy     _x
	lda     _enemies+128,y
	and     #$01
	sta     ptr1
	lda     _temp3
	ora     ptr1
	sta     _temp4
;
; temp4 = temp4 | SPLYKE_IS_MOVING_AROUND(x) >> 2;
;
	ldy     _x
	lda     _enemies+128,y
	and     #$20
	lsr     a
	lsr     a
	ora     _temp4
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, splyke_sprite_lookup_table, temp4);
;
	asl     a
	tay
	lda     _splyke_sprite_lookup_table,y
	sta     _temppointer
	lda     _splyke_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sun (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sun: near

.segment	"CODE"

;
; temp3 = (enemies.actual_y[x] & 15) >> 3;
;
	ldy     _x
	lda     _enemies+64,y
	and     #$0F
	lsr     a
	lsr     a
	lsr     a
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, sun_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _sun_sprite_lookup_table,y
	sta     _temppointer
	lda     _sun_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_boss (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_boss: near

.segment	"CODE"

;
; oam_spr(temp_x, temp_y, 0x10, 3);
;
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$03
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_purple_death_effect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_purple_death_effect: near

.segment	"CODE"

;
; temp3 = enemies.timer[x] >> 2; // 12 frames -> 3 valid positions
;
	ldy     _x
	lda     _enemies+256,y
	lsr     a
	lsr     a
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, purple_death_effect_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _purple_death_effect_sprite_lookup_table,y
	sta     _temppointer
	lda     _purple_death_effect_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_splyke_death_effect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_splyke_death_effect: near

.segment	"CODE"

;
; temp3 = enemies.timer[x] >> 2; // 12 frames -> 3 valid positions
;
	ldy     _x
	lda     _enemies+256,y
	lsr     a
	lsr     a
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, splyke_death_effect_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _splyke_death_effect_sprite_lookup_table,y
	sta     _temppointer
	lda     _splyke_death_effect_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_score: near

.segment	"CODE"

;
; if (score == 0){
;
	lda     _score
	ora     _score+1
	bne     L1292
;
; oam_spr(232, 20, 0, 3);
;
	jsr     decsp3
	lda     #$E8
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$03
	jmp     _oam_spr
;
; y = 4;
;
L1292:	lda     #$04
	sta     _y
;
; temp0 = 0;
;
	lda     #$00
	sta     _temp0
;
; for (x = 200; x <= 232; x+=8) {
;
	lda     #$C8
L1B9D:	sta     _x
	cmp     #$E9
	bcs     L129F
;
; if (temp0) {
;
	lda     _temp0
;
; } else if (score_string[y]) {
;
	bne     L1BAA
	ldy     _y
	lda     _score_string,y
	beq     L1B9E
;
; temp0 = 1;
;
	lda     #$01
	sta     _temp0
;
; oam_spr(x, 20, score_string[y], 3);
;
L1BAA:	jsr     decsp3
	lda     _x
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	ldy     _y
	lda     _score_string,y
	ldy     #$00
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; --y;
;
L1B9E:	dec     _y
;
; for (x = 200; x <= 232; x+=8) {
;
	lda     #$08
	clc
	adc     _x
	jmp     L1B9D
;
; }
;
L129F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_energy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_energy: near

.segment	"CODE"

;
; oam_spr(200, 28, energy >> 4, 1);
;
	jsr     decsp3
	lda     #$C8
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     _energy
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(208, 28, energy & 0x0f, 1);
;
	jsr     decsp3
	lda     #$D0
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     _energy
	and     #$0F
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_U: near

.segment	"CODE"

;
; pseudo_scroll_y = sub_scroll_y(0x20, scroll_y);
;
	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; draw_screen_sub();
;
	jmp     _draw_screen_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_D: near

.segment	"CODE"

;
; pseudo_scroll_y = add_scroll_y(0x20, scroll_y) + 0xef; 
;
	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	clc
	adc     #$EF
	bcc     L154D
	inx
L154D:	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; draw_screen_sub();
;
	jmp     _draw_screen_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_sub: near

.segment	"CODE"

;
; temp1 = high_byte(pseudo_scroll_y);
;
	lda     _pseudo_scroll_y+1
	sta     _temp1
;
; set_data_pointer(cmaps[temp1]); // TODO: clamp this value to 6.
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1BAE
	inx
	clc
L1BAE:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = (temp1 & 1) << 1; // 0 or 2
;
	lda     _temp1
	and     #$01
	asl     a
	sta     _nt
;
; y = pseudo_scroll_y & 0xff;
;
	lda     _pseudo_scroll_y
	sta     _y
;
; temp2 = draw_screen_sub_lookup_index_offset_0[scroll_count];
;
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_index_offset_0,y
	sta     _temp2
;
; temp4 = draw_screen_sub_lookup_index_offset_1[scroll_count];
;
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_index_offset_1,y
	sta     _temp4
;
; address = get_ppu_addr(nt, draw_screen_sub_lookup_addr_0[scroll_count], y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_addr_0,y
	ldy     #$00
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + temp2;
;
	lda     _y
	and     #$F0
	clc
	adc     _temp2
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, draw_screen_sub_lookup_addr_1[scroll_count], y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_addr_1,y
	ldy     #$00
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + temp4;
;
	lda     _y
	and     #$F0
	clc
	adc     _temp4
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handle_tile_clear_queue (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_tile_clear_queue: near

.segment	"CODE"

;
; if (tile_clear_front == tile_clear_back) { return; }
;
	lda     _tile_clear_back
	cmp     _tile_clear_front
	beq     L1536
;
; address = tile_clear_queue[tile_clear_front]; 
;
	ldx     #$00
	lda     _tile_clear_front
	asl     a
	bcc     L1BB1
	inx
	clc
L1BB1:	adc     #<(_tile_clear_queue)
	sta     ptr1
	txa
	adc     #>(_tile_clear_queue)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _address+1
	dey
	lda     (ptr1),y
	sta     _address
;
; ++tile_clear_front;
;
	inc     _tile_clear_front
;
; tile_clear_front &= 0b111; // Clamp to <8
;
	lda     _tile_clear_front
	and     #$07
	sta     _tile_clear_front
;
; buffer_1_mt(address, EMPTY_TILE);
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     #$2C
	jmp     _buffer_1_mt
;
; }
;
L1536:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ begin_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_begin_level: near

.segment	"CODE"

;
; ppu_off(); // We're going to make big changes to VRAM so we need to turn it off.
;
	jsr     _ppu_off
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; SET_STATUS_ALIVE();
;
	lda     _player_flags
	and     #$FD
	sta     _player_flags
;
; load_level_new();
;
	jsr     _load_level_new
;
; seed_rng();
;
	jsr     _seed_rng
;
; calculate_shuffle_array();
;
	jsr     _calculate_shuffle_array
;
; energy = MAX_ENERGY;
;
	lda     #$70
	sta     _energy
;
; tile_clear_front = 0;
;
	lda     #$00
	sta     _tile_clear_front
;
; tile_clear_back = 0;
;
	sta     _tile_clear_back
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ load_level_new (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level_new: near

.segment	"CODE"

;
; player_flags = 0; 
;
	lda     #$00
	sta     _player_flags
;
; scroll_count = 0; 
;
	sta     _scroll_count
;
; nt_max = level_nt_length[level_index];
;
	ldy     _level_index
	lda     _level_nt_length,y
	sta     _nt_max
;
; nt_current = valrigard_starting_nt[level_index];
;
	ldy     _level_index
	lda     _valrigard_starting_nt,y
	sta     _nt_current
;
; high_byte(scroll_y) = nt_current; // The high byte of scroll_y is the nametable we're currently in (0-255).
;
	sta     _scroll_y+1
;
; low_byte(scroll_y) = 2;
;
	lda     #$02
	sta     _scroll_y
;
; high_byte(max_scroll_y) = nt_max - 1; // bottom of this level
;
	lda     _nt_max
	sec
	sbc     #$01
	sta     _max_scroll_y+1
;
; low_byte(max_scroll_y) = 2;
;
	lda     #$02
	sta     _max_scroll_y
;
; high_byte(min_scroll_y) = 0; // Min Scroll
;
	lda     #$00
	sta     _min_scroll_y+1
;
; low_byte(min_scroll_y) = 0x02;
;
	lda     #$02
	sta     _min_scroll_y
;
; initial_scroll = ((nt_current * 0x100) - 0x11);
;
	ldx     _nt_current
	lda     #$00
	sec
	sbc     #$11
	bcs     L10A7
	dex
L10A7:	sta     _initial_scroll
	stx     _initial_scroll+1
;
; temp4 = valrigard_inital_coords[level_index];
;
	ldy     _level_index
	lda     _valrigard_inital_coords,y
	sta     _temp4
;
; high_byte(valrigard.x) = (temp4 & 0xf0);
;
	and     #$F0
	sta     _valrigard+1
;
; high_byte(valrigard.y) = ((temp4 & 0x0f) * 16);
;
	lda     _temp4
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _valrigard+3
;
; set_prg_bank(level_nametable_banks[level_index]);
;
	ldy     _level_index
	lda     _level_nametable_banks,y
	jsr     _set_prg_bank
;
; LZG_decode(level_compressed_nametable_pointers[level_index], cmap);
;
	ldx     #$00
	lda     _level_index
	asl     a
	bcc     L1BBF
	inx
	clc
L1BBF:	adc     #<(_level_compressed_nametable_pointers)
	sta     ptr1
	txa
	adc     #>(_level_compressed_nametable_pointers)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #<(_cmap)
	ldx     #>(_cmap)
	jsr     _LZG_decode
;
; set_data_pointer(cmaps[nt_current]);
;
	ldx     #$00
	lda     _nt_current
	asl     a
	bcc     L1BC0
	inx
	clc
L1BC0:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; temp1 = high_byte(initial_scroll) + 1;
;
	lda     _initial_scroll+1
	clc
	adc     #$01
	sta     _temp1
;
; temp1 = (temp1 & 1) << 1;
;
	and     #$01
	asl     a
	sta     _temp1
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L1BBC:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L1BBB:	sta     _x
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(temp1, x, y);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L1BC3
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L1BBB
;
; if (y == 0xe0) break;
;
L1BC3:	lda     _y
	cmp     #$E0
	beq     L1BC4
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L1BBC
;
; temp1 = temp1 ^ 2; // flip that 0000 0010 bit
;
L1BC4:	lda     _temp1
	eor     #$02
	sta     _temp1
;
; temp0 = nt_current == 0 ? nt_current + 1 : nt_current - 1;
;
	lda     _nt_current
	bne     L1BC5
	clc
	adc     #$01
	jmp     L1BC6
L1BC5:	lda     _nt_current
	sec
	sbc     #$01
L1BC6:	sta     _temp0
;
; set_data_pointer(cmaps[temp0]);
;
	ldx     #$00
	lda     _temp0
	asl     a
	bcc     L1BC1
	inx
	clc
L1BC1:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L1BBD:	sta     _x
;
; y = 0xe0;
;
	lda     #$E0
	sta     _y
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(temp1, x, y);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L10F9
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L1BBD
;
; clear_vram_buffer();
;
L10F9:	jsr     _clear_vram_buffer
;
; memfill(&enemies, 0, sizeof(enemies));
;
	jsr     decsp3
	lda     #<(_enemies)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_enemies)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	ldx     #$01
	lda     #$21
	jsr     _memfill
;
; temppointer = level_enemy_data[level_index];
;
	ldx     #$00
	lda     _level_index
	asl     a
	bcc     L1BC2
	inx
	clc
L1BC2:	adc     #<(_level_enemy_data)
	sta     ptr1
	txa
	adc     #>(_level_enemy_data)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temppointer+1
	dey
	lda     (ptr1),y
	sta     _temppointer
;
; for (x = 0, y = 0; x < MAX_ENEMIES; ++x){
;
	tya
	sta     _x
	sta     _y
L1BC7:	lda     _x
	cmp     #$20
	jcs     L1BCA
;
; enemies.y[x] = 0;
;
	ldy     _x
	lda     #$00
	sta     _enemies+32,y
;
; temp1 = temppointer[y]; // Get a byte of data - the bitpacked coords.
;
	lda     _temppointer
	ldx     _temppointer+1
	ldy     _y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; if (temp1 == 0xff) break; // 0xff terminates the enemy data.
;
	cmp     #$FF
	jeq     L1BCA
;
; enemies.x[x] = temp1 & 0xf0;
;
	lda     #<(_enemies)
	ldx     #>(_enemies)
	clc
	adc     _x
	bcc     L1130
	inx
L1130:	sta     ptr1
	stx     ptr1+1
	lda     _temp1
	and     #$F0
	ldy     #$00
	sta     (ptr1),y
;
; enemies.actual_y[x] = (temp1 & 0x0f) << 4;
;
	lda     #<(_enemies+64)
	ldx     #>(_enemies+64)
	clc
	adc     _x
	bcc     L1134
	inx
L1134:	sta     ptr1
	stx     ptr1+1
	lda     _temp1
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; ++y; // Next byte:
;
	inc     _y
;
; temp1 = temppointer[y]; // the namtetable byte.
;
	lda     _temppointer
	ldx     _temppointer+1
	ldy     _y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemies.nt[x] = temp1;
;
	ldy     _x
	lda     _temp1
	sta     _enemies+96,y
;
; ++y; // Next byte:
;
	inc     _y
;
; temp1 = temppointer[y]; // the type byte.
;
	lda     _temppointer
	ldx     _temppointer+1
	ldy     _y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemies.type[x] = temp1; 
;
	ldy     _x
	lda     _temp1
	sta     _enemies+160,y
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; if (temp1 == 4) { // ENEMY_CANNON
;
	cmp     #$04
	bne     L1BC8
;
; ++x;
;
	inc     _x
;
; enemies.type[x] = ENEMY_CANNONBALL;
;
	ldy     _x
	lda     #$09
	sta     _enemies+160,y
;
; } else if (temp1 == 5) { // ENEMY_ACIDPOOL
;
	jmp     L1BC9
L1BC8:	lda     _temp1
	cmp     #$05
	bne     L1BC9
;
; ++x;
;
	inc     _x
;
; enemies.type[x] = ENEMY_ACIDDROP;
;
	ldy     _x
	lda     #$0A
	sta     _enemies+160,y
;
; enemies.extra[x] = rand8() & 0b01111111;
;
	lda     #<(_enemies+192)
	ldx     #>(_enemies+192)
	clc
	adc     _x
	bcc     L115D
	inx
L115D:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; enemies.extra[x] += 128;
;
	lda     #<(_enemies+192)
	ldx     #>(_enemies+192)
	clc
	adc     _x
	bcc     L1161
	inx
L1161:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$80
	sta     (ptr1),y
;
; ++y; // Next byte.
;
L1BC9:	inc     _y
;
; for (x = 0, y = 0; x < MAX_ENEMIES; ++x){
;
	inc     _x
	jmp     L1BC7
;
; enemies.count = x+1;
;
L1BCA:	lda     _x
	clc
	adc     #$01
	sta     _enemies+288
;
; for(++x; x < MAX_ENEMIES; ++x) {
;
L1BCE:	inc     _x
	lda     _x
	cmp     #$20
	bcs     L1BCB
;
; enemies.type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies+160,y
;
; for(++x; x < MAX_ENEMIES; ++x) {
;
	jmp     L1BCE
;
; for (x = 0; x < enemies.count; ++x) {
;
L1BCB:	lda     #$00
	sta     _x
	tax
L1BCC:	lda     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	bcs     L1173
;
; switch (GET_ENEMY_TYPE(x)) {
;
	ldy     _x
	lda     _enemies+160,y
;
; }
;
	cmp     #$04
	beq     L1187
	cmp     #$05
	bne     L1BCD
;
; enemies.timer[x] = 0b10000000;
;
	ldy     _x
	lda     #$80
	sta     _enemies+256,y
;
; enemies.timer[x] += rand8() & 0b01111111;
;
L1187:	lda     #<(_enemies+256)
	ldx     #>(_enemies+256)
	clc
	adc     _x
	bcc     L118A
	inx
L118A:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$7F
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; for (x = 0; x < enemies.count; ++x) {
;
	ldx     #$00
L1BCD:	inc     _x
	jmp     L1BCC
;
; }
;
L1173:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calculate_shuffle_array (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calculate_shuffle_array: near

.segment	"CODE"

;
; temp0 = 0; // Index in the shuffle array
;
	lda     #$00
	sta     _temp0
;
; for (x = 0; x < enemies.count; ++x) {
;
	sta     _x
	tax
L1BD3:	lda     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	bcs     L1BD4
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; for (x = 0; x < enemies.count; ++x) {
;
	inc     _x
	jmp     L1BD3
;
; for (x = enemies.count - 1; ; --x) {
;
L1BD4:	lda     _enemies+288
	sec
	sbc     #$01
	sta     _x
;
; shuffle_array[temp0] = x;
;
L11A0:	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; if (x == 0) { break; }
;
	lda     _x
	beq     L1BCF
;
; for (x = enemies.count - 1; ; --x) {
;
	dec     _x
	jmp     L11A0
;
; for (x = 0; x < enemies.count; x += 2){
;
L1BCF:	sta     _x
	ldx     #$00
	lda     _x
	cmp     _enemies+288
	bcs     L1BD6
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; for (x = 0; x < enemies.count; x += 2){
;
	lda     #$02
	clc
	adc     _x
	jmp     L1BCF
;
; for (x = 1; x < enemies.count; x += 2){
;
L1BD6:	lda     #$01
L1BD0:	sta     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	bcs     L1BD7
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; for (x = 1; x < enemies.count; x += 2){
;
	lda     #$02
	clc
	adc     _x
	jmp     L1BD0
;
; for (x = enemies.count - 1; ; x -= 2) {
;
L1BD7:	lda     _enemies+288
	sec
	sbc     #$01
L1BD1:	sta     _x
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; if (x < 2) { break; }
;
	lda     _x
	cmp     #$02
	bcc     L1BD8
;
; for (x = enemies.count - 1; ; x -= 2) {
;
	sec
	sbc     #$02
	jmp     L1BD1
;
; for (x = enemies.count - 2; ; x -= 2) {
;
L1BD8:	lda     _enemies+288
L1BDB:	sec
	sbc     #$02
	sta     _x
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; if (x < 2) { break; }
;
	lda     _x
	cmp     #$02
	bcc     L1BD9
;
; for (x = enemies.count - 2; ; x -= 2) {
;
	jmp     L1BDB
;
; shuffle_offset = 0; 
;
L1BD9:	lda     #$00
	sta     _shuffle_offset
;
; shuffle_maximum = 4 * enemies.count; // Set the size of the calculated portion of the shuffle array.
;
	lda     _enemies+288
	asl     a
	asl     a
	sta     _shuffle_maximum
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title_screen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; put_str(NTADR_A(3, 2), title_string);
;
	ldx     #$20
	lda     #$43
	jsr     pushax
	lda     #<(_title_string)
	ldx     #>(_title_string)
	jsr     _put_str
;
; put_str(NTADR_A(3, 4), author_string);
;
	ldx     #$20
	lda     #$83
	jsr     pushax
	lda     #<(_author_string)
	ldx     #>(_author_string)
	jsr     _put_str
;
; put_str(NTADR_A(3, 6), instruction_string);
;
	ldx     #$20
	lda     #$C3
	jsr     pushax
	lda     #<(_instruction_string)
	ldx     #>(_instruction_string)
	jsr     _put_str
;
; put_str(NTADR_A(3, 8), level_names[level_index]);
;
	ldx     #$21
	lda     #$03
	jsr     pushax
	ldx     #$00
	lda     _level_index
	asl     a
	bcc     L1BDD
	inx
	clc
L1BDD:	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _put_str
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ load_game_over_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_game_over_screen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; game_mode = MODE_GAME_OVER;
;
	lda     #$04
	sta     _game_mode
;
; multi_vram_buffer_horz(level_complete_string, sizeof(level_complete_string), NTADR_A(3, 5));
;
	jsr     decsp3
	lda     #<(_level_complete_string)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_level_complete_string)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$A3
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(down_to_restart_string, sizeof(down_to_restart_string), NTADR_A(3, 7));
;
	jsr     decsp3
	lda     #<(_down_to_restart_string)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_down_to_restart_string)
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$E3
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ clear_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_screen: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; set_scroll_y(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_y
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ put_str (unsigned int, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str: near

.segment	"CODE"

;
; void put_str(unsigned int adr, const char *str) {
;
	jsr     pushax
;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; while (*str) {
;
	jmp     L1027
;
; vram_put(*str);
;
L1025:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	jsr     _vram_put
;
; ++str;
;
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
;
; while (*str) {
;
L1027:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	bne     L1025
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; conveyor_delta = 0;
;
	lda     #$00
	sta     _conveyor_delta
;
; old_x = valrigard.x;
;
	lda     _valrigard+1
	sta     _old_x+1
	lda     _valrigard
	sta     _old_x
;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L1BE3
;
; SET_DIRECTION_LEFT();
;
	lda     _player_flags
	and     #$FE
	sta     _player_flags
;
; if (valrigard.x <= 0x0200) { // Changed by 1 from nesdoug's example because Valrigard's hitbox is narrower by 1 pixel on both sides
;
	lda     _valrigard+1
	cmp     #$02
	bne     L13B2
	lda     _valrigard
	cmp     #$01
L13B2:	bcs     L13B0
;
; valrigard.velocity_x = 0;
;
	lda     #$00
	sta     _valrigard+4
	sta     _valrigard+4+1
;
; valrigard.x = 0x200;
;
	ldx     #$02
	sta     _valrigard
	stx     _valrigard+1
;
; } else if (valrigard.x < 0x0600) { // Don't allow us to wrap to the other side
;
	jmp     L13D3
L13B0:	ldx     _valrigard+1
	cpx     #$06
	bcs     L13B8
;
; valrigard.velocity_x = -0x100;
;
	ldx     #$FF
	lda     #$00
;
; } else {
;
	jmp     L1BE5
;
; valrigard.velocity_x = -SPEED;
;
L13B8:	ldx     #$FE
	lda     #$B0
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L1BE5
L1BE3:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L1BE5
;
; SET_DIRECTION_RIGHT();
;
	lda     _player_flags
	ora     #$01
	sta     _player_flags
;
; if (valrigard.x >= 0xf000) {  // Also changed by 1 from nesdoug's example because Valrigard's hitbox is narrower by 1 pixel on both sides
;
	lda     _valrigard
	cmp     #$00
	lda     _valrigard+1
	sbc     #$F0
	bcc     L13C5
;
; valrigard.velocity_x = 0;
;
	txa
	sta     _valrigard+4
	sta     _valrigard+4+1
;
; valrigard.x = 0xf000; // ...and we'd add 0x100 to this constant here (and the 0x200 in the PAD_LEFT block would be a 0x100)
;
	ldx     #$F0
	sta     _valrigard
	stx     _valrigard+1
;
; } else if (valrigard.x > 0xec00) { // Don't allow us to wrap to the other side
;
	jmp     L13D3
L13C5:	lda     _valrigard
	cmp     #$01
	lda     _valrigard+1
	sbc     #$EC
	bcc     L13CC
;
; valrigard.velocity_x = 0x100;
;
	inx
	lda     #$00
;
; } else {
;
	jmp     L1BE5
;
; valrigard.velocity_x = SPEED;
;
L13CC:	inx
	lda     #$50
;
; valrigard.velocity_x = 0;
;
L1BE5:	sta     _valrigard+4
	stx     _valrigard+4+1
;
; valrigard.x += valrigard.velocity_x;
;
L13D3:	lda     _valrigard+4
	clc
	adc     _valrigard
	sta     _valrigard
	lda     _valrigard+4+1
	adc     _valrigard+1
	sta     _valrigard+1
;
; if((high_byte(valrigard.x) < 0x01)||(high_byte(valrigard.x) > 0xf8)) { // make sure no wrap around to the other side
;
	lda     _valrigard+1
	beq     L1BE6
	cmp     #$F9
	bcc     L1BE7
;
; valrigard.x = 0x100;
;
L1BE6:	ldx     #$01
	lda     #$00
	sta     _valrigard
	stx     _valrigard+1
;
; L_R_switch = 1; // Shrinks the Y values in bg_coll. This makes head/foot collisions less problematic (examine this)
;
L1BE7:	lda     #$01
	sta     _L_R_switch
;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; hitbox.width = VALRIGARD_WIDTH;
;
	lda     #$0B
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_HEIGHT;
;
	lda     #$0D
	sta     _hitbox+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if (collision_L && collision_R) { // Half-stuck in a wall, I'm guessing?
;
	lda     _collision_L
	beq     L13EE
	lda     _collision_R
	beq     L13EE
;
; valrigard.x = old_x;
;
	lda     _old_x+1
	sta     _valrigard+1
	lda     _old_x
	sta     _valrigard
;
; else if (collision_L) {
;
	jmp     L13FB
L13EE:	lda     _collision_L
	beq     L13F5
;
; high_byte(valrigard.x) -= eject_L;
;
	lda     _eject_L
;
; else if (collision_R) {
;
	jmp     L1BF7
L13F5:	lda     _collision_R
	beq     L13FB
;
; high_byte(valrigard.x) -= eject_R;
;
	lda     _eject_R
L1BF7:	eor     #$FF
	sec
	adc     _valrigard+1
	sta     _valrigard+1
;
; old_y = valrigard.y;
;
L13FB:	lda     _valrigard+2+1
	sta     _old_y+1
	lda     _valrigard+2
	sta     _old_y
;
; if (pad1 & PAD_UP && energy > 0) { // If we're holding up on the DPad...
;
	lda     _pad1
	and     #$08
	beq     L1402
	lda     _energy
	beq     L1402
;
; if (collision_D) { // If grounded...
;
	lda     _collision_D
;
; } else {
;
	bne     L1BF8
;
; valrigard.velocity_y -= GRAVITY;
;
	lda     _valrigard+6
	sec
	sbc     #$30
	sta     _valrigard+6
	bcs     L140D
	dec     _valrigard+6+1
;
; if (valrigard.velocity_y < -SPEED) valrigard.velocity_y = -SPEED;
;
L140D:	lda     _valrigard+6
	cmp     #$B0
	lda     _valrigard+6+1
	sbc     #$FE
	bvc     L1410
	eor     #$80
L1410:	bpl     L1BEB
L1BF8:	ldx     #$FE
	lda     #$B0
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; energy -= 1;
;
L1BEB:	dec     _energy
;
; } else {
;
	jmp     L1419
;
; valrigard.velocity_y += GRAVITY;
;
L1402:	lda     #$30
	clc
	adc     _valrigard+6
	sta     _valrigard+6
	bcc     L1418
	inc     _valrigard+6+1
;
; if (valrigard.velocity_y > MAX_FALL) valrigard.velocity_y = MAX_FALL;
;
L1418:	lda     _valrigard+6
	cmp     #$51
	lda     _valrigard+6+1
	sbc     #$01
	bvs     L141B
	eor     #$80
L141B:	bpl     L1419
	ldx     #$01
	lda     #$50
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; valrigard.y += valrigard.velocity_y;
;
L1419:	lda     _valrigard+6
	clc
	adc     _valrigard+2
	sta     _valrigard+2
	lda     _valrigard+6+1
	adc     _valrigard+2+1
	sta     _valrigard+2+1
;
; if (high_byte(valrigard.y) < 0x01) { valrigard.y = 0x100; }
;
	lda     _valrigard+3
	bne     L1BEC
	ldx     #$01
;
; else if (high_byte(valrigard.y) > 0xf0) { valrigard.y = 0xf000; }
;
	jmp     L1BF3
L1BEC:	lda     _valrigard+3
	cmp     #$F1
	lda     #$00
	bcc     L1BEE
	ldx     #$F0
L1BF3:	sta     _valrigard+2
	stx     _valrigard+2+1
;
; L_R_switch = 0;
;
L1BEE:	sta     _L_R_switch
;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U) {
;
	lda     _collision_U
	beq     L1434
;
; high_byte(valrigard.y) -= eject_U;
;
	lda     _eject_U
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; else if (collision_D) {
;
	jmp     L1444
L1434:	lda     _collision_D
	beq     L1444
;
; high_byte(valrigard.y) -= eject_D;
;
	lda     _eject_D
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; valrigard.x += conveyor_delta;
;
	ldx     #$00
	lda     _conveyor_delta
	bpl     L1441
	dex
L1441:	clc
	adc     _valrigard
	sta     _valrigard
	txa
	adc     _valrigard+1
	sta     _valrigard+1
;
; energy += 4;
;
	lda     #$04
	clc
	adc     _energy
	sta     _energy
;
; if (energy > MAX_ENERGY) energy = MAX_ENERGY;
;
	cmp     #$71
	bcc     L1444
	lda     #$70
	sta     _energy
;
; temp5 = valrigard.y;
;
L1444:	lda     _valrigard+2+1
	sta     _temp5+1
	lda     _valrigard+2
	sta     _temp5
;
; if (valrigard.y < MAX_UP && scroll_y > min_scroll_y) {
;
	ldx     _valrigard+2+1
	cpx     #$40
	bcs     L144A
	lda     _scroll_y
	sec
	sbc     _min_scroll_y
	sta     tmp1
	lda     _scroll_y+1
	sbc     _min_scroll_y+1
	ora     tmp1
	beq     L144A
	bcc     L144A
;
; temp1 = (MAX_UP - valrigard.y + 0x80) >> 8; // "the numbers work better with +80 (like 0.5)". I'll take his word for it.
;
	lda     #$00
	sec
	sbc     _valrigard+2
	pha
	lda     #$40
	sbc     _valrigard+2+1
	tax
	pla
	clc
	adc     #$80
	bcc     L1451
	inx
L1451:	txa
	sta     _temp1
;
; scroll_y = sub_scroll_y(temp1, scroll_y);
;
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; high_byte(valrigard.y) += temp1;
;
	lda     _temp1
	clc
;
; else if (valrigard.y > MIN_DOWN && scroll_y < max_scroll_y) {
;
	jmp     L1BF4
L144A:	lda     _valrigard+2
	cmp     #$01
	lda     _valrigard+2+1
	sbc     #$80
	bcc     L1BF0
	lda     _scroll_y
	cmp     _max_scroll_y
	lda     _scroll_y+1
	sbc     _max_scroll_y+1
	bcc     L145B
L1BF0:	rts
;
; temp1 = (MIN_DOWN + valrigard.y + 0x80) >> 8;
;
L145B:	lda     _valrigard+2
	pha
	lda     _valrigard+2+1
	clc
	adc     #$80
	tax
	pla
	clc
	adc     #$80
	bcc     L1461
	inx
L1461:	txa
	sta     _temp1
;
; scroll_y = add_scroll_y(temp1, scroll_y);
;
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; high_byte(valrigard.y) -= temp1;
;
	lda     _temp1
	eor     #$FF
	sec
L1BF4:	adc     _valrigard+3
	sta     _valrigard+3
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ swing_sword (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_swing_sword: near

.segment	"CODE"

;
; if ((pad1 & PAD_A) && !player_sword_timer && !(pad1 & PAD_UP)) {
;
	lda     _pad1
	and     #$80
	beq     L146A
	lda     _player_sword_timer
	bne     L146A
	lda     _pad1
	and     #$08
	bne     L146A
;
; player_sword_timer = 37;
;
	lda     #$25
	sta     _player_sword_timer
;
; player_frame_timer = 14;
;
	lda     #$0E
	sta     _player_frame_timer
;
; SET_STATUS_SWINGING_SWORD();
;
	lda     _player_flags
	ora     #$04
	sta     _player_flags
;
; if (player_sword_timer) { 
;
L146A:	lda     _player_sword_timer
	beq     L1BFC
;
; --player_sword_timer;
;
	dec     _player_sword_timer
;
; } else {
;
	rts
;
; SET_STATUS_NOT_SWINGING_SWORD();
;
L1BFC:	lda     _player_flags
	and     #$FB
	sta     _player_flags
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; temp3 = hitbox.y;
;
	lda     _hitbox+1
	sta     _temp3
;
; if(temp3 >= 0xf0) return; // This line will probably only really be relevant if there's no floor.
;
	cmp     #$F0
	bcc     L1BFE
;
; }
;
	rts
;
; temp6 = add_scroll_y(temp3, scroll_y);
;
L1BFE:	lda     _temp3
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; nt_current = high_byte(temp6);
;
	lda     _temp6+1
	sta     _nt_current
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
	lda     _temp3
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp3 = low_byte(temp5); // low byte y
;
	lda     _temp5
	sta     _temp3
;
; temp1 = hitbox.x; // x left
;
	lda     _hitbox
	sta     _temp1
;
; eject_L = temp1 | 0xf0;
;
	ora     #$F0
	sta     _eject_L
;
; eject_U = temp3 | 0xf0;
;
	lda     _temp3
	ora     #$F0
	sta     _eject_U
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L14A0
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp1 += hitbox.width; // x right
;
L14A0:	lda     _hitbox+2
	clc
	adc     _temp1
	sta     _temp1
;
; eject_R = (temp1 + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L14AB
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp6 = add_scroll_y(VALRIGARD_HEIGHT, temp6);
;
L14AB:	lda     #$0D
	jsr     pusha
	lda     _temp6
	ldx     _temp6+1
	jsr     _add_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; nt_current = high_byte(temp6);
;
	lda     _temp6+1
	sta     _nt_current
;
; temp3 = hitbox.y + hitbox.height; // y bottom
;
	lda     _hitbox+1
	clc
	adc     _hitbox+3
	sta     _temp3
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp3 = low_byte(temp5); // low byte y
;
	lda     _temp5
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3
	cmp     #$F0
	bcs     L14CD
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L14C6
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp1 = hitbox.x; // x left
;
L14C6:	lda     _hitbox
	sta     _temp1
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L14CD
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L14CD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = high_byte(temp5);
;
	lda     _temp5+1
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temp_mutablepointer, cmaps, temp0);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temp_mutablepointer
	lda     _cmaps+1,y
	sta     _temp_mutablepointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(temp4, temp_mutablepointer, coordinates);
;
	ldy     _coordinates
	lda     (_temp_mutablepointer),y
	sta     _temp4
;
; temp0 = metatile_property_lookup_table[temp4];
;
	ldy     _temp4
	lda     _metatile_property_lookup_table,y
	sta     _temp0
;
; collision = METATILE_IS_SOLID(temp4);
;
	ldy     _temp4
	lda     _metatile_property_lookup_table,y
	and     #$01
	sta     _collision
;
; if (temp0 == METATILE_NO_EFFECT || temp0 == METATILE_SOLID) { return; }
;
	lda     _temp0
	beq     L1C04
	cmp     #$01
	bne     L1C05
L1C04:	rts
;
; if (temp0 & METATILE_SPIKES) {
;
L1C05:	lda     _temp0
	and     #$02
	beq     L1C06
;
; SET_STATUS_DEAD();
;
	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; } else if (temp0 & METATILE_POWERUP) {
;
	rts
L1C06:	lda     _temp0
	and     #$40
	jeq     L1C09
;
; temp_mutablepointer[coordinates] = EMPTY_TILE;
;
	lda     _temp_mutablepointer
	ldx     _temp_mutablepointer+1
	clc
	adc     _coordinates
	bcc     L1BFF
	inx
L1BFF:	sta     ptr1
	stx     ptr1+1
	lda     #$2C
	ldy     #$00
	sta     (ptr1),y
;
; if (temp4 == STAR_TILE) { score += 1; }
;
	lda     _temp4
	cmp     #$2A
	bne     L1C07
	inc     _score
	bne     L1C08
	inc     _score+1
;
; else if (temp4 == ENERGY_REFILL_TILE) { energy = MAX_ENERGY; }
;
	jmp     L1C08
L1C07:	lda     _temp4
	cmp     #$2B
	bne     L1C08
	lda     #$70
	sta     _energy
;
; nt = (nt_current & 1) << 1;
;
L1C08:	lda     _nt_current
	and     #$01
	asl     a
	sta     _nt
;
; address = get_ppu_addr(nt, temp1, temp3 & 0xf0);
;
	jsr     decsp2
	lda     _nt
	iny
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     _temp3
	and     #$F0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; tile_clear_queue[tile_clear_back] = address;
;
	ldx     #$00
	lda     _tile_clear_back
	asl     a
	bcc     L1C02
	inx
	clc
L1C02:	adc     #<(_tile_clear_queue)
	sta     ptr1
	txa
	adc     #>(_tile_clear_queue)
	sta     ptr1+1
	lda     _address
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     _address+1
	sta     (ptr1),y
;
; ++tile_clear_back;
;
	inc     _tile_clear_back
;
; tile_clear_back &= 0b111; // Clamp to <8
;
	lda     _tile_clear_back
	and     #$07
	sta     _tile_clear_back
;
; debug_tile_x = nt_current;
;
	lda     _nt_current
	sta     _debug_tile_x
;
; debug_tile_y = coordinates;
;
	lda     _coordinates
	sta     _debug_tile_y
;
; } else if (temp0 & METATILE_CONVEYOR_LEFT) {
;
	rts
L1C09:	lda     _temp0
	and     #$04
	beq     L1C0A
;
; conveyor_delta = LEFT_CONVEYOR_DELTA;
;
	lda     #$81
	sta     _conveyor_delta
;
; } else if (temp0 & METATILE_CONVEYOR_RIGHT) {
;
	rts
L1C0A:	lda     _temp0
	and     #$08
	beq     L1C0B
;
; conveyor_delta = RIGHT_CONVEYOR_DELTA;
;
	lda     #$7F
	sta     _conveyor_delta
;
; } else if (temp0 & METATILE_YELLOW_DOOR) {
;
	rts
L1C0B:	lda     _temp0
	and     #$10
	beq     L1C0C
;
; if (pad1 & PAD_UP) {
;
	lda     _pad1
	and     #$08
;
; } else if (temp0 & METATILE_RED_DOOR) {
;
	jmp     L1C0F
L1C0C:	lda     _temp0
	and     #$20
L1C0F:	beq     L1532
;
; game_mode = MODE_GAME_OVER;
;
	lda     #$04
	sta     _game_mode
;
; }
;
L1532:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; nt_current = high_byte(scroll_y);
;
	lda     _scroll_y+1
	sta     _nt_current
;
; for (x = 0; x < enemies.count; ++x) {
;
	lda     #$00
	sta     _x
L1C14:	lda     _x
	cmp     _enemies+288
	bcc     L1C19
;
; }
;
	rts
;
; if (GET_ENEMY_TYPE(x)) {
;
L1C19:	ldy     _x
	lda     _enemies+160,y
	jeq     L1C15
;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp5
;
; temp5 -= scroll_y;
;
	lda     _scroll_y
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_y+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; if (high_byte(temp5)) {
;
	lda     _temp5+1
	beq     L159D
;
; DEACTIVATE_ENEMY(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L15A3
	inx
L15A3:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; continue;
;
	jmp     L1C18
;
; ACTIVATE_ENEMY(x); // This enemy is active if it's on-screen.
;
L159D:	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L15A8
	inx
L15A8:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
;
; enemies.y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+32,y
;
; if (nt_current != enemies.nt[x]) { 
;
	ldy     _x
	lda     _enemies+96,y
	cmp     _nt_current
	beq     L1C15
;
; temp0 = enemies.y[x] - 16;
;
	ldy     _x
	lda     _enemies+32,y
	sec
	sbc     #$10
	sta     _temp0
;
; enemies.y[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies+32,y
;
; ++x;
;
L1C15:	inc     _x
;
; if (GET_ENEMY_TYPE(x)) {
;
	ldy     _x
	lda     _enemies+160,y
	jeq     L1C16
;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp5
;
; temp5 -= scroll_y;
;
	lda     _scroll_y
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_y+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; if (high_byte(temp5)) {
;
	lda     _temp5+1
	beq     L15CE
;
; DEACTIVATE_ENEMY(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L15D4
	inx
L15D4:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; continue;
;
	jmp     L1C18
;
; ACTIVATE_ENEMY(x);
;
L15CE:	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L15D9
	inx
L15D9:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
;
; enemies.y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+32,y
;
; if (nt_current != enemies.nt[x]) { 
;
	ldy     _x
	lda     _enemies+96,y
	cmp     _nt_current
	beq     L1C16
;
; temp0 = enemies.y[x] - 16;
;
	ldy     _x
	lda     _enemies+32,y
	sec
	sbc     #$10
	sta     _temp0
;
; enemies.y[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies+32,y
;
; ++x;
;
L1C16:	inc     _x
;
; if (GET_ENEMY_TYPE(x)) {
;
	ldy     _x
	lda     _enemies+160,y
	jeq     L1C17
;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp5
;
; temp5 -= scroll_y;
;
	lda     _scroll_y
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_y+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; if (high_byte(temp5)) {
;
	lda     _temp5+1
	beq     L15FF
;
; DEACTIVATE_ENEMY(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L1605
	inx
L1605:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; continue;
;
	jmp     L1C18
;
; ACTIVATE_ENEMY(x);
;
L15FF:	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L160A
	inx
L160A:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
;
; enemies.y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+32,y
;
; if (nt_current != enemies.nt[x]) { 
;
	ldy     _x
	lda     _enemies+96,y
	cmp     _nt_current
	beq     L1C17
;
; temp0 = enemies.y[x] - 16;
;
	ldy     _x
	lda     _enemies+32,y
	sec
	sbc     #$10
	sta     _temp0
;
; enemies.y[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies+32,y
;
; ++x;
;
L1C17:	inc     _x
;
; if (GET_ENEMY_TYPE(x)) {
;
	ldy     _x
	lda     _enemies+160,y
	jeq     L1C18
;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp5
;
; temp5 -= scroll_y;
;
	lda     _scroll_y
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_y+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; if (high_byte(temp5)) {
;
	lda     _temp5+1
	beq     L1630
;
; DEACTIVATE_ENEMY(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L1636
	inx
L1636:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; continue;
;
	jmp     L1C18
;
; ACTIVATE_ENEMY(x);
;
L1630:	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L163B
	inx
L163B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
;
; enemies.y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+32,y
;
; if (nt_current != enemies.nt[x]) { 
;
	ldy     _x
	lda     _enemies+96,y
	cmp     _nt_current
	beq     L1C18
;
; temp0 = enemies.y[x] - 16;
;
	ldy     _x
	lda     _enemies+32,y
	sec
	sbc     #$10
	sta     _temp0
;
; enemies.y[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies+32,y
;
; for (x = 0; x < enemies.count; ++x) {
;
L1C18:	inc     _x
	jmp     L1C14

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collisions: near

.segment	"CODE"

;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; if (IS_SWINGING_SWORD) {
;
	lda     _player_flags
	and     #$04
	beq     L1C1B
;
; hitbox.width = VALRIGARD_SWINGING_WIDTH;
;
	lda     #$0F
	sta     _hitbox+2
;
; } else {
;
	jmp     L1C1A
;
; hitbox.width = VALRIGARD_WIDTH;
;
L1C1B:	lda     #$0B
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_HEIGHT;    
;
	lda     #$0D
L1C1A:	sta     _hitbox+3
;
; for (x = 0; x < enemies.count; ++x) {
;
	lda     #$00
	sta     _x
	tax
L1C1C:	lda     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	bcc     L1C21
;
; }
;
	rts
;
; if(IS_ENEMY_ACTIVE(x)) {
;
L1C21:	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L1C1D
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; hitbox2.width = enemy_hitbox_width_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_width_lookup_table,y
	sta     _hitbox2+2
;
; if (!hitbox2.width) { continue; } // Continue if width of the hitbox is 0.
;
	lda     _hitbox2+2
	jeq     L1C20
;
; hitbox2.height = enemy_hitbox_height_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_height_lookup_table,y
	sta     _hitbox2+3
;
; hitbox2.x = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _hitbox2
;
; hitbox2.y = enemies.y[x];
;
	ldy     _x
	lda     _enemies+32,y
	sta     _hitbox2+1
;
; if (check_collision(&hitbox, &hitbox2)) {
;
	lda     #<(_hitbox)
	ldx     #>(_hitbox)
	jsr     pushax
	lda     #<(_hitbox2)
	ldx     #>(_hitbox2)
	jsr     _check_collision
	tax
	beq     L1C1D
;
; AsmCallFunctionAtPtrOffsetByIndexVar(collision_functions, temp1);
;
	lda     _temp1
	asl     a
	tay
	lda     _collision_functions,y
	ldx     _collision_functions+1,y
	jsr     callax
;
; ++x;
;
L1C1D:	inc     _x
;
; if(IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L1C1E
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; hitbox2.width = enemy_hitbox_width_lookup_table[temp1];
;
	ldy     _temp1
	ldx     #$00
	lda     _enemy_hitbox_width_lookup_table,y
	sta     _hitbox2+2
;
; if (!hitbox2.width) { continue; } // Continue if width of the hitbox is 0.
;
	lda     _hitbox2+2
	jeq     L1C20
;
; hitbox2.height = enemy_hitbox_height_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_height_lookup_table,y
	sta     _hitbox2+3
;
; hitbox2.x = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _hitbox2
;
; hitbox2.y = enemies.y[x];
;
	ldy     _x
	lda     _enemies+32,y
	sta     _hitbox2+1
;
; if (check_collision(&hitbox, &hitbox2)) {
;
	lda     #<(_hitbox)
	ldx     #>(_hitbox)
	jsr     pushax
	lda     #<(_hitbox2)
	ldx     #>(_hitbox2)
	jsr     _check_collision
	tax
	beq     L1C1E
;
; AsmCallFunctionAtPtrOffsetByIndexVar(collision_functions, temp1);
;
	lda     _temp1
	asl     a
	tay
	lda     _collision_functions,y
	ldx     _collision_functions+1,y
	jsr     callax
;
; ++x;
;
L1C1E:	inc     _x
;
; if(IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L1C1F
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; hitbox2.width = enemy_hitbox_width_lookup_table[temp1];
;
	ldy     _temp1
	ldx     #$00
	lda     _enemy_hitbox_width_lookup_table,y
	sta     _hitbox2+2
;
; if (!hitbox2.width) { continue; } // Continue if width of the hitbox is 0.
;
	lda     _hitbox2+2
	jeq     L1C20
;
; hitbox2.height = enemy_hitbox_height_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_height_lookup_table,y
	sta     _hitbox2+3
;
; hitbox2.x = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _hitbox2
;
; hitbox2.y = enemies.y[x];
;
	ldy     _x
	lda     _enemies+32,y
	sta     _hitbox2+1
;
; if (check_collision(&hitbox, &hitbox2)) {
;
	lda     #<(_hitbox)
	ldx     #>(_hitbox)
	jsr     pushax
	lda     #<(_hitbox2)
	ldx     #>(_hitbox2)
	jsr     _check_collision
	tax
	beq     L1C1F
;
; AsmCallFunctionAtPtrOffsetByIndexVar(collision_functions, temp1);
;
	lda     _temp1
	asl     a
	tay
	lda     _collision_functions,y
	ldx     _collision_functions+1,y
	jsr     callax
;
; ++x;
;
L1C1F:	inc     _x
;
; if(IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	ldx     #$00
	and     #$80
	beq     L1C20
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; hitbox2.width = enemy_hitbox_width_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_width_lookup_table,y
	sta     _hitbox2+2
;
; if (!hitbox2.width) { continue; } // Continue if width of the hitbox is 0.
;
	lda     _hitbox2+2
	beq     L1C20
;
; hitbox2.height = enemy_hitbox_height_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_height_lookup_table,y
	sta     _hitbox2+3
;
; hitbox2.x = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _hitbox2
;
; hitbox2.y = enemies.y[x];
;
	ldy     _x
	lda     _enemies+32,y
	sta     _hitbox2+1
;
; if (check_collision(&hitbox, &hitbox2)) {
;
	lda     #<(_hitbox)
	ldx     #>(_hitbox)
	jsr     pushax
	lda     #<(_hitbox2)
	ldx     #>(_hitbox2)
	jsr     _check_collision
	tax
	beq     L1C20
;
; AsmCallFunctionAtPtrOffsetByIndexVar(collision_functions, temp1);
;
	lda     _temp1
	asl     a
	tay
	lda     _collision_functions,y
	ldx     _collision_functions+1,y
	jsr     callax
;
; for (x = 0; x < enemies.count; ++x) {
;
	ldx     #$00
L1C20:	inc     _x
	jmp     L1C1C

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_inert (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_inert: near

.segment	"CODE"

;
; void collision_with_inert(void) { }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_killable_slashable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_killable_slashable: near

.segment	"CODE"

;
; if (!IS_SWINGING_SWORD) { 
;
	lda     _player_flags
	and     #$04
	bne     L1744
;
; SET_STATUS_DEAD();
;
	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; else {
;
	rts
;
; enemies.type[x] = ENEMY_PURPLE_DEATH_EFFECT;
;
L1744:	ldy     _x
	lda     #$0B
	sta     _enemies+160,y
;
; enemies.timer[x] = 12;
;
	ldy     _x
	lda     #$0C
	sta     _enemies+256,y
;
; score += 1; // Add to the score 
;
	inc     _score
	bne     L1755
	inc     _score+1
;
; }
;
L1755:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_inert_slashable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_inert_slashable: near

.segment	"CODE"

;
; if (IS_SWINGING_SWORD && !SLASHABLE_UNKILLABLE_IS_SLASHED(x)) { 
;
	lda     _player_flags
	and     #$04
	beq     L1C23
	ldy     _x
	lda     _enemies+128,y
	and     #$20
	beq     L1C24
L1C23:	rts
;
; SLASHABLE_UNKILLABLE_SET_SLASHED(x);
;
L1C24:	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L1762
	inx
L1762:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; score += 1;
;
	inc     _score
	bne     L1766
	inc     _score+1
;
; }
;
L1766:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_unkillable_unslashable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_unkillable_unslashable: near

.segment	"CODE"

;
; SET_STATUS_DEAD();
;
	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_splyke (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_splyke: near

.segment	"CODE"

;
; if (!IS_SWINGING_SWORD) { // Not swinging the sword?
;
	lda     _player_flags
	and     #$04
	bne     L176C
;
; SET_STATUS_DEAD();
;
	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; } else if (!SPLYKE_IS_MOVING_AROUND(x)){ // Not tornado:
;
	rts
L176C:	ldy     _x
	lda     _enemies+128,y
	and     #$20
	bne     L1773
;
; enemies.type[x] = ENEMY_SPLYKE_DEATH_EFFECT;
;
	ldy     _x
	lda     #$0C
	sta     _enemies+160,y
;
; enemies.timer[x] = 12;
;
	ldy     _x
	sta     _enemies+256,y
;
; score += 1;
;
	inc     _score
	bne     L1773
	inc     _score+1
;
; }
;
L1773:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_boss (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_boss: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_movement: near

.segment	"CODE"

;
; for (x = 0; x < enemies.count; ++x) {
;
	lda     #$00
	sta     _x
L1C25:	lda     _x
	cmp     _enemies+288
	bcc     L1C2A
;
; }
;
	rts
;
; if (IS_ENEMY_ACTIVE(x)) {
;
L1C2A:	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L1C26
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L1C26:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L1C27
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L1C27:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L1C28
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L1C28:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L1C29
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; for (x = 0; x < enemies.count; ++x) {
;
L1C29:	inc     _x
	jmp     L1C25

.endproc

; ---------------------------------------------------------------
; void __near__ korbat_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_korbat_ai: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies+128,y
	and     #$01
	sta     _temp3
;
; temp1 = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp1
;
; temp1 += leftright_movement_offset_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_offset_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp2 = enemies.actual_y[x] + 6; // center y
;
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$06
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp0);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L1824
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L182C
	inx
L182C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp1 = leftright_movement_moving_lookup_table[temp3];
;
L1824:	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	sta     _temp1
;
; temp0 = enemies.x[x] + temp1;
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     _temp1
	sta     _temp0
;
; enemies.x[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spikeball_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spikeball_ai: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies+128,y
	and     #$01
	sta     _temp3
;
; temp1 = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp1
;
; temp1 += leftright_movement_offset_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_offset_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp2 = enemies.actual_y[x] + 18; // Y beneath us
;
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$12
	sta     _temp2
;
; if (temp2 >= 0xf0) {
;
	cmp     #$F0
	bcc     L184F
;
; temp4 = enemies.nt[x] + 1;
;
	ldy     _x
	lda     _enemies+96,y
	clc
	adc     #$01
	sta     _temp4
;
; temp2 = 0;
;
	lda     #$00
	sta     _temp2
;
; } else {
;
	jmp     L1C2E
;
; temp4 = enemies.nt[x];
;
L184F:	ldy     _x
	lda     _enemies+96,y
	sta     _temp4
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
L1C2E:	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (!METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	bne     L1875
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L187D
	inx
L187D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp2 = enemies.actual_y[x] + 6; // center y
;
L1875:	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$06
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp4 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L18A2
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L18AA
	inx
L18AA:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp1 = leftright_movement_moving_lookup_table[temp3];
;
L18A2:	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	sta     _temp1
;
; temp0 = enemies.x[x] + temp1;
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     _temp1
	sta     _temp0
;
; enemies.x[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cannon_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cannon_ai: near

.segment	"CODE"

;
; if (IS_ENEMY_ACTIVE(x+1)) { return; }
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1966
	inx
L1966:	sta     ptr1
	txa
	clc
	adc     #>(_enemies+128)
	sta     ptr1+1
	ldy     #<(_enemies+128)
	lda     (ptr1),y
	and     #$80
	beq     L1C42
;
; }
;
	rts
;
; if (--enemies.timer[x] == 20) { 
;
L1C42:	lda     #<(_enemies+256)
	ldx     #>(_enemies+256)
	clc
	adc     _x
	bcc     L196A
	inx
L196A:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
	cmp     #$14
	jne     L1967
;
; if (!(enemies.extra2[x] & 0xf0)) {
;
	ldy     _x
	lda     _enemies+224,y
	and     #$F0
	jne     L1967
;
; temp0 = high_byte(valrigard.x) + (VALRIGARD_WIDTH/2);
;
	lda     _valrigard+1
	clc
	adc     #$05
	sta     _temp0
;
; temp1 = high_byte(valrigard.y) + 4; // Tweaked for maximum accuracy - may need to be tweaked more.
;
	lda     _valrigard+3
	clc
	adc     #$04
	sta     _temp1
;
; temp2 = enemies.x[x] + 6; // ENEMY_WIDTH/2
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$06
	sta     _temp2
;
; temp3 = enemies.y[x] + 6; // ENEMY_HEIGHT/2
;
	ldy     _x
	lda     _enemies+32,y
	clc
	adc     #$06
	sta     _temp3
;
; temp4 = 0;
;
	lda     #$00
	sta     _temp4
;
; if (temp0 < temp2) {
;
	tax
	lda     _temp0
	cmp     _temp2
	bcs     L1C3D
;
; CANNONBALL_SET_NEG_X(x+1);
;
	lda     _x
	clc
	adc     #$01
	bcc     L1C34
	inx
	clc
L1C34:	adc     #<(_enemies+128)
	sta     ptr1
	txa
	adc     #>(_enemies+128)
	sta     ptr1+1
	ldy     #$00
	ldx     #$00
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; } else {
;
	jmp     L1C3E
;
; CANNONBALL_SET_POS_X(x+1);
;
L1C3D:	lda     _x
	clc
	adc     #$01
	bcc     L1C35
	inx
	clc
L1C35:	adc     #<(_enemies+128)
	sta     ptr1
	txa
	adc     #>(_enemies+128)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; ++temp4;
;
	inc     _temp4
;
; if (temp1 < temp3) {
;
	ldx     #$00
L1C3E:	lda     _temp1
	cmp     _temp3
	bcs     L1C3F
;
; CANNONBALL_SET_NEG_Y(x+1);
;
	lda     _x
	clc
	adc     #$01
	bcc     L1C36
	inx
	clc
L1C36:	adc     #<(_enemies+128)
	sta     ptr1
	txa
	adc     #>(_enemies+128)
	sta     ptr1+1
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; } else {
;
	jmp     L199A
;
; CANNONBALL_SET_POS_Y(x+1);
;
L1C3F:	lda     _x
	clc
	adc     #$01
	bcc     L1C37
	inx
	clc
L1C37:	adc     #<(_enemies+128)
	sta     ptr1
	txa
	adc     #>(_enemies+128)
	sta     ptr1+1
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; temp4 += 0b10;
;
	lda     #$02
	clc
	adc     _temp4
	sta     _temp4
;
; temp0 = abs_subtract(temp0, temp2);
;
L199A:	lda     _temp0
	jsr     pusha
	lda     _temp2
	jsr     _abs_subtract
	sta     _temp0
;
; if ((temp0 & 0x0f) > 8) { temp0 += 0x10; } // Round metatile x up.
;
	and     #$0F
	cmp     #$09
	bcc     L19A6
	lda     #$10
	clc
	adc     _temp0
	sta     _temp0
;
; temp1 = abs_subtract(temp1, temp3);
;
L19A6:	lda     _temp1
	jsr     pusha
	lda     _temp3
	jsr     _abs_subtract
	sta     _temp1
;
; coordinates = (temp1 & 0xf0) + (temp0 >> 4);
;
	and     #$F0
	sta     ptr1
	lda     _temp0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _coordinates
;
; temp2 = brads_lookup(coordinates);
;
	jsr     _brads_lookup
	sta     _temp2
;
; enemies.extra[x] = temp2;
;
	ldy     _x
	lda     _temp2
	sta     _enemies+192,y
;
; temppointer = cannon_sprite_quadrant_lookup_table[temp4];
;
	ldx     #$00
	lda     _temp4
	asl     a
	bcc     L1C38
	inx
	clc
L1C38:	adc     #<(_cannon_sprite_quadrant_lookup_table)
	sta     ptr1
	txa
	adc     #>(_cannon_sprite_quadrant_lookup_table)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temppointer+1
	dey
	lda     (ptr1),y
	sta     _temppointer
;
; if (temp2 > 0x30) { // over 0x30 brads
;
	lda     _temp2
	cmp     #$31
	bcc     L1C40
;
; temp3 = temppointer[2]; // y-axis aligned
;
	lda     _temppointer+1
	sta     ptr1+1
	lda     _temppointer
	sta     ptr1
	ldy     #$02
;
; } else if (temp2 > 0x10) { // over 0x10 brads
;
	jmp     L1C41
L1C40:	lda     _temp2
	cmp     #$11
	bcc     L19C3
;
; temp3 = temppointer[1]; // diagonal
;
	lda     _temppointer+1
	sta     ptr1+1
	lda     _temppointer
	sta     ptr1
	iny
;
; } else { // 0x10 or fewer brads
;
	jmp     L1C41
;
; temp3 = temppointer[0]; // x-axis aligned
;
L19C3:	lda     _temppointer+1
	sta     ptr1+1
	lda     _temppointer
	sta     ptr1
L1C41:	lda     (ptr1),y
	sta     _temp3
;
; enemies.extra2[x] = temp3;
;
	ldy     _x
	lda     _temp3
	sta     _enemies+224,y
;
; if (enemies.timer[x] == 0) {
;
L1967:	ldy     _x
	lda     _enemies+256,y
	beq     L1C43
;
; }
;
	rts
;
; enemies.timer[x] = 120;
;
L1C43:	ldy     _x
	lda     #$78
	sta     _enemies+256,y
;
; temp0 = enemies.x[x] + 3;
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$03
	sta     _temp0
;
; temp1 = enemies.actual_y[x] + 3;
;
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$03
	sta     _temp1
;
; temp2 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp2
;
; enemies.x[x+1] = temp0;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1C39
	inx
	clc
L1C39:	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     _temp0
	ldy     #$00
	sta     (ptr1),y
;
; enemies.actual_y[x+1] = temp1;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1C3A
	inx
	clc
L1C3A:	adc     #<(_enemies+64)
	sta     ptr1
	txa
	adc     #>(_enemies+64)
	sta     ptr1+1
	lda     _temp1
	sta     (ptr1),y
;
; enemies.nt[x+1] = temp2;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1C3B
	inx
	clc
L1C3B:	adc     #<(_enemies+96)
	sta     ptr1
	txa
	adc     #>(_enemies+96)
	sta     ptr1+1
	lda     _temp2
	sta     (ptr1),y
;
; enemies.type[x+1] = ENEMY_CANNONBALL;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1C3C
	inx
	clc
L1C3C:	adc     #<(_enemies+160)
	sta     ptr1
	txa
	adc     #>(_enemies+160)
	sta     ptr1+1
	lda     #$09
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cannonball_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cannonball_ai: near

.segment	"CODE"

;
; temp1 = enemies.extra[x - 1];
;
	ldx     #$00
	lda     _x
	sec
	sbc     #$01
	bcs     L19FA
	dex
L19FA:	sta     ptr1
	txa
	clc
	adc     #>(_enemies+192)
	sta     ptr1+1
	ldy     #<(_enemies+192)
	lda     (ptr1),y
	sta     _temp1
;
; temp2 = cos_lookup(temp1);
;
	jsr     _cos_lookup
	sta     _temp2
;
; temp3 = sin_lookup(temp1);
;
	lda     _temp1
	jsr     _sin_lookup
	sta     _temp3
;
; high_byte(temp5) = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.extra[x];
;
	ldy     _x
	lda     _enemies+192,y
	sta     _temp5
;
; if (CANNONBALL_X_DIRECTION(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$40
	beq     L1C46
;
; temp5 += temp2;
;
	lda     _temp2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = high_byte(temp5) + 7;
;
	clc
	adc     #$07
;
; } else {
;
	jmp     L1C44
;
; temp5 -= temp2;
;
L1C46:	lda     _temp2
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = high_byte(temp5) + 0xff;
;
	clc
	adc     #$FF
L1C44:	sta     _temp1
;
; enemies.x[x] = high_byte(temp5);
;
	ldy     _x
	lda     _temp5+1
	sta     _enemies,y
;
; enemies.extra[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+192,y
;
; high_byte(temp6) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp6+1
;
; low_byte(temp6) = enemies.extra2[x];
;
	ldy     _x
	lda     _enemies+224,y
	sta     _temp6
;
; if (CANNONBALL_Y_DIRECTION(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$20
	beq     L1C47
;
; temp6 += temp3;
;
	lda     _temp3
	clc
	adc     _temp6
	sta     _temp6
	lda     #$00
	adc     _temp6+1
	sta     _temp6+1
;
; enemies.extra2[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+224,y
;
; low_byte(temp6) = high_byte(temp6);
;
	lda     _temp6+1
	sta     _temp6
;
; high_byte(temp6) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp6+1
;
; temp6 = add_scroll_y(0x00, temp6);
;
	lda     #$00
	jsr     pusha
	lda     _temp6
	ldx     _temp6+1
	jsr     _add_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; enemies.nt[x] = high_byte(temp6);
;
	ldy     _x
	lda     _temp6+1
	sta     _enemies+96,y
;
; enemies.actual_y[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+64,y
;
; temp5 = add_scroll_y(7, temp6);
;
	lda     #$07
;
; } else {
;
	jmp     L1C4D
;
; temp6 -= temp3;
;
L1C47:	lda     _temp3
	eor     #$FF
	sec
	adc     _temp6
	sta     _temp6
	lda     #$FF
	adc     _temp6+1
	sta     _temp6+1
;
; enemies.extra2[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+224,y
;
; low_byte(temp6) = high_byte(temp6);
;
	lda     _temp6+1
	sta     _temp6
;
; high_byte(temp6) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp6+1
;
; temp6 = sub_scroll_y(0x00, temp6);
;
	lda     #$00
	jsr     pusha
	lda     _temp6
	ldx     _temp6+1
	jsr     _sub_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; enemies.nt[x] = high_byte(temp6);
;
	ldy     _x
	lda     _temp6+1
	sta     _enemies+96,y
;
; enemies.actual_y[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+64,y
;
; temp5 = add_scroll_y(1, temp6);
;
	lda     #$01
L1C4D:	jsr     pusha
	lda     _temp6
	ldx     _temp6+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; coordinates = (temp1 >> 4) + (low_byte(temp5) & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp5
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp4 = high_byte(temp5);
;
	lda     _temp5+1
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L1A97
;
; enemies.type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies+160,y
;
; enemies.flags[x] = 0; 
;
	ldy     _x
	sta     _enemies+128,y
;
; }
;
L1A97:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ acid_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_acid_ai: near

.segment	"CODE"

;
; if (enemies.extra2[x]) {
;
	ldy     _x
	ldx     #$00
	lda     _enemies+224,y
	beq     L1C53
;
; --enemies.extra2[x];
;
	lda     #<(_enemies+224)
	ldx     #>(_enemies+224)
	clc
	adc     _x
	bcc     L1AAB
	inx
L1AAB:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (IS_ENEMY_ACTIVE(x+1)) { return; }
;
	ldx     #$00
L1C53:	lda     _x
	clc
	adc     #$01
	bcc     L1AB0
	inx
L1AB0:	sta     ptr1
	txa
	clc
	adc     #>(_enemies+128)
	sta     ptr1+1
	ldy     #<(_enemies+128)
	lda     (ptr1),y
	and     #$80
	beq     L1C54
;
; }
;
	rts
;
; if (--enemies.timer[x] == 0) {
;
L1C54:	lda     #<(_enemies+256)
	ldx     #>(_enemies+256)
	clc
	adc     _x
	bcc     L1AB4
	inx
L1AB4:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
	cmp     #$00
	beq     L1C55
;
; }
;
	rts
;
; temp0 = enemies.extra[x];
;
L1C55:	ldy     _x
	lda     _enemies+192,y
	sta     _temp0
;
; enemies.timer[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies+256,y
;
; temp0 = rand8() & 0b111; // Bottom 3 bits, 0 - 7
;
	jsr     _rand8
	and     #$07
	sta     _temp0
;
; temp1 = enemies.x[x] + temp0; 
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     _temp0
	sta     _temp1
;
; temp2 = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp2
;
; temp3 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp3
;
; enemies.x[x+1] = temp1;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1C4F
	inx
	clc
L1C4F:	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     _temp1
	ldy     #$00
	sta     (ptr1),y
;
; enemies.actual_y[x+1] = temp2;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1C50
	inx
	clc
L1C50:	adc     #<(_enemies+64)
	sta     ptr1
	txa
	adc     #>(_enemies+64)
	sta     ptr1+1
	lda     _temp2
	sta     (ptr1),y
;
; enemies.nt[x+1] = temp3;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1C51
	inx
	clc
L1C51:	adc     #<(_enemies+96)
	sta     ptr1
	txa
	adc     #>(_enemies+96)
	sta     ptr1+1
	lda     _temp3
	sta     (ptr1),y
;
; enemies.type[x+1] = ENEMY_ACIDDROP;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1C52
	inx
	clc
L1C52:	adc     #<(_enemies+160)
	sta     ptr1
	txa
	adc     #>(_enemies+160)
	sta     ptr1+1
	lda     #$0A
	sta     (ptr1),y
;
; enemies.extra2[x] = 12; // ACIDBLOB_ANIMATION_FRAME_COUNT
;
	ldy     _x
	lda     #$0C
	sta     _enemies+224,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ acid_drop_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_acid_drop_ai: near

.segment	"CODE"

;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp5
;
; temp5 = add_scroll_y(1, temp5);
;
	lda     #$01
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp6 = add_scroll_y(6, temp5); // 8 being the cosmetic projectile height
;
	lda     #$06
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _add_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; coordinates = (enemies.x[x] >> 4) + (low_byte(temp6) & 0xf0);
;
	ldy     _x
	lda     _enemies,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp6
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = high_byte(temp6);
;
	lda     _temp6+1
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp0);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L1949
;
; enemies.type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies+160,y
;
; enemies.flags[x] = 0;
;
	ldy     _x
	sta     _enemies+128,y
;
; } else {
;
	rts
;
; enemies.nt[x] = high_byte(temp5);
;
L1949:	ldy     _x
	lda     _temp5+1
	sta     _enemies+96,y
;
; enemies.actual_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+64,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ splyke_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_splyke_ai: near

.segment	"CODE"

;
; temp0 = rand8() & 0x0f; // random from 0 to 15
;
	jsr     _rand8
	and     #$0F
	sta     _temp0
;
; temp1 = SPLYKE_IS_MOVING_AROUND(x);
;
	ldy     _x
	lda     _enemies+128,y
	and     #$20
	sta     _temp1
;
; temp2 = (enemies.extra2[x] + 1) & 7; // Bitmask the animation counter to 7. (this will get >> 1'd in draw_sprites)
;
	ldy     _x
	lda     _enemies+224,y
	clc
	adc     #$01
	and     #$07
	sta     _temp2
;
; enemies.extra2[x] = temp2;
;
	ldy     _x
	lda     _temp2
	sta     _enemies+224,y
;
; if (temp0 == 0 && temp1 == 0) {
;
	lda     _temp0
	bne     L1AF1
	lda     _temp1
	bne     L1AF1
;
; SPLYKE_SET_MOVING_AROUND(x); // Start moving.
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L1AF8
	inx
L1AF8:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; } else if (temp1){
;
	rts
L1AF1:	lda     _temp1
	bne     L1C5D
;
; }
;
	rts
;
; if (temp0 == 0) {
;
L1C5D:	lda     _temp0
	bne     L1AFD
;
; SPLYKE_SET_STANDING_STILL(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L1B02
	inx
L1B02:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; temp3 = ENEMY_DIRECTION(x);
;
L1AFD:	ldy     _x
	lda     _enemies+128,y
	and     #$01
	sta     _temp3
;
; temp1 = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp1
;
; temp1 += leftright_movement_offset_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_offset_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp1 += leftright_movement_moving_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp2 = enemies.actual_y[x] + 18; // Y beneath us
;
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$12
	sta     _temp2
;
; if (temp2 >= 0xf0) {
;
	cmp     #$F0
	bcc     L1B1A
;
; temp4 = enemies.nt[x] + 1;
;
	ldy     _x
	lda     _enemies+96,y
	clc
	adc     #$01
	sta     _temp4
;
; temp2 = 0;
;
	lda     #$00
	sta     _temp2
;
; } else {
;
	jmp     L1C5A
;
; temp4 = enemies.nt[x];
;
L1B1A:	ldy     _x
	lda     _enemies+96,y
	sta     _temp4
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
L1C5A:	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (!METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	bne     L1B40
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L1B48
	inx
L1B48:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp2 = enemies.actual_y[x] + 6; // center y
;
L1B40:	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$06
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp4 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L1B6D
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L1B75
	inx
L1B75:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp1 = leftright_movement_moving_lookup_table[temp3];
;
L1B6D:	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	sta     _temp1
;
; temp1 += temp1;
;
	clc
	adc     _temp1
	sta     _temp1
;
; temp0 = enemies.x[x] + temp1;
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     _temp1
	sta     _temp0
;
; enemies.x[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sun_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sun_ai: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies+128,y
	and     #$01
	sta     _temp3
;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp5
;
; temp1 = enemies.x[x] + 6; 
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$06
	sta     _temp1
;
; if (temp3 == UP) { // subtracting from y
;
	lda     _temp3
	bne     L18CF
;
; temp5 = sub_scroll_y(1, temp5);
;
	lda     #$01
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _sub_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp2 = low_byte(temp5); // Y of tile of interest
;
	lda     _temp5
	sta     _temp2
;
; temp4 = high_byte(temp5); // NT of tile of interest
;
	lda     _temp5+1
;
; } else { // DOWN (adding to y)
;
	jmp     L1C5E
;
; temp5 = add_scroll_y(1, temp5);
;
L18CF:	lda     #$01
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp6 = add_scroll_y(15, temp5); // 15 being the cosmetic size of an enemy
;
	lda     #$0F
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _add_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; temp2 = low_byte(temp6); // Y of tile of interest
;
	lda     _temp6
	sta     _temp2
;
; temp4 = high_byte(temp6); // NT of tile of interest
;
	lda     _temp6+1
L1C5E:	sta     _temp4
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L1902
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L190A
	inx
L190A:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$01
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; enemies.nt[x] = high_byte(temp5);
;
L1902:	ldy     _x
	lda     _temp5+1
	sta     _enemies+96,y
;
; enemies.actual_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+64,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ death_effect_timer_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_death_effect_timer_ai: near

.segment	"CODE"

;
; if (--enemies.timer[x] == 0){
;
	lda     #<(_enemies+256)
	ldx     #>(_enemies+256)
	clc
	adc     _x
	bcc     L1B8C
	inx
L1B8C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
	cmp     #$00
	bne     L1B89
;
; enemies.type[x] = ENEMY_NONE;
;
	ldy     _x
	sta     _enemies+160,y
;
; enemies.flags[x] = 0;
;
	ldy     _x
	sta     _enemies+128,y
;
; }
;
L1B89:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_prg_bank(0);
;
	lda     #$00
	jsr     _set_prg_bank
;
; set_chr_bank_0(0);
;
	lda     #$00
	jsr     _set_chr_bank_0
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; level_index = 0;
;
	lda     #$00
	sta     _level_index
;
; load_title_screen();
;
	jsr     _load_title_screen
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while (game_mode == MODE_TITLE) { 
;
	jmp     L1C70
;
; ppu_wait_nmi();
;
L0FAC:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; if (pad1_new & PAD_UP) {
;
	lda     _pad1_new
	and     #$08
	beq     L1C68
;
; score = 0; // Reset the score.
;
	lda     #$00
	sta     _score
	sta     _score+1
;
; begin_level();
;
	jsr     _begin_level
;
; if (pad1_new & PAD_LEFT && level_index != 0) {
;
L1C68:	lda     _pad1_new
	and     #$02
	beq     L1C6C
	lda     _level_index
	beq     L1C6C
;
; --level_index;
;
	dec     _level_index
;
; temp0 = strlen(level_names[level_index]);
;
	ldx     #$00
	lda     _level_index
	asl     a
	bcc     L1C64
	inx
	clc
L1C64:	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _strlen
	sta     _temp0
;
; multi_vram_buffer_horz(level_names[level_index], temp0, NTADR_A(3, 8));
;
	jsr     decsp3
	ldx     #$00
	lda     _level_index
	asl     a
	bcc     L1C65
	inx
	clc
L1C65:	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	iny
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _temp0
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$03
	jsr     _multi_vram_buffer_horz
;
; if (pad1_new & PAD_RIGHT && level_index < NUMBER_OF_LEVELS-1) {
;
L1C6C:	lda     _pad1_new
	and     #$01
	beq     L1C70
	lda     _level_index
	cmp     #$0A
	bcs     L1C70
;
; ++level_index;
;
	inc     _level_index
;
; temp0 = strlen(level_names[level_index]);
;
	ldx     #$00
	lda     _level_index
	asl     a
	bcc     L1C66
	inx
	clc
L1C66:	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _strlen
	sta     _temp0
;
; multi_vram_buffer_horz(level_names[level_index], temp0, NTADR_A(3, 8));
;
	jsr     decsp3
	ldx     #$00
	lda     _level_index
	asl     a
	bcc     L1C67
	inx
	clc
L1C67:	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	iny
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _temp0
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$03
	jsr     _multi_vram_buffer_horz
;
; while (game_mode == MODE_TITLE) { 
;
L1C70:	lda     _game_mode
	jeq     L0FAC
;
; while (game_mode == MODE_GAME) {
;
	jmp     L1C72
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0FE3:	jsr     _ppu_wait_nmi
;
; set_chr_bank_0(0);
;
	lda     #$00
	jsr     _set_chr_bank_0
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); 
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; movement();
;
	jsr     _movement
;
; check_spr_objects();
;
	jsr     _check_spr_objects
;
; swing_sword();
;
	jsr     _swing_sword
;
; sprite_collisions();
;
	jsr     _sprite_collisions
;
; enemy_movement();
;
	jsr     _enemy_movement
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; convert_to_decimal(score);
;
	lda     _score
	ldx     _score+1
	jsr     _convert_to_decimal
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if (valrigard.velocity_y >= 0) { // If this is true, draw down. Otherwise, draw up.
;
	ldx     _valrigard+6+1
	bmi     L0FFB
;
; draw_screen_D();
;
	jsr     _draw_screen_D
;
; }  else {
;
	jmp     L0FFE
;
; draw_screen_U();
;
L0FFB:	jsr     _draw_screen_U
;
; handle_tile_clear_queue();
;
L0FFE:	jsr     _handle_tile_clear_queue
;
; if (game_mode == MODE_GAME_OVER) {
;
	lda     _game_mode
	cmp     #$04
	bne     L1C71
;
; load_game_over_screen();
;
	jsr     _load_game_over_screen
;
; if (pad1 & PAD_DOWN) {
;
L1C71:	lda     _pad1
	and     #$04
	beq     L1004
;
; SET_STATUS_ALIVE();
;
	lda     _player_flags
	and     #$FD
	sta     _player_flags
;
; gray_line(); // The further down this renders, the fewer clock cycles were free this frame.
;
L1004:	jsr     _gray_line
;
; while (game_mode == MODE_GAME) {
;
L1C72:	lda     _game_mode
	cmp     #$01
	beq     L0FE3
;
; while (game_mode == MODE_GAME_OVER) {
;
	jmp     L1C73
;
; ppu_wait_nmi();
;
L100A:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_DOWN) {
;
	and     #$04
	beq     L1C73
;
; load_title_screen();
;
	jsr     _load_title_screen
;
; while (game_mode == MODE_GAME_OVER) {
;
L1C73:	lda     _game_mode
	cmp     #$04
	beq     L100A
;
; while (1){
;
	jmp     L1C70

.endproc

