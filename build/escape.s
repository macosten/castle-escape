;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_set
	.import		_pad_poll
	.import		_bank_spr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_set_scroll_y
	.import		_add_scroll_y
	.import		_sub_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update_nmi
	.export		_valrigardIdleLeft
	.export		_valrigardIdleRight
	.export		_metatiles
	.export		_level10_0
	.export		_level10_1
	.export		_level10_2
	.export		_level_starting_nt
	.export		_valrigard_starting_nt
	.export		_valrigard_inital_coords
	.export		_level_nametables
	.export		_level_names
	.import		_clear_object_bitfield
	.import		_score_string
	.import		_convert_to_decimal
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_address
	.export		_temppointer
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_pseudo_scroll_y
	.export		_scroll_y
	.export		_min_scroll_y
	.export		_max_scroll_y
	.export		_initial_scroll
	.export		_scroll_count
	.export		_scroll_count_2
	.export		_L_R_switch
	.export		_old_x
	.export		_old_y
	.export		_level_index
	.export		_energy
	.export		_timer
	.export		_song
	.export		_nt_min
	.export		_nt_max
	.export		_nt_current
	.export		_c_map
	.export		_c_map2
	.export		_palette_bg
	.export		_palette_sp
	.export		_valrigard
	.export		_hitbox
	.export		_draw_sprites
	.export		_movement
	.export		_load_level
	.export		_load_room
	.export		_bg_collision
	.export		_bg_collision_sub
	.export		_draw_screen_U
	.export		_draw_screen_D
	.export		_new_cmap
	.export		_new_cmap_D
	.export		_main

.segment	"DATA"

_valrigard:
	.word	$0014
	.word	$0028
	.res	4,$00

.segment	"RODATA"

_valrigardIdleLeft:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F1
	.byte	$01
	.byte	$80
_valrigardIdleRight:
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F1
	.byte	$41
	.byte	$80
_metatiles:
	.byte	$A0
	.byte	$A0
	.byte	$B0
	.byte	$B0
	.byte	$00
	.byte	$A1
	.byte	$A1
	.byte	$B1
	.byte	$B1
	.byte	$00
	.byte	$A2
	.byte	$A3
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$B2
	.byte	$B3
	.byte	$B2
	.byte	$B3
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$E6
	.byte	$E3
	.byte	$F6
	.byte	$F3
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$94
	.byte	$F5
	.byte	$00
	.byte	$E2
	.byte	$E7
	.byte	$F2
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$8D
	.byte	$F6
	.byte	$F3
	.byte	$00
	.byte	$E6
	.byte	$E3
	.byte	$94
	.byte	$9D
	.byte	$00
	.byte	$E2
	.byte	$E7
	.byte	$F0
	.byte	$F5
	.byte	$00
	.byte	$E0
	.byte	$E5
	.byte	$F2
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$E5
	.byte	$94
	.byte	$F5
	.byte	$00
	.byte	$E2
	.byte	$E3
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$E0
	.byte	$8D
	.byte	$F0
	.byte	$9D
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$85
	.byte	$94
	.byte	$95
	.byte	$00
	.byte	$86
	.byte	$81
	.byte	$96
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$89
	.byte	$94
	.byte	$99
	.byte	$00
	.byte	$8A
	.byte	$81
	.byte	$9A
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$8D
	.byte	$94
	.byte	$9D
	.byte	$00
	.byte	$EC
	.byte	$ED
	.byte	$FC
	.byte	$FD
	.byte	$03
	.byte	$A4
	.byte	$A5
	.byte	$B4
	.byte	$B5
	.byte	$03
	.byte	$A6
	.byte	$A5
	.byte	$B6
	.byte	$B5
	.byte	$03
	.byte	$A6
	.byte	$A9
	.byte	$B6
	.byte	$B9
	.byte	$03
	.byte	$AA
	.byte	$AB
	.byte	$BA
	.byte	$BB
	.byte	$02
	.byte	$8E
	.byte	$8F
	.byte	$9E
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$AD
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$AE
	.byte	$AF
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$BC
	.byte	$CD
	.byte	$BC
	.byte	$DD
	.byte	$00
	.byte	$CE
	.byte	$BF
	.byte	$DE
	.byte	$BF
	.byte	$00
	.byte	$C4
	.byte	$C5
	.byte	$D4
	.byte	$D5
	.byte	$00
	.byte	$C6
	.byte	$C7
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$D8
	.byte	$D9
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$DA
	.byte	$DB
	.byte	$00
	.byte	$C2
	.byte	$C3
	.byte	$D2
	.byte	$D3
	.byte	$03
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$03
	.byte	$EA
	.byte	$EB
	.byte	$FA
	.byte	$FB
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_level10_0:
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$17
	.byte	$19
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$18
	.byte	$18
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$01
	.byte	$01
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level10_1:
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$0D
	.byte	$11
	.byte	$2C
	.byte	$10
	.byte	$11
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$16
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$29
	.byte	$2C
	.byte	$29
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$11
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$16
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level10_2:
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$16
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$10
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$07
	.byte	$07
	.byte	$0A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$2C
	.byte	$1A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level_starting_nt:
	.byte	$00
	.byte	$03
_valrigard_starting_nt:
	.byte	$02
_valrigard_inital_coords:
	.byte	$4D
_level_nametables:
	.addr	_level10_0
	.addr	_level10_1
	.addr	_level10_2
	.addr	_level10_0
_level_names:
	.addr	L03DC
	.addr	L03DE
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$11
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$38
_palette_sp:
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$32
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$30
	.byte	$16
	.byte	$00
L03DC:
	.byte	$4D,$6F,$63,$6B,$75,$70,$20,$4C,$65,$76,$65,$6C,$20,$31,$30,$00
L03DE:
	.byte	$4E,$75,$6C,$6C,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_direction:
	.res	1,$00
_address:
	.res	2,$00
_temppointer:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_pseudo_scroll_y:
	.res	2,$00
_scroll_y:
	.res	2,$00
_min_scroll_y:
	.res	2,$00
_max_scroll_y:
	.res	2,$00
_initial_scroll:
	.res	2,$00
_scroll_count:
	.res	1,$00
_scroll_count_2:
	.res	1,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_level_index:
	.res	1,$00
_energy:
	.res	1,$00
_timer:
	.res	1,$00
_song:
	.res	1,$00
_nt_min:
	.res	1,$00
_nt_max:
	.res	1,$00
_nt_current:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_hitbox:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_set(4); // Technically redundant
;
	lda     #$04
	jsr     _oam_set
;
; temp1 = valrigard.x >> 8;
;
	lda     _valrigard+1
	sta     _temp1
;
; temp2 = valrigard.y >> 8;
;
	lda     _valrigard+3
	sta     _temp2
;
; if (direction == LEFT) {
;
	lda     _direction
	bne     L04BF
;
; oam_meta_spr(temp1, temp2, valrigardIdleLeft);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #<(_valrigardIdleLeft)
	ldx     #>(_valrigardIdleLeft)
;
; } else {
;
	jmp     L073D
;
; oam_meta_spr(temp1, temp2, valrigardIdleRight);
;
L04BF:	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #<(_valrigardIdleRight)
	ldx     #>(_valrigardIdleRight)
L073D:	jsr     _oam_meta_spr
;
; temp1 = energy >> 4; // Unfortunately this is ASCII so ABCDEF are not directly after 789
;
	lda     _energy
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(200, 28, temp1, 1);
;
	jsr     decsp3
	lda     #$C8
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = energy & 0x0f;
;
	lda     _energy
	and     #$0F
	sta     _temp1
;
; oam_spr(208, 28, temp1, 1);
;
	jsr     decsp3
	lda     #$D0
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(200, 20, score_string[4], 3);
;
	jsr     decsp3
	lda     #$C8
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _score_string+4
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(208, 20, score_string[3], 3);
;
	jsr     decsp3
	lda     #$D0
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _score_string+3
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(216, 20, score_string[2], 3);
;
	jsr     decsp3
	lda     #$D8
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _score_string+2
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(224, 20, score_string[1], 3);
;
	jsr     decsp3
	lda     #$E0
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _score_string+1
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(232, 20, score_string[0], 3);
;
	jsr     decsp3
	lda     #$E8
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _score_string
	dey
	sta     (sp),y
	lda     #$03
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = valrigard.x;
;
	lda     _valrigard+1
	sta     _old_x+1
	lda     _valrigard
	sta     _old_x
;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L0740
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; if (valrigard.x <= 0x0200) { // Changed by 1 from nesdoug's example because Valrigard's hitbox is narrower by 1 pixel on both sides
;
	lda     _valrigard+1
	cmp     #$02
	bne     L04FF
	lda     _valrigard
	cmp     #$01
L04FF:	bcs     L04FD
;
; valrigard.velocity_x = 0;
;
	lda     #$00
	sta     _valrigard+4
	sta     _valrigard+4+1
;
; valrigard.x = 0x200;
;
	ldx     #$02
	sta     _valrigard
	stx     _valrigard+1
;
; } else if (valrigard.x < 0x0600) { // Don't allow us to wrap to the other side
;
	jmp     L051F
L04FD:	ldx     _valrigard+1
	cpx     #$06
	bcs     L0505
;
; valrigard.velocity_x = -0x100;
;
	ldx     #$FF
	lda     #$00
;
; } else {
;
	jmp     L0742
;
; valrigard.velocity_x = -SPEED;
;
L0505:	ldx     #$FE
	lda     #$B0
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0742
L0740:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L0742
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; if (valrigard.x >= 0xf000) {  // Also changed by 1 from nesdoug's example because Valrigard's hitbox is narrower by 1 pixel on both sides
;
	lda     _valrigard
	cmp     #$00
	lda     _valrigard+1
	sbc     #$F0
	bcc     L0511
;
; valrigard.velocity_x = 0;
;
	txa
	sta     _valrigard+4
	sta     _valrigard+4+1
;
; valrigard.x = 0xf000; // ...and we'd add 0x100 to this constant here (and the 0x200 in the PAD_LEFT block would be a 0x100)
;
	ldx     #$F0
	sta     _valrigard
	stx     _valrigard+1
;
; } else if (valrigard.x > 0xec00) { // Don't allow us to wrap to the other side
;
	jmp     L051F
L0511:	lda     _valrigard
	cmp     #$01
	lda     _valrigard+1
	sbc     #$EC
	bcc     L0518
;
; valrigard.velocity_x = 0x100;
;
	inx
	lda     #$00
;
; } else {
;
	jmp     L0742
;
; valrigard.velocity_x = SPEED;
;
L0518:	inx
	lda     #$50
;
; valrigard.velocity_x = 0;
;
L0742:	sta     _valrigard+4
	stx     _valrigard+4+1
;
; valrigard.x += valrigard.velocity_x;
;
L051F:	lda     _valrigard+4
	clc
	adc     _valrigard
	sta     _valrigard
	lda     _valrigard+4+1
	adc     _valrigard+1
	sta     _valrigard+1
;
; if((valrigard.x < 0x100)||(valrigard.x > 0xf800)) { // make sure no wrap around to the other side
;
	ldx     _valrigard+1
	cpx     #$01
	bcc     L0743
	lda     _valrigard
	cmp     #$01
	lda     _valrigard+1
	sbc     #$F8
	bcc     L0744
;
; valrigard.x = 0x100;
;
L0743:	ldx     #$01
	lda     #$00
	sta     _valrigard
	stx     _valrigard+1
;
; L_R_switch = 1; // Shrinks the Y values in bg_coll. This makes head/foot collisions less problematic (examine this)
;
L0744:	lda     #$01
	sta     _L_R_switch
;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; hitbox.width = VALRIGARD_WIDTH;
;
	lda     #$0B
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_HEIGHT;
;
	lda     #$0D
	sta     _hitbox+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if (collision_L && collision_R) { // Half-stuck in a wall, I'm guessing?
;
	lda     _collision_L
	beq     L0538
	lda     _collision_R
	beq     L0538
;
; valrigard.x = old_x;
;
	lda     _old_x+1
	sta     _valrigard+1
	lda     _old_x
	sta     _valrigard
;
; else if (collision_L) {
;
	jmp     L0545
L0538:	lda     _collision_L
	beq     L053F
;
; valrigard.x -= (eject_L << 8);
;
	lda     #$FF
	sec
	adc     _valrigard
	sta     _valrigard
	lda     _eject_L
;
; else if (collision_R) {
;
	jmp     L074F
L053F:	lda     _collision_R
	beq     L0545
;
; valrigard.x -= (eject_R << 8);
;
	lda     #$FF
	sec
	adc     _valrigard
	sta     _valrigard
	lda     _eject_R
L074F:	eor     #$FF
	adc     _valrigard+1
	sta     _valrigard+1
;
; old_y = valrigard.y;
;
L0545:	lda     _valrigard+2+1
	sta     _old_y+1
	lda     _valrigard+2
	sta     _old_y
;
; if (pad1 & PAD_UP && energy > 0) { // If we're holding up on the DPad...
;
	lda     _pad1
	and     #$08
	beq     L054C
	lda     _energy
	beq     L054C
;
; valrigard.velocity_y -= GRAVITY;
;
	lda     _valrigard+6
	sec
	sbc     #$30
	sta     _valrigard+6
	bcs     L0552
	dec     _valrigard+6+1
;
; if (valrigard.velocity_y < -SPEED) valrigard.velocity_y = -SPEED;
;
L0552:	lda     _valrigard+6
	cmp     #$B0
	lda     _valrigard+6+1
	sbc     #$FE
	bvc     L0555
	eor     #$80
L0555:	bpl     L0748
	ldx     #$FE
	lda     #$B0
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; energy -= 1;
;
L0748:	dec     _energy
;
; } else {
;
	jmp     L055E
;
; valrigard.velocity_y += GRAVITY;
;
L054C:	lda     #$30
	clc
	adc     _valrigard+6
	sta     _valrigard+6
	bcc     L055D
	inc     _valrigard+6+1
;
; if (valrigard.velocity_y > MAX_FALL) valrigard.velocity_y = MAX_FALL;
;
L055D:	lda     _valrigard+6
	cmp     #$51
	lda     _valrigard+6+1
	sbc     #$01
	bvs     L0560
	eor     #$80
L0560:	bpl     L055E
	ldx     #$01
	lda     #$50
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; valrigard.y += valrigard.velocity_y;
;
L055E:	lda     _valrigard+6
	clc
	adc     _valrigard+2
	sta     _valrigard+2
	lda     _valrigard+6+1
	adc     _valrigard+2+1
	sta     _valrigard+2+1
;
; if (valrigard.y < 0x100)  valrigard.y = 0x100;
;
	ldx     _valrigard+2+1
	cpx     #$01
	bcs     L0565
	ldx     #$01
	lda     #$00
	sta     _valrigard+2
	stx     _valrigard+2+1
;
; if (valrigard.y > 0xf000) valrigard.y = 0xf000;
;
L0565:	lda     _valrigard+2
	cmp     #$01
	lda     _valrigard+2+1
	sbc     #$F0
	lda     #$00
	bcc     L074A
	ldx     #$F0
	sta     _valrigard+2
	stx     _valrigard+2+1
;
; L_R_switch = 0;
;
L074A:	sta     _L_R_switch
;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U) {
;
	lda     _collision_U
	beq     L0576
;
; high_byte(valrigard.y) -= eject_U;
;
	lda     _eject_U
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; else if (collision_D) {
;
	jmp     L0583
L0576:	lda     _collision_D
	beq     L0583
;
; high_byte(valrigard.y) -= eject_D;
;
	lda     _eject_D
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; energy += 4;
;
	lda     #$04
	clc
	adc     _energy
	sta     _energy
;
; if (energy > MAX_ENERGY) energy = MAX_ENERGY;
;
	cmp     #$71
	bcc     L0583
	lda     #$70
	sta     _energy
;
; temp5 = valrigard.y;
;
L0583:	lda     _valrigard+2+1
	sta     _temp5+1
	lda     _valrigard+2
	sta     _temp5
;
; if (valrigard.y < MAX_UP && scroll_y > min_scroll_y) {
;
	ldx     _valrigard+2+1
	cpx     #$40
	bcs     L0589
	lda     _scroll_y
	sec
	sbc     _min_scroll_y
	sta     tmp1
	lda     _scroll_y+1
	sbc     _min_scroll_y+1
	ora     tmp1
	beq     L0589
	bcc     L0589
;
; temp1 = (MAX_UP - valrigard.y + 0x80) >> 8; // "the numbers work better with +80 (like 0.5)". I'll take his word for it.
;
	lda     #$00
	sec
	sbc     _valrigard+2
	pha
	lda     #$40
	sbc     _valrigard+2+1
	tax
	pla
	clc
	adc     #$80
	bcc     L0590
	inx
L0590:	txa
	sta     _temp1
;
; scroll_y = sub_scroll_y(temp1, scroll_y);
;
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; valrigard.y += (temp1 << 8);
;
	lda     #$00
	clc
	adc     _valrigard+2
	sta     _valrigard+2
	lda     _temp1
	adc     _valrigard+2+1
	sta     _valrigard+2+1
;
; if (valrigard.y > MIN_DOWN && scroll_y < max_scroll_y) {
;
L0589:	lda     _valrigard+2
	cmp     #$01
	lda     _valrigard+2+1
	sbc     #$80
	bcc     L0598
	lda     _scroll_y
	cmp     _max_scroll_y
	lda     _scroll_y+1
	sbc     _max_scroll_y+1
	bcs     L0598
;
; temp1 = (MIN_DOWN + valrigard.y + 0x80) >> 8;
;
	lda     _valrigard+2
	pha
	lda     _valrigard+2+1
	clc
	adc     #$80
	tax
	pla
	clc
	adc     #$80
	bcc     L059F
	inx
L059F:	txa
	sta     _temp1
;
; scroll_y = add_scroll_y(temp1, scroll_y);
;
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; valrigard.y -= (temp1 << 8);
;
	lda     #$FF
	sec
	adc     _valrigard+2
	sta     _valrigard+2
	lda     _temp1
	eor     #$FF
	adc     _valrigard+2+1
	sta     _valrigard+2+1
;
; if (valrigard.velocity_y <= 0) {
;
L0598:	lda     _valrigard+6
	cmp     #$01
	lda     _valrigard+6+1
	sbc     #$00
	bvc     L05A9
	eor     #$80
L05A9:	bpl     L05A7
;
; if ((scroll_y & 0xff) >= 0xec) {
;
	lda     _scroll_y
	cmp     #$EC
	bcc     L05AF
;
; new_cmap();
;
	jmp     _new_cmap
;
; if ((scroll_y & 0xff) <= 0x02) {
;
L05A7:	lda     _scroll_y
	cmp     #$03
;
; new_cmap_D();
;
	jcc     _new_cmap_D
;
; }
;
L05AF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level: near

.segment	"CODE"

;
; clear_object_bitfield(); // Clear all object destruction flags
;
	jsr     _clear_object_bitfield
;
; nt_max = level_starting_nt[level_index+1];
;
	ldx     #$00
	lda     _level_index
	clc
	adc     #$01
	bcc     L0433
	inx
L0433:	sta     ptr1
	txa
	clc
	adc     #>(_level_starting_nt)
	sta     ptr1+1
	ldy     #<(_level_starting_nt)
	lda     (ptr1),y
	sta     _nt_max
;
; nt_current = valrigard_starting_nt[level_index];
;
	ldy     _level_index
	lda     _valrigard_starting_nt,y
	sta     _nt_current
;
; high_byte(scroll_y) = nt_current; // The high byte of scroll_y is the nametable we're currently in (0-255).
;
	sta     _scroll_y+1
;
; low_byte(scroll_y) = 2;
;
	lda     #$02
	sta     _scroll_y
;
; high_byte(max_scroll_y) = nt_max - 1; // bottom of this level
;
	lda     _nt_max
	sec
	sbc     #$01
	sta     _max_scroll_y+1
;
; low_byte(max_scroll_y) = 0xef;
;
	lda     #$EF
	sta     _max_scroll_y
;
; high_byte(min_scroll_y) = level_starting_nt[level_index]; // Min Scroll
;
	ldy     _level_index
	lda     _level_starting_nt,y
	sta     _min_scroll_y+1
;
; low_byte(min_scroll_y) = 0x02;
;
	lda     #$02
	sta     _min_scroll_y
;
; scroll_count = 0;
;
	lda     #$00
	sta     _scroll_count
;
; initial_scroll = ((nt_current * 0x100) - 0x11);
;
	ldx     _nt_current
	sec
	sbc     #$11
	bcs     L0453
	dex
L0453:	sta     _initial_scroll
	stx     _initial_scroll+1
;
; temp4 = valrigard_inital_coords[level_index];
;
	ldy     _level_index
	lda     _valrigard_inital_coords,y
	sta     _temp4
;
; valrigard.x = ((temp4 >> 4) * 16) << 8;
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _valrigard+1
	lda     #$00
	sta     _valrigard
;
; valrigard.y = ((temp4 & 0x0f) * 16) << 8;
;
	lda     _temp4
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _valrigard+2+1
	lda     #$00
	sta     _valrigard+2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; set_data_pointer(level_nametables[nt_current]);
;
	ldx     #$00
	lda     _nt_current
	asl     a
	bcc     L0757
	inx
	clc
L0757:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; temp1 = (initial_scroll >> 8) + 1;
;
	lda     _initial_scroll+1
	clc
	adc     #$01
	sta     _temp1
;
; temp1 = (temp1 & 1) << 1;
;
	and     #$01
	asl     a
	sta     _temp1
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L0755:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0754:	sta     _x
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(temp1, x, y);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L0759
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0754
;
; if (y == 0xe0) break;
;
L0759:	lda     _y
	cmp     #$E0
	beq     L075A
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L0755
;
; temp1 = temp1 ^ 2; // flip that 0000 0010 bit
;
L075A:	lda     _temp1
	eor     #$02
	sta     _temp1
;
; set_data_pointer(level_nametables[nt_current-1]);
;
	ldx     #$00
	lda     _nt_current
	sec
	sbc     #$01
	bcs     L0494
	dex
L0494:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_level_nametables)
	sta     ptr1
	lda     tmp1
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0756:	sta     _x
;
; y = 0xe0;
;
	lda     #$E0
	sta     _y
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(temp1, x, y);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L0496
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0756
;
; clear_vram_buffer();
;
L0496:	jsr     _clear_vram_buffer
;
; memcpy(c_map, level_nametables[nt_current], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _nt_current
	asl     a
	bcc     L0758
	inx
	clc
L0758:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; max_scroll_y = scroll_y;
;
	lda     _scroll_y+1
	sta     _max_scroll_y+1
	lda     _scroll_y
	sta     _max_scroll_y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; temp3 = hitbox.y;
;
	lda     _hitbox+1
	sta     _temp3
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L075C
	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; if(temp3 >= 0xf0) return;
;
L075C:	lda     _temp3
	cmp     #$F0
	bcc     L075D
;
; }
;
	rts
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
L075D:	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp2 = temp5 >> 8; // high byte y
;
	lda     _temp5+1
	sta     _temp2
;
; temp3 = temp5 & 0xff; // low byte y
;
	lda     _temp5
	sta     _temp3
;
; temp1 = hitbox.x; // x left
;
	lda     _hitbox
	sta     _temp1
;
; eject_L = temp1 | 0xf0;
;
	ora     #$F0
	sta     _eject_L
;
; eject_U = temp3 | 0xf0;
;
	lda     _temp3
	ora     #$F0
	sta     _eject_U
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L05D4
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp1 += hitbox.width; // x right
;
L05D4:	lda     _hitbox+2
	clc
	adc     _temp1
	sta     _temp1
;
; eject_R = (temp1 + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L05DF
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp3 = hitbox.y + hitbox.height; // y bottom
;
L05DF:	lda     _hitbox+1
	clc
	adc     _hitbox+3
	sta     _temp3
;
; if(L_R_switch) temp3 -= 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L05E5
	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
L05E5:	lda     _temp3
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp2 = temp5 >> 8; // high byte y
;
	lda     _temp5+1
	sta     _temp2
;
; temp3 = temp5 & 0xff; // low byte y
;
	lda     _temp5
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3
	cmp     #$F0
	bcs     L05FF
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L05F8
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp1 = hitbox.x; // x left
;
L05F8:	lda     _hitbox
	sta     _temp1
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L05FF
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L05FF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0); // upper left
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp2&1;
;
	lda     _temp2
	and     #$01
	sta     _map
;
; if (!map) {
;
	lda     _map
	bne     L060A
;
; collision = (c_map[coordinates] < 0x17 && c_map[coordinates] > 0x03); // 0x17 is the first non-solid tile, so if the tile is less than that, it's a collision
;
	ldy     _coordinates
	lda     _c_map,y
	cmp     #$17
	bcs     L075F
	ldy     _coordinates
	lda     _c_map,y
	cmp     #$04
	bcs     L0763
L075F:	lda     #$00
	jmp     L075E
;
; collision = (c_map2[coordinates] < 0x17 && c_map2[coordinates] > 0x03);
;
L060A:	ldy     _coordinates
	lda     _c_map2,y
	cmp     #$17
	bcs     L0762
	ldy     _coordinates
	lda     _c_map2,y
	cmp     #$04
	bcs     L0763
L0762:	lda     #$00
	jmp     L075E
L0763:	lda     #$01
L075E:	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_U: near

.segment	"CODE"

;
; pseudo_scroll_y = sub_scroll_y(0x20, scroll_y);
;
	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; temp1 = pseudo_scroll_y >> 8;
;
	lda     _pseudo_scroll_y+1
	sta     _temp1
;
; set_data_pointer(level_nametables[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0767
	inx
	clc
L0767:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = (temp1 & 1) << 1; // 0 or 2
;
	lda     _temp1
	and     #$01
	asl     a
	sta     _nt
;
; y = pseudo_scroll_y & 0xff;
;
	lda     _pseudo_scroll_y
	sta     _y
;
; switch(scroll_count){
;
	lda     _scroll_count
;
; }
;
	beq     L0632
	cmp     #$01
	beq     L064B
	cmp     #$02
	jeq     L0665
	jmp     L067E
;
; address = get_ppu_addr(nt, 0, y);
;
L0632:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 0;
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0x20, y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 2;
;
	lda     _y
	and     #$F0
	clc
	adc     #$02
;
; break;
;
	jmp     L076C
;
; address = get_ppu_addr(nt, 0x40, y);
;
L064B:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 4;
;
	lda     _y
	and     #$F0
	clc
	adc     #$04
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0x60, y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 6;
;
	lda     _y
	and     #$F0
	clc
	adc     #$06
;
; break;
;
	jmp     L076C
;
; address = get_ppu_addr(nt, 0x80, y);
;
L0665:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 8;
;
	lda     _y
	and     #$F0
	clc
	adc     #$08
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0xa0, y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 10;
;
	lda     _y
	and     #$F0
	clc
	adc     #$0A
;
; break;
;
	jmp     L076C
;
; address = get_ppu_addr(nt, 0xc0, y);
;
L067E:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$C0
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 12;
;
	lda     _y
	and     #$F0
	clc
	adc     #$0C
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0xe0, y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$E0
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 14;
;
	lda     _y
	and     #$F0
	clc
	adc     #$0E
L076C:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_D: near

.segment	"CODE"

;
; pseudo_scroll_y = add_scroll_y(0x20, scroll_y) + 0xef; 
;
	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	clc
	adc     #$EF
	bcc     L069F
	inx
L069F:	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; temp1 = pseudo_scroll_y >> 8;
;
	lda     _pseudo_scroll_y+1
	sta     _temp1
;
; set_data_pointer(level_nametables[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L076F
	inx
	clc
L076F:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = (temp1 & 1) << 1; // 0 or 2
;
	lda     _temp1
	and     #$01
	asl     a
	sta     _nt
;
; y = pseudo_scroll_y & 0xff;
;
	lda     _pseudo_scroll_y
	sta     _y
;
; switch(scroll_count){
;
	lda     _scroll_count
;
; }
;
	beq     L06AE
	cmp     #$01
	beq     L06C7
	cmp     #$02
	jeq     L06E1
	jmp     L06FA
;
; address = get_ppu_addr(nt, 0, y);
;
L06AE:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 0;
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0x20, y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 2;
;
	lda     _y
	and     #$F0
	clc
	adc     #$02
;
; break;
;
	jmp     L0774
;
; address = get_ppu_addr(nt, 0x40, y);
;
L06C7:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 4;
;
	lda     _y
	and     #$F0
	clc
	adc     #$04
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0x60, y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 6;
;
	lda     _y
	and     #$F0
	clc
	adc     #$06
;
; break;
;
	jmp     L0774
;
; address = get_ppu_addr(nt, 0x80, y);
;
L06E1:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 8;
;
	lda     _y
	and     #$F0
	clc
	adc     #$08
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0xa0, y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 10;
;
	lda     _y
	and     #$F0
	clc
	adc     #$0A
;
; break;
;
	jmp     L0774
;
; address = get_ppu_addr(nt, 0xc0, y);
;
L06FA:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$C0
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 12;
;
	lda     _y
	and     #$F0
	clc
	adc     #$0C
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0xe0, y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     #$E0
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 14;
;
	lda     _y
	and     #$F0
	clc
	adc     #$0E
L0774:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; nt_current = (scroll_y >> 8); //high byte = the index of the nametable we're in?, one to the right
;
	lda     _scroll_y+1
	sta     _nt_current
;
; map = nt_current & 1; //even or odd?
;
	and     #$01
	sta     _map
;
; if (!map) {
;
	lda     _map
	bne     L071C
;
; memcpy(c_map, level_nametables[nt_current], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _nt_current
	asl     a
	bcc     L0777
	inx
	clc
L0777:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy
;
; memcpy(c_map2, level_nametables[nt_current], 240);
;
L071C:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _nt_current
	asl     a
	bcc     L0778
	inx
	clc
L0778:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap_D: near

.segment	"CODE"

;
; nt_current = (scroll_y >> 8) + 1; //high byte = the index of the nametable we're in?, one to the right
;
	lda     _scroll_y+1
	clc
	adc     #$01
	sta     _nt_current
;
; map = nt_current & 1; //even or odd?
;
	and     #$01
	sta     _map
;
; if (!map) {
;
	lda     _map
	bne     L0730
;
; memcpy(c_map, level_nametables[nt_current], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _nt_current
	asl     a
	bcc     L077B
	inx
	clc
L077B:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy
;
; memcpy(c_map2, level_nametables[nt_current], 240);
;
L0730:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _nt_current
	asl     a
	bcc     L077C
	inx
	clc
L077C:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; load_level();
;
	jsr     _load_level
;
; load_room();
;
	jsr     _load_room
;
; level_index = 0;
;
	lda     #$00
	sta     _level_index
;
; energy = MAX_ENERGY;
;
	lda     #$70
	sta     _energy
;
; convert_to_decimal(0xffff);
;
	ldx     #$FF
	txa
	jsr     _convert_to_decimal
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0419:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; movement();
;
	jsr     _movement
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; if (valrigard.velocity_y < 0) {
;
	ldx     _valrigard+6+1
	cpx     #$80
	bcc     L0428
;
; draw_screen_U();
;
	jsr     _draw_screen_U
;
; } else {
;
	jmp     L042B
;
; draw_screen_D();
;
L0428:	jsr     _draw_screen_D
;
; draw_sprites();
;
L042B:	jsr     _draw_sprites
;
; while (1){
;
	jmp     L0419

.endproc

