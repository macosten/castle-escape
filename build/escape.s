;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.importzp	_TEMP
	.import		_oam_meta_spr_fast_sub
	.import		_oam_spr_fast_sub
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_memfill
	.import		_set_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_set_music_speed
	.import		_check_collision_fast
	.import		_set_scroll_y
	.import		_add_scroll_y_fast_sub
	.import		_sub_scroll_y
	.import		_get_ppu_addr_fast
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_1_mt_fast_sub
	.import		_buffer_4_mt_fast_sub
	.import		_flush_vram_update_nmi
	.import		_seed_rng
	.export		_bankLevel
	.export		_bankBuffer
	.import		_set_prg_bank
	.import		_set_chr_bank_0
	.export		_valrigard_idle_left
	.export		_valrigard_idle_right
	.export		_valrigard_swing_left_high
	.export		_valrigard_swing_right_high
	.export		_valrigard_swing_left_mid
	.export		_valrigard_swing_right_mid
	.export		_valrigard_swing_left_low
	.export		_valrigard_swing_right_low
	.export		_valrigard_swing_left_followthrough
	.export		_valrigard_swing_right_followthrough
	.export		_valrigard_dead_left
	.export		_valrigard_dead_right
	.export		_valrigard_flying_left0
	.export		_valrigard_flying_right0
	.export		_valrigard_flying_left1
	.export		_valrigard_flying_right1
	.export		_valrigard_flying_left2
	.export		_valrigard_flying_right2
	.export		_valrigard_walking_left0
	.export		_valrigard_walking_left1
	.export		_valrigard_walking_left2
	.export		_valrigard_walking_left3
	.export		_valrigard_walking_right0
	.export		_valrigard_walking_right1
	.export		_valrigard_walking_right2
	.export		_valrigard_walking_right3
	.export		_spikeball
	.export		_korbat_left
	.export		_korbat_flap1_left
	.export		_korbat_flap2_left
	.export		_korbat_flap3_left
	.export		_korbat_flap4_left
	.export		_korbat_flap5_left
	.export		_korbat_flap6_left
	.export		_korbat_right
	.export		_korbat_flap1_right
	.export		_korbat_flap2_right
	.export		_korbat_flap3_right
	.export		_korbat_flap4_right
	.export		_korbat_flap5_right
	.export		_korbat_flap6_right
	.export		_sun0
	.export		_sun1
	.export		_cannon_up
	.export		_cannon_up_left
	.export		_cannon_left
	.export		_cannon_down_left
	.export		_cannon_down
	.export		_cannon_down_right
	.export		_cannon_right
	.export		_cannon_up_right
	.export		_grarrl_left
	.export		_grarrl_backfoot_step0_left
	.export		_grarrl_backfoot_step1_left
	.export		_grarrl_frontfoot_step0_left
	.export		_grarrl_frontfoot_step1_left
	.export		_grarrl_right
	.export		_grarrl_backfoot_step0_right
	.export		_grarrl_backfoot_step1_right
	.export		_grarrl_frontfoot_step0_right
	.export		_grarrl_frontfoot_step1_right
	.export		_acidblob0
	.export		_acidblob1
	.export		_acidblob2
	.export		_acidblob3
	.export		_splyke_tornado0
	.export		_splyke_tornado1
	.export		_splyke_tornado2
	.export		_splyke_idle_left0
	.export		_splyke_idle_left1
	.export		_splyke_idle_right0
	.export		_splyke_idle_right1
	.export		_boss_head_eye_open_mouth_closed_left
	.export		_boss_head_eye_open_mouth_closed_right
	.export		_boss_head_eye_closed_mouth_closed_left
	.export		_boss_head_eye_closed_mouth_closed_right
	.export		_boss_body_idle_left0
	.export		_boss_body_idle_right0
	.export		_boss_body_flying_left0
	.export		_boss_body_flying_right0
	.export		_boss_body_flying_left1
	.export		_boss_body_flying_right1
	.export		_boss_body_flying_left2
	.export		_boss_body_flying_right2
	.export		_boss_body_flying_left3
	.export		_boss_body_flying_right3
	.export		_purple_death_effect0
	.export		_purple_death_effect1
	.export		_purple_death_effect2
	.export		_splyke_death_effect0
	.export		_splyke_death_effect1
	.export		_energy_bar_0
	.export		_energy_bar_1
	.export		_energy_bar_2
	.export		_energy_bar_3
	.export		_energy_bar_4
	.export		_energy_bar_5
	.export		_energy_bar_6
	.export		_energy_bar_7
	.export		_energy_bar_8
	.export		_energy_bar_9
	.export		_energy_bar_a
	.export		_energy_bar_b
	.export		_energy_bar_c
	.export		_energy_bar_d
	.export		_energy_bar_e
	.export		_energy_bar_f
	.export		_points_1
	.export		_points_2
	.export		_points_3
	.export		_points_4
	.export		_points_100
	.export		_valrigard_idle_sprite_lookup_table
	.export		_valrigard_sword_swing_sprite_lookup_table
	.export		_valrigard_dead_sprite_lookup_table
	.export		_valrigard_flying_sprite_lookup_table
	.export		_valrigard_walking_sprite_lookup_table
	.export		_korbat_sprite_lookup_table
	.export		_grarrl_sprite_lookup_table
	.export		_cannon_sprite_lookup_table
	.export		_acidblob_sprite_lookup_table
	.export		_sun_sprite_lookup_table
	.export		_splyke_sprite_lookup_table
	.export		_purple_death_effect_sprite_lookup_table
	.export		_splyke_death_effect_sprite_lookup_table
	.export		_energy_bar_lookup_table
	.export		_boss_body_sprite_idle_lookup_table
	.export		_boss_head_sprite_lookup_table
	.export		_boss_body_sprite_flying_lookup_table
	.export		_boss_dying_sprite_lookup_table
	.export		_boss_magic_offset_table
	.export		_floating_numbers_sprite_lookup_table
	.export		_floating_numbers_y_offset_lookup_table
	.import		_metatiles
	.import		_metatile_property_lookup_table
	.export		_level01_enemy
	.export		_level01
	.export		_level02_enemy
	.export		_level02
	.export		_level03_enemy
	.export		_level03
	.export		_level04_enemy
	.export		_level04
	.export		_level05_enemy
	.export		_level05
	.export		_level06_enemy
	.export		_level06
	.export		_level07_enemy
	.export		_level07
	.export		_level08_enemy
	.export		_level08
	.export		_level09_enemy
	.export		_level09
	.export		_level10_enemy
	.export		_level10
	.export		_level11_enemy
	.export		_level11
	.export		_level12_enemy
	.export		_level12
	.export		_level13_enemy
	.export		_level13
	.export		_level14_enemy
	.export		_level14
	.export		_level15_enemy
	.export		_level15
	.export		_level16_enemy
	.export		_level16
	.export		_level17_enemy
	.export		_level17
	.export		_level18_enemy
	.export		_level18
	.export		_level19
	.export		_level20_enemy
	.export		_level20
	.export		_boss_dialog_strings
	.export		_defeat_dialog_strings
	.export		_boss_dialog_portrait_sprites
	.export		_boss_dialog
	.export		_defeat_dialog
	.export		_level_neoman17777_enemy
	.export		_level_neoman17777
	.export		_level_debug_tiledump_enemy
	.export		_level_debug_tiledump
	.export		_level_star_test
	.export		_level_enemies_test_enemy
	.export		_level_enemies_test
	.export		_level_question_block_test
	.export		_level_macosten_enemy
	.export		_level_macosten
	.export		_level_screen_edge_test_enemy
	.export		_level_screen_edge_test
	.export		_level_bonus01
	.export		_level_bonus02
	.export		_level_nt_length
	.export		_valrigard_starting_nt
	.export		_valrigard_inital_coords
	.export		_level_compressed_nametable_pointers
	.export		_level_nametable_banks
	.export		_level_names
	.export		_empty_enemy
	.export		_level_enemy_data
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp0
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_temppointer
	.export		_temppointer1
	.export		_temp_mutablepointer
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_player_frame_timer
	.export		_player_sword_timer
	.export		_player_death_timer
	.export		_player_walking_timer
	.export		_player_flags
	.export		_game_mode
	.export		_game_level_advance_behavior
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_nt
	.export		_pseudo_scroll_y
	.export		_scroll_y
	.export		_min_scroll_y
	.export		_max_scroll_y
	.export		_initial_scroll
	.export		_scroll_count
	.export		_L_R_switch
	.export		_old_x
	.export		_old_y
	.export		_temp_x
	.export		_temp_y
	.export		_level_index
	.export		_energy
	.export		_score
	.export		_enemy_score
	.export		_song
	.export		_nt_max
	.export		_nt_current
	.export		_valrigard
	.export		_hitbox
	.export		_hitbox2
	.export		_shuffle_offset
	.export		_shuffle_maximum
	.export		_debug_tile_x
	.export		_debug_tile_y
	.export		_conveyor_delta
	.export		_menu
	.export		_menu_selection
	.export		_tile_clear_queue
	.export		_tile_clear_to_type_queue
	.export		_tile_clear_front
	.export		_tile_clear_back
	.export		_did_headbonk
	.export		_enemy_is_using_bg_collision
	.export		_advanced_conditional
	.export		_enemy_limit
	.export		_lowest_enemy_index
	.export		_level_index_backup
	.export		_settings_bitmask_lookup_table
	.export		_welcome_screen
	.import		_score_string
	.import		_convert_to_decimal
	.import		_sin_lookup
	.import		_cos_lookup
	.import		_brads_table
	.import		_abs_subtract
	.import		_strlen
	.import		_LZG_decode
	.import		_show_title_screen
	.export		_game_select_screen
	.export		_level_select_screen
	.export		_about_screen
	.export		_game_complete_screen
	.export		_settings_screen
	.export		_string_on
	.export		_string_off
	.export		_string_are_you_sure
	.import		_update_checksum
	.import		_check_checksum
	.import		_clear_saved_data
	.export		_palette_bg
	.export		_palette_sp
	.export		_shuffle_array
	.export		_shuffle_leg_size
	.export		_enemies_x
	.export		_enemies_y
	.export		_enemies_actual_y
	.export		_enemies_nt
	.export		_enemies_flags
	.export		_enemies_type
	.export		_enemies_extra
	.export		_enemies_extra2
	.export		_enemies_timer
	.export		_enemies_count
	.export		_boss_state
	.export		_boss_memory
	.export		_previous_score
	.export		_cmap
	.export		_checksum
	.export		_level_high_scores
	.export		_gauntlet_high_score
	.export		_settings_memory
	.export		_cmaps
	.export		_draw_sprites
	.export		_draw_player
	.export		_draw_korbat
	.export		_draw_grarrl
	.export		_draw_spikeball
	.export		_draw_cannon
	.export		_draw_cannonball
	.export		_draw_acid
	.export		_draw_acid_drop
	.export		_draw_splyke
	.export		_draw_sun
	.export		_draw_boss
	.export		_draw_purple_death_effect
	.export		_draw_splyke_death_effect
	.export		_draw_boss_fireball
	.export		_draw_floating_numbers_effect
	.export		_draw_score
	.export		_draw_energy
	.export		_draw_screen_sub
	.export		_handle_tile_clear_queue
	.export		_begin_level
	.export		_load_level_new
	.export		_calculate_shuffle_array
	.export		_load_level_welcome_screen
	.export		_clear_screen
	.export		_put_str_sub
	.export		_movement
	.export		_swing_sword
	.export		_bg_collision
	.export		_bg_collision_sub
	.export		_bg_collision_sub_collision_u
	.export		_check_spr_objects
	.export		_sprite_collisions
	.export		_empty_function
	.export		_collision_with_killable_slashable
	.export		_collision_with_inert_slashable
	.export		_collision_with_unkillable_unslashable
	.export		_collision_with_splyke
	.import		_collision_with_boss
	.export		_enemy_movement
	.export		_korbat_ai
	.export		_spikeball_ai
	.export		_cannon_ai
	.export		_cannonball_ai
	.export		_cannonball_ai_sub
	.export		_acid_ai
	.export		_acid_drop_ai
	.export		_splyke_ai
	.export		_sun_ai
	.export		_boss_ai
	.export		_boss_fireball_ai
	.export		_death_effect_timer_ai
	.export		_fire_at_target
	.export		_switch_menu
	.export		_menu_level_select
	.export		_menu_game_type_select
	.export		_menu_about_screen
	.export		_menu_game_complete_screen
	.export		_menu_settings
	.export		_load_level_selector
	.export		_load_about_screen
	.export		_load_game_complete_screen
	.export		_load_settings_menu
	.import		_dialog_box_handler
	.import		_boss_ai_intro
	.import		_boss_ai_idle
	.import		_boss_ai_ascending
	.import		_boss_ai_descending
	.import		_boss_ai_damaged
	.import		_boss_ai_dying
	.import		_draw_boss_flying
	.import		_draw_boss_idle
	.import		_draw_boss_dying
	.export		_draw_screen_sub_lookup_addr_0
	.export		_draw_screen_sub_lookup_index_offset_0
	.export		_draw_screen_sub_lookup_addr_1
	.export		_draw_screen_sub_lookup_index_offset_1
	.export		_leftright_movement_offset_lookup_table
	.export		_leftright_movement_moving_lookup_table
	.export		_updown_movement_offset_lookup_table
	.export		_cannon_ul_sprite_lookup_table
	.export		_cannon_ur_sprite_lookup_table
	.export		_cannon_dr_sprite_lookup_table
	.export		_cannon_dl_sprite_lookup_table
	.export		_cannon_sprite_quadrant_lookup_table
	.export		_menu_logic_functions
	.export		_menu_load_functions
	.export		_menu_compressed_data
	.export		_main
	.export		_prepare_score_string
	.export		_game_type_select_menu_links
	.export		_game_type_select_menu_selector_x
	.export		_game_type_select_menu_selector_y
	.export		_settings_menu_selector_x
	.export		_settings_menu_toggle_text_x
	.export		_settings_menu_selector_y
	.export		_settings_menu_text_y
	.export		_draw_func_pointers
	.export		_draw_boss_functions
	.export		_enemy_hitbox_width_lookup_table
	.export		_enemy_hitbox_height_lookup_table
	.export		_enemy_hitbox_x_offset_lookup_table
	.export		_enemy_hitbox_y_offset_lookup_table
	.export		_collision_functions
	.export		_ai_pointers
	.export		_boss_ai_functions

.segment	"DATA"

_string_on:
	.addr	L2DBC
_string_off:
	.addr	L2DBE
_string_are_you_sure:
	.addr	L2DC0
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$38

.segment	"RODATA"

.segment	"BANK5"
_valrigard_idle_left:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F1
	.byte	$01
	.byte	$80
_valrigard_idle_right:
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F1
	.byte	$41
	.byte	$80
_valrigard_swing_left_high:
	.byte	$FE
	.byte	$FD
	.byte	$E2
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F2
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F3
	.byte	$01
	.byte	$80
_valrigard_swing_right_high:
	.byte	$06
	.byte	$FD
	.byte	$E2
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F2
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F3
	.byte	$41
	.byte	$80
_valrigard_swing_left_mid:
	.byte	$FE
	.byte	$FD
	.byte	$E4
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F4
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F3
	.byte	$01
	.byte	$80
_valrigard_swing_right_mid:
	.byte	$06
	.byte	$FD
	.byte	$E4
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F4
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F3
	.byte	$41
	.byte	$80
_valrigard_swing_left_low:
	.byte	$FE
	.byte	$FD
	.byte	$E5
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F5
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F6
	.byte	$01
	.byte	$80
_valrigard_swing_right_low:
	.byte	$06
	.byte	$FD
	.byte	$E5
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F5
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F6
	.byte	$41
	.byte	$80
_valrigard_swing_left_followthrough:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E8
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F7
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F8
	.byte	$01
	.byte	$80
_valrigard_swing_right_followthrough:
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E8
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F7
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F8
	.byte	$41
	.byte	$80
_valrigard_dead_left:
	.byte	$06
	.byte	$05
	.byte	$D1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$D0
	.byte	$01
	.byte	$80
_valrigard_dead_right:
	.byte	$FE
	.byte	$05
	.byte	$D1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$D0
	.byte	$41
	.byte	$80
_valrigard_flying_left0:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$90
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F1
	.byte	$01
	.byte	$80
_valrigard_flying_right0:
	.byte	$FE
	.byte	$FD
	.byte	$90
	.byte	$41
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F0
	.byte	$41
	.byte	$80
_valrigard_flying_left1:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$91
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$A1
	.byte	$01
	.byte	$80
_valrigard_flying_right1:
	.byte	$FE
	.byte	$FD
	.byte	$91
	.byte	$41
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$A1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F0
	.byte	$41
	.byte	$80
_valrigard_flying_left2:
	.byte	$FE
	.byte	$FD
	.byte	$92
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$93
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$A2
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$A3
	.byte	$01
	.byte	$80
_valrigard_flying_right2:
	.byte	$FE
	.byte	$FD
	.byte	$93
	.byte	$41
	.byte	$06
	.byte	$FD
	.byte	$92
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$A3
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$A2
	.byte	$41
	.byte	$80
_valrigard_walking_left0:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$B0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$B1
	.byte	$01
	.byte	$80
_valrigard_walking_left1:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$C0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$C1
	.byte	$01
	.byte	$80
_valrigard_walking_left2:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$B2
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$B3
	.byte	$01
	.byte	$80
_valrigard_walking_left3:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$C2
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$C3
	.byte	$01
	.byte	$80
_valrigard_walking_right0:
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$B1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$B0
	.byte	$41
	.byte	$80
_valrigard_walking_right1:
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$C1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$C0
	.byte	$41
	.byte	$80
_valrigard_walking_right2:
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$B3
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$B2
	.byte	$41
	.byte	$80
_valrigard_walking_right3:
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$C3
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$C2
	.byte	$41
	.byte	$80
_spikeball:
	.byte	$FF
	.byte	$FF
	.byte	$12
	.byte	$03
	.byte	$07
	.byte	$FF
	.byte	$12
	.byte	$43
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$83
	.byte	$07
	.byte	$07
	.byte	$12
	.byte	$C3
	.byte	$80
_korbat_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$21
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$31
	.byte	$02
	.byte	$80
_korbat_flap1_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$22
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$31
	.byte	$02
	.byte	$80
_korbat_flap2_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$32
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$31
	.byte	$02
	.byte	$80
_korbat_flap3_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$23
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$33
	.byte	$02
	.byte	$80
_korbat_flap4_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$24
	.byte	$02
	.byte	$80
_korbat_flap5_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$34
	.byte	$02
	.byte	$80
_korbat_flap6_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$25
	.byte	$02
	.byte	$80
_korbat_right:
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$FF
	.byte	$FF
	.byte	$21
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$31
	.byte	$42
	.byte	$80
_korbat_flap1_right:
	.byte	$FF
	.byte	$FF
	.byte	$22
	.byte	$42
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$31
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$80
_korbat_flap2_right:
	.byte	$FF
	.byte	$FF
	.byte	$32
	.byte	$42
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$31
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$80
_korbat_flap3_right:
	.byte	$FF
	.byte	$FF
	.byte	$23
	.byte	$42
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$33
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$80
_korbat_flap4_right:
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$24
	.byte	$42
	.byte	$80
_korbat_flap5_right:
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$34
	.byte	$42
	.byte	$80
_korbat_flap6_right:
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$25
	.byte	$42
	.byte	$80
_sun0:
	.byte	$00
	.byte	$FF
	.byte	$13
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$13
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$14
	.byte	$40
	.byte	$80
_sun1:
	.byte	$00
	.byte	$FF
	.byte	$15
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$15
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$16
	.byte	$40
	.byte	$80
_cannon_up:
	.byte	$00
	.byte	$FF
	.byte	$1A
	.byte	$80
	.byte	$08
	.byte	$FF
	.byte	$1A
	.byte	$C0
	.byte	$00
	.byte	$07
	.byte	$19
	.byte	$80
	.byte	$08
	.byte	$07
	.byte	$19
	.byte	$C0
	.byte	$80
_cannon_up_left:
	.byte	$00
	.byte	$FF
	.byte	$1E
	.byte	$C0
	.byte	$00
	.byte	$07
	.byte	$1D
	.byte	$C0
	.byte	$08
	.byte	$FF
	.byte	$1C
	.byte	$C0
	.byte	$08
	.byte	$07
	.byte	$1B
	.byte	$C0
	.byte	$80
_cannon_left:
	.byte	$00
	.byte	$FF
	.byte	$2F
	.byte	$40
	.byte	$08
	.byte	$FF
	.byte	$1F
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$2F
	.byte	$C0
	.byte	$08
	.byte	$07
	.byte	$1F
	.byte	$C0
	.byte	$80
_cannon_down_left:
	.byte	$00
	.byte	$FF
	.byte	$1D
	.byte	$40
	.byte	$08
	.byte	$FF
	.byte	$1B
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$1E
	.byte	$40
	.byte	$08
	.byte	$07
	.byte	$1C
	.byte	$40
	.byte	$80
_cannon_down:
	.byte	$00
	.byte	$FF
	.byte	$19
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$19
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$1A
	.byte	$40
	.byte	$80
_cannon_down_right:
	.byte	$00
	.byte	$FF
	.byte	$1B
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$1C
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$1E
	.byte	$00
	.byte	$80
_cannon_right:
	.byte	$00
	.byte	$FF
	.byte	$1F
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$1F
	.byte	$80
	.byte	$08
	.byte	$07
	.byte	$2F
	.byte	$80
	.byte	$80
_cannon_up_right:
	.byte	$00
	.byte	$FF
	.byte	$1C
	.byte	$80
	.byte	$08
	.byte	$FF
	.byte	$1E
	.byte	$80
	.byte	$00
	.byte	$07
	.byte	$1B
	.byte	$80
	.byte	$08
	.byte	$07
	.byte	$1D
	.byte	$80
	.byte	$80
_grarrl_left:
	.byte	$FF
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$41
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$50
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$51
	.byte	$02
	.byte	$80
_grarrl_backfoot_step0_left:
	.byte	$FF
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$41
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$42
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$44
	.byte	$02
	.byte	$80
_grarrl_backfoot_step1_left:
	.byte	$FF
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$41
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$43
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$44
	.byte	$02
	.byte	$80
_grarrl_frontfoot_step0_left:
	.byte	$FF
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$41
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$52
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$54
	.byte	$02
	.byte	$80
_grarrl_frontfoot_step1_left:
	.byte	$FF
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$41
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$53
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$54
	.byte	$02
	.byte	$80
_grarrl_right:
	.byte	$07
	.byte	$FF
	.byte	$40
	.byte	$42
	.byte	$FF
	.byte	$FF
	.byte	$41
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$50
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$51
	.byte	$42
	.byte	$80
_grarrl_backfoot_step0_right:
	.byte	$FF
	.byte	$FF
	.byte	$41
	.byte	$42
	.byte	$07
	.byte	$FF
	.byte	$40
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$44
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$42
	.byte	$42
	.byte	$80
_grarrl_backfoot_step1_right:
	.byte	$FF
	.byte	$FF
	.byte	$41
	.byte	$42
	.byte	$07
	.byte	$FF
	.byte	$40
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$44
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$43
	.byte	$42
	.byte	$80
_grarrl_frontfoot_step0_right:
	.byte	$FF
	.byte	$FF
	.byte	$41
	.byte	$42
	.byte	$07
	.byte	$FF
	.byte	$40
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$54
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$52
	.byte	$42
	.byte	$80
_grarrl_frontfoot_step1_right:
	.byte	$FF
	.byte	$FF
	.byte	$41
	.byte	$42
	.byte	$07
	.byte	$FF
	.byte	$40
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$54
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$53
	.byte	$42
	.byte	$80
_acidblob0:
	.byte	$00
	.byte	$FF
	.byte	$28
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$28
	.byte	$43
	.byte	$80
_acidblob1:
	.byte	$00
	.byte	$FF
	.byte	$29
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$29
	.byte	$43
	.byte	$80
_acidblob2:
	.byte	$00
	.byte	$FF
	.byte	$2A
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$2A
	.byte	$43
	.byte	$80
_acidblob3:
	.byte	$00
	.byte	$FF
	.byte	$2B
	.byte	$03
	.byte	$08
	.byte	$FF
	.byte	$2B
	.byte	$43
	.byte	$80
_splyke_tornado0:
	.byte	$FF
	.byte	$FF
	.byte	$60
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$61
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$70
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$71
	.byte	$00
	.byte	$80
_splyke_tornado1:
	.byte	$FF
	.byte	$FF
	.byte	$62
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$63
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$72
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$73
	.byte	$00
	.byte	$80
_splyke_tornado2:
	.byte	$FF
	.byte	$FF
	.byte	$61
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$60
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$71
	.byte	$40
	.byte	$07
	.byte	$07
	.byte	$70
	.byte	$40
	.byte	$80
_splyke_idle_left0:
	.byte	$FF
	.byte	$FF
	.byte	$64
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$65
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$74
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$75
	.byte	$00
	.byte	$80
_splyke_idle_left1:
	.byte	$FF
	.byte	$FF
	.byte	$64
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$65
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$76
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$75
	.byte	$00
	.byte	$80
_splyke_idle_right0:
	.byte	$FF
	.byte	$FF
	.byte	$65
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$64
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$75
	.byte	$40
	.byte	$07
	.byte	$07
	.byte	$74
	.byte	$40
	.byte	$80
_splyke_idle_right1:
	.byte	$FF
	.byte	$FF
	.byte	$65
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$64
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$75
	.byte	$40
	.byte	$07
	.byte	$07
	.byte	$76
	.byte	$40
	.byte	$80
_boss_head_eye_open_mouth_closed_left:
	.byte	$FC
	.byte	$FE
	.byte	$3B
	.byte	$00
	.byte	$04
	.byte	$FE
	.byte	$3C
	.byte	$00
	.byte	$FF
	.byte	$06
	.byte	$4D
	.byte	$00
	.byte	$80
_boss_head_eye_open_mouth_closed_right:
	.byte	$0C
	.byte	$FE
	.byte	$3B
	.byte	$40
	.byte	$04
	.byte	$FE
	.byte	$3C
	.byte	$40
	.byte	$09
	.byte	$06
	.byte	$4D
	.byte	$40
	.byte	$80
_boss_head_eye_closed_mouth_closed_left:
	.byte	$FC
	.byte	$FE
	.byte	$3B
	.byte	$00
	.byte	$04
	.byte	$FE
	.byte	$3D
	.byte	$00
	.byte	$FF
	.byte	$06
	.byte	$4D
	.byte	$00
	.byte	$80
_boss_head_eye_closed_mouth_closed_right:
	.byte	$0C
	.byte	$FE
	.byte	$3B
	.byte	$40
	.byte	$04
	.byte	$FE
	.byte	$3D
	.byte	$40
	.byte	$09
	.byte	$06
	.byte	$4D
	.byte	$40
	.byte	$80
_boss_body_idle_left0:
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$02
	.byte	$80
_boss_body_idle_right0:
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4F
	.byte	$42
	.byte	$80
_boss_body_flying_left0:
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$6E
	.byte	$42
	.byte	$80
_boss_body_flying_right0:
	.byte	$08
	.byte	$00
	.byte	$5E
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$6E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$02
	.byte	$80
_boss_body_flying_left1:
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$6D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$42
	.byte	$80
_boss_body_flying_right1:
	.byte	$08
	.byte	$00
	.byte	$5E
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$6F
	.byte	$02
	.byte	$80
_boss_body_flying_left2:
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$6F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$42
	.byte	$80
_boss_body_flying_right2:
	.byte	$08
	.byte	$00
	.byte	$5E
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$6D
	.byte	$02
	.byte	$80
_boss_body_flying_left3:
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$7F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$7F
	.byte	$42
	.byte	$80
_boss_body_flying_right3:
	.byte	$08
	.byte	$00
	.byte	$5E
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$7F
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$7F
	.byte	$02
	.byte	$80
_purple_death_effect0:
	.byte	$FF
	.byte	$FF
	.byte	$2C
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$2C
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$2C
	.byte	$82
	.byte	$07
	.byte	$07
	.byte	$2C
	.byte	$C2
	.byte	$80
_purple_death_effect1:
	.byte	$FF
	.byte	$FF
	.byte	$2D
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$2D
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$2D
	.byte	$82
	.byte	$07
	.byte	$07
	.byte	$2D
	.byte	$C2
	.byte	$80
_purple_death_effect2:
	.byte	$FF
	.byte	$FF
	.byte	$2E
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$2E
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$2E
	.byte	$82
	.byte	$07
	.byte	$07
	.byte	$2E
	.byte	$C2
	.byte	$80
_splyke_death_effect0:
	.byte	$FF
	.byte	$FF
	.byte	$2C
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$2C
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$2C
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$2C
	.byte	$C0
	.byte	$80
_splyke_death_effect1:
	.byte	$FF
	.byte	$FF
	.byte	$2E
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$2E
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$2E
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$2E
	.byte	$C0
	.byte	$80
_energy_bar_0:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0A
	.byte	$01
	.byte	$80
_energy_bar_1:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0B
	.byte	$01
	.byte	$80
_energy_bar_2:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0C
	.byte	$01
	.byte	$80
_energy_bar_3:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0D
	.byte	$01
	.byte	$80
_energy_bar_4:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_5:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_6:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0C
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_7:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_8:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_9:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_a:
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0C
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_b:
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_c:
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$0C
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_d:
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_e:
	.byte	$00
	.byte	$03
	.byte	$0E
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_energy_bar_f:
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$80
_points_1:
	.byte	$00
	.byte	$E8
	.byte	$01
	.byte	$03
	.byte	$80
_points_2:
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$03
	.byte	$80
_points_3:
	.byte	$00
	.byte	$E8
	.byte	$03
	.byte	$03
	.byte	$80
_points_4:
	.byte	$00
	.byte	$E8
	.byte	$04
	.byte	$03
	.byte	$80
_points_100:
	.byte	$F8
	.byte	$E8
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$E8
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$E8
	.byte	$00
	.byte	$03
	.byte	$80
.segment	"RODATA"
.segment	"BANK5"
_valrigard_idle_sprite_lookup_table:
	.addr	_valrigard_idle_left
	.addr	_valrigard_idle_right
_valrigard_sword_swing_sprite_lookup_table:
	.addr	_valrigard_swing_left_followthrough
	.addr	_valrigard_swing_right_followthrough
	.addr	_valrigard_swing_left_followthrough
	.addr	_valrigard_swing_right_followthrough
	.addr	_valrigard_swing_left_followthrough
	.addr	_valrigard_swing_right_followthrough
	.addr	_valrigard_idle_left
	.addr	_valrigard_idle_right
	.addr	_valrigard_swing_left_high
	.addr	_valrigard_swing_right_high
	.addr	_valrigard_swing_left_mid
	.addr	_valrigard_swing_right_mid
	.addr	_valrigard_swing_left_low
	.addr	_valrigard_swing_right_low
	.addr	_valrigard_swing_left_low
	.addr	_valrigard_swing_right_low
_valrigard_dead_sprite_lookup_table:
	.addr	_valrigard_dead_left
	.addr	_valrigard_dead_right
_valrigard_flying_sprite_lookup_table:
	.addr	_valrigard_flying_left1
	.addr	_valrigard_flying_right1
	.addr	_valrigard_flying_left1
	.addr	_valrigard_flying_right1
	.addr	_valrigard_flying_left2
	.addr	_valrigard_flying_right2
	.addr	_valrigard_flying_left2
	.addr	_valrigard_flying_right2
	.addr	_valrigard_flying_left1
	.addr	_valrigard_flying_right1
	.addr	_valrigard_idle_left
	.addr	_valrigard_idle_right
	.addr	_valrigard_flying_left0
	.addr	_valrigard_flying_right0
	.addr	_valrigard_flying_left0
	.addr	_valrigard_flying_right0
_valrigard_walking_sprite_lookup_table:
	.addr	_valrigard_walking_left0
	.addr	_valrigard_walking_right0
	.addr	_valrigard_walking_left1
	.addr	_valrigard_walking_right1
	.addr	_valrigard_idle_left
	.addr	_valrigard_idle_right
	.addr	_valrigard_walking_left2
	.addr	_valrigard_walking_right2
	.addr	_valrigard_walking_left3
	.addr	_valrigard_walking_right3
	.addr	_valrigard_idle_left
	.addr	_valrigard_idle_right
_korbat_sprite_lookup_table:
	.addr	_korbat_left
	.addr	_korbat_right
	.addr	_korbat_flap1_left
	.addr	_korbat_flap1_right
	.addr	_korbat_flap2_left
	.addr	_korbat_flap2_right
	.addr	_korbat_flap3_left
	.addr	_korbat_flap3_right
	.addr	_korbat_flap4_left
	.addr	_korbat_flap4_right
	.addr	_korbat_flap5_left
	.addr	_korbat_flap5_right
	.addr	_korbat_flap6_left
	.addr	_korbat_flap6_right
	.addr	_korbat_flap6_left
	.addr	_korbat_flap6_right
	.addr	_korbat_flap6_left
	.addr	_korbat_flap6_right
	.addr	_korbat_flap5_left
	.addr	_korbat_flap5_right
	.addr	_korbat_flap4_left
	.addr	_korbat_flap4_right
	.addr	_korbat_flap3_left
	.addr	_korbat_flap3_right
	.addr	_korbat_flap2_left
	.addr	_korbat_flap2_right
	.addr	_korbat_flap1_left
	.addr	_korbat_flap1_right
	.addr	_korbat_left
	.addr	_korbat_right
	.addr	_korbat_left
	.addr	_korbat_right
_grarrl_sprite_lookup_table:
	.addr	_grarrl_left
	.addr	_grarrl_right
	.addr	_grarrl_left
	.addr	_grarrl_right
	.addr	_grarrl_backfoot_step0_left
	.addr	_grarrl_backfoot_step0_right
	.addr	_grarrl_backfoot_step0_left
	.addr	_grarrl_backfoot_step0_right
	.addr	_grarrl_backfoot_step0_left
	.addr	_grarrl_backfoot_step0_right
	.addr	_grarrl_backfoot_step0_left
	.addr	_grarrl_backfoot_step0_right
	.addr	_grarrl_backfoot_step1_left
	.addr	_grarrl_backfoot_step1_right
	.addr	_grarrl_backfoot_step1_left
	.addr	_grarrl_backfoot_step1_right
	.addr	_grarrl_left
	.addr	_grarrl_right
	.addr	_grarrl_left
	.addr	_grarrl_right
	.addr	_grarrl_frontfoot_step0_left
	.addr	_grarrl_frontfoot_step0_right
	.addr	_grarrl_frontfoot_step0_left
	.addr	_grarrl_frontfoot_step0_right
	.addr	_grarrl_frontfoot_step0_left
	.addr	_grarrl_frontfoot_step0_right
	.addr	_grarrl_frontfoot_step0_left
	.addr	_grarrl_frontfoot_step0_right
	.addr	_grarrl_frontfoot_step1_left
	.addr	_grarrl_frontfoot_step1_right
	.addr	_grarrl_frontfoot_step1_left
	.addr	_grarrl_frontfoot_step1_right
_cannon_sprite_lookup_table:
	.addr	_cannon_up
	.addr	_cannon_up_left
	.addr	_cannon_left
	.addr	_cannon_down_left
	.addr	_cannon_down
	.addr	_cannon_down_right
	.addr	_cannon_right
	.addr	_cannon_up_right
_acidblob_sprite_lookup_table:
	.addr	_acidblob0
	.addr	_acidblob3
	.addr	_acidblob0
	.addr	_acidblob1
	.addr	_acidblob2
	.addr	_acidblob1
	.addr	_acidblob0
_sun_sprite_lookup_table:
	.addr	_sun0
	.addr	_sun1
_splyke_sprite_lookup_table:
	.addr	_splyke_idle_left0
	.addr	_splyke_idle_right0
	.addr	_splyke_idle_left0
	.addr	_splyke_idle_right0
	.addr	_splyke_idle_left1
	.addr	_splyke_idle_right1
	.addr	_splyke_idle_left1
	.addr	_splyke_idle_right1
	.addr	_splyke_tornado0
	.addr	_splyke_tornado0
	.addr	_splyke_tornado1
	.addr	_splyke_tornado1
	.addr	_splyke_tornado2
	.addr	_splyke_tornado2
	.addr	_splyke_tornado1
	.addr	_splyke_tornado1
_purple_death_effect_sprite_lookup_table:
	.addr	_purple_death_effect1
	.addr	_purple_death_effect1
	.addr	_purple_death_effect0
_splyke_death_effect_sprite_lookup_table:
	.addr	_splyke_death_effect1
	.addr	_splyke_death_effect1
	.addr	_splyke_death_effect0
_energy_bar_lookup_table:
	.addr	_energy_bar_0
	.addr	_energy_bar_1
	.addr	_energy_bar_2
	.addr	_energy_bar_3
	.addr	_energy_bar_4
	.addr	_energy_bar_5
	.addr	_energy_bar_6
	.addr	_energy_bar_7
	.addr	_energy_bar_8
	.addr	_energy_bar_9
	.addr	_energy_bar_a
	.addr	_energy_bar_b
	.addr	_energy_bar_c
	.addr	_energy_bar_d
	.addr	_energy_bar_e
	.addr	_energy_bar_f
_boss_body_sprite_idle_lookup_table:
	.addr	_boss_body_idle_left0
	.addr	_boss_body_idle_right0
_boss_head_sprite_lookup_table:
	.addr	_boss_head_eye_open_mouth_closed_left
	.addr	_boss_head_eye_open_mouth_closed_right
	.addr	_boss_head_eye_closed_mouth_closed_left
	.addr	_boss_head_eye_closed_mouth_closed_right
_boss_body_sprite_flying_lookup_table:
	.addr	_boss_body_flying_left0
	.addr	_boss_body_flying_right0
	.addr	_boss_body_flying_left1
	.addr	_boss_body_flying_right1
	.addr	_boss_body_flying_left2
	.addr	_boss_body_flying_right2
	.addr	_boss_body_flying_left3
	.addr	_boss_body_flying_right3
_boss_dying_sprite_lookup_table:
	.addr	_purple_death_effect0
	.addr	_purple_death_effect1
	.addr	_purple_death_effect0
	.addr	_purple_death_effect2
_boss_magic_offset_table:
	.byte	$80
	.byte	$81
	.byte	$82
_floating_numbers_sprite_lookup_table:
	.addr	_points_1
	.addr	_points_2
	.addr	_points_3
	.addr	_points_4
	.addr	_points_100
_floating_numbers_y_offset_lookup_table:
	.byte	$00
	.byte	$FB
	.byte	$F8
	.byte	$F7
	.byte	$F5
	.byte	$F4
	.byte	$F4
	.byte	$F3
	.byte	$F2
	.byte	$F2
	.byte	$F1
	.byte	$F1
	.byte	$F1
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F1
	.byte	$F1
	.byte	$F1
	.byte	$F2
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F4
	.byte	$F5
	.byte	$F7
	.byte	$F8
	.byte	$FB
	.byte	$00
.segment	"RODATA"
.segment	"BANK0"
_level01_enemy:
	.byte	$61
	.byte	$02
	.byte	$02
	.byte	$75
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$FF
_level01:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$BE
	.byte	$95
	.byte	$22
	.byte	$A4
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$0F
	.byte	$04
	.byte	$07
	.byte	$0F
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$83
	.byte	$0F
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$1E
	.byte	$08
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$2A
	.byte	$0F
	.byte	$02
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$0F
	.byte	$01
	.byte	$15
	.byte	$02
	.byte	$09
	.byte	$18
	.byte	$01
	.byte	$0F
	.byte	$02
	.byte	$2C
	.byte	$2C
	.byte	$26
	.byte	$24
	.byte	$27
	.byte	$02
	.byte	$0A
	.byte	$58
	.byte	$03
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$0B
	.byte	$83
	.byte	$02
	.byte	$03
	.byte	$58
	.byte	$0F
	.byte	$E1
	.byte	$0B
	.byte	$1D
	.byte	$0B
	.byte	$D8
	.byte	$2A
	.byte	$1C
	.byte	$1D
	.byte	$0F
	.byte	$41
	.byte	$02
	.byte	$09
	.byte	$78
	.byte	$1E
	.byte	$1F
	.byte	$0F
	.byte	$41
	.byte	$02
	.byte	$0C
	.byte	$88
	.byte	$2C
	.byte	$0B
	.byte	$36
	.byte	$02
	.byte	$06
	.byte	$38
	.byte	$0B
	.byte	$24
	.byte	$0B
	.byte	$E7
	.byte	$02
	.byte	$05
	.byte	$18
	.byte	$0B
	.byte	$24
	.byte	$0B
	.byte	$E7
	.byte	$02
	.byte	$06
	.byte	$88
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$02
	.byte	$0C
	.byte	$88
	.byte	$2C
	.byte	$0F
	.byte	$41
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$0B
	.byte	$83
	.byte	$0B
	.byte	$9B
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$26
	.byte	$27
	.byte	$02
	.byte	$0C
	.byte	$18
	.byte	$02
	.byte	$0B
	.byte	$38
	.byte	$0B
	.byte	$E8
	.byte	$02
	.byte	$17
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$06
	.byte	$F6
	.byte	$02
	.byte	$3D
	.byte	$68
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$02
	.byte	$03
	.byte	$CD
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$02
	.byte	$03
	.byte	$CD
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$28
	.byte	$16
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$F8
	.byte	$05
	.byte	$02
	.byte	$25
	.byte	$F8
	.byte	$25
	.byte	$0B
	.byte	$F6
	.byte	$2C
	.byte	$08
	.byte	$0B
	.byte	$C8
	.byte	$26
	.byte	$24
	.byte	$02
	.byte	$04
	.byte	$B6
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$0F
	.byte	$02
	.byte	$09
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$0F
	.byte	$04
	.byte	$15
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$0A
	.byte	$02
	.byte	$0C
	.byte	$18
	.byte	$0B
	.byte	$07
	.byte	$28
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$0B
	.byte	$56
	.byte	$02
	.byte	$07
	.byte	$18
	.byte	$07
	.byte	$07
	.byte	$0B
	.byte	$96
	.byte	$2C
	.byte	$0C
	.byte	$04
	.byte	$02
	.byte	$4B
	.byte	$78
	.byte	$0C
	.byte	$04
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$0B
	.byte	$47
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$26
	.byte	$27
	.byte	$22
	.byte	$23
	.byte	$0B
	.byte	$87
	.byte	$0B
	.byte	$C8
	.byte	$02
	.byte	$04
	.byte	$88
	.byte	$0B
	.byte	$47
	.byte	$0B
	.byte	$C8
.segment	"RODATA"
.segment	"BANK0"
_level02_enemy:
	.byte	$8D
	.byte	$02
	.byte	$02
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$02
	.byte	$71
	.byte	$02
	.byte	$02
	.byte	$66
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$01
	.byte	$02
	.byte	$5D
	.byte	$00
	.byte	$02
	.byte	$FF
_level02:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$31
	.byte	$7F
	.byte	$32
	.byte	$27
	.byte	$EA
	.byte	$01
	.byte	$09
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$04
	.byte	$07
	.byte	$12
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$12
	.byte	$01
	.byte	$12
	.byte	$83
	.byte	$12
	.byte	$04
	.byte	$0E
	.byte	$10
	.byte	$1D
	.byte	$08
	.byte	$10
	.byte	$13
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$11
	.byte	$85
	.byte	$0C
	.byte	$0D
	.byte	$0D
	.byte	$11
	.byte	$93
	.byte	$06
	.byte	$18
	.byte	$18
	.byte	$2C
	.byte	$2C
	.byte	$1C
	.byte	$1D
	.byte	$11
	.byte	$55
	.byte	$11
	.byte	$98
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$11
	.byte	$05
	.byte	$16
	.byte	$11
	.byte	$E8
	.byte	$2A
	.byte	$12
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$18
	.byte	$10
	.byte	$10
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$2A
	.byte	$1C
	.byte	$1D
	.byte	$11
	.byte	$08
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$48
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$11
	.byte	$F8
	.byte	$10
	.byte	$06
	.byte	$78
	.byte	$01
	.byte	$10
	.byte	$06
	.byte	$75
	.byte	$10
	.byte	$08
	.byte	$88
	.byte	$14
	.byte	$15
	.byte	$10
	.byte	$0C
	.byte	$08
	.byte	$11
	.byte	$98
	.byte	$10
	.byte	$05
	.byte	$38
	.byte	$10
	.byte	$08
	.byte	$A5
	.byte	$10
	.byte	$06
	.byte	$88
	.byte	$0D
	.byte	$15
	.byte	$00
	.byte	$10
	.byte	$09
	.byte	$38
	.byte	$01
	.byte	$01
	.byte	$2C
	.byte	$10
	.byte	$02
	.byte	$5B
	.byte	$10
	.byte	$09
	.byte	$88
	.byte	$2C
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$0B
	.byte	$08
	.byte	$10
	.byte	$0B
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$26
	.byte	$27
	.byte	$10
	.byte	$0A
	.byte	$48
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$12
	.byte	$61
	.byte	$08
	.byte	$10
	.byte	$03
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$68
	.byte	$11
	.byte	$08
	.byte	$25
	.byte	$10
	.byte	$0D
	.byte	$08
	.byte	$2F
	.byte	$02
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$2A
	.byte	$2A
	.byte	$0E
	.byte	$10
	.byte	$14
	.byte	$08
	.byte	$10
	.byte	$05
	.byte	$B8
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$48
	.byte	$26
	.byte	$10
	.byte	$09
	.byte	$B8
	.byte	$07
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$14
	.byte	$0A
	.byte	$10
	.byte	$08
	.byte	$48
	.byte	$1C
	.byte	$1D
	.byte	$12
	.byte	$64
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$12
	.byte	$64
	.byte	$10
	.byte	$08
	.byte	$E8
	.byte	$1C
	.byte	$1D
	.byte	$14
	.byte	$12
	.byte	$C1
	.byte	$10
	.byte	$27
	.byte	$08
	.byte	$28
	.byte	$1E
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$6B
	.byte	$11
	.byte	$88
	.byte	$29
	.byte	$12
	.byte	$E2
	.byte	$12
	.byte	$81
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$0D
	.byte	$05
	.byte	$12
	.byte	$62
	.byte	$10
	.byte	$05
	.byte	$28
	.byte	$0B
	.byte	$07
	.byte	$0A
	.byte	$01
	.byte	$12
	.byte	$63
	.byte	$10
	.byte	$28
	.byte	$48
	.byte	$11
	.byte	$AA
	.byte	$11
	.byte	$E8
	.byte	$04
	.byte	$11
	.byte	$23
	.byte	$11
	.byte	$25
	.byte	$0D
	.byte	$15
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$12
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$09
	.byte	$18
	.byte	$10
	.byte	$07
	.byte	$07
	.byte	$10
	.byte	$07
	.byte	$08
	.byte	$11
	.byte	$87
	.byte	$16
	.byte	$10
	.byte	$07
	.byte	$08
	.byte	$0A
	.byte	$2C
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$10
	.byte	$02
	.byte	$59
	.byte	$22
	.byte	$23
	.byte	$10
	.byte	$09
	.byte	$28
	.byte	$10
	.byte	$03
	.byte	$59
	.byte	$12
	.byte	$02
	.byte	$11
	.byte	$52
	.byte	$2C
.segment	"RODATA"
.segment	"BANK0"
_level03_enemy:
	.byte	$3A
	.byte	$02
	.byte	$01
	.byte	$7A
	.byte	$02
	.byte	$01
	.byte	$7D
	.byte	$02
	.byte	$02
	.byte	$91
	.byte	$01
	.byte	$01
	.byte	$FF
_level03:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$EC
	.byte	$F3
	.byte	$23
	.byte	$9B
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$04
	.byte	$04
	.byte	$12
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$12
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$07
	.byte	$10
	.byte	$1E
	.byte	$08
	.byte	$07
	.byte	$12
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$06
	.byte	$2A
	.byte	$12
	.byte	$05
	.byte	$08
	.byte	$10
	.byte	$0B
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$12
	.byte	$A2
	.byte	$2C
	.byte	$2C
	.byte	$18
	.byte	$18
	.byte	$10
	.byte	$0B
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$10
	.byte	$06
	.byte	$38
	.byte	$11
	.byte	$D8
	.byte	$2C
	.byte	$2C
	.byte	$10
	.byte	$0C
	.byte	$28
	.byte	$10
	.byte	$19
	.byte	$08
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$01
	.byte	$2C
	.byte	$1C
	.byte	$1D
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$2A
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$10
	.byte	$09
	.byte	$28
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$0F
	.byte	$10
	.byte	$0A
	.byte	$48
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$01
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$1B
	.byte	$58
	.byte	$11
	.byte	$A5
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$26
	.byte	$27
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$24
	.byte	$12
	.byte	$01
	.byte	$27
	.byte	$10
	.byte	$07
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$12
	.byte	$02
	.byte	$09
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$23
	.byte	$25
	.byte	$0A
	.byte	$10
	.byte	$08
	.byte	$28
	.byte	$16
	.byte	$10
	.byte	$1B
	.byte	$D8
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$88
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$48
	.byte	$09
	.byte	$1C
	.byte	$1D
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$10
	.byte	$28
	.byte	$88
	.byte	$0A
	.byte	$1E
	.byte	$1F
	.byte	$0B
	.byte	$10
	.byte	$29
	.byte	$98
	.byte	$0A
	.byte	$12
	.byte	$E2
	.byte	$11
	.byte	$09
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$2A
	.byte	$10
	.byte	$03
	.byte	$C9
	.byte	$0B
	.byte	$10
	.byte	$28
	.byte	$98
	.byte	$2C
	.byte	$0F
	.byte	$11
	.byte	$49
	.byte	$10
	.byte	$0A
	.byte	$68
	.byte	$11
	.byte	$49
	.byte	$10
	.byte	$06
	.byte	$58
	.byte	$0D
	.byte	$15
	.byte	$11
	.byte	$49
	.byte	$10
	.byte	$2A
	.byte	$48
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$10
	.byte	$28
	.byte	$48
	.byte	$12
	.byte	$E2
	.byte	$1E
	.byte	$1F
	.byte	$10
	.byte	$07
	.byte	$88
	.byte	$11
	.byte	$69
	.byte	$14
	.byte	$0D
	.byte	$10
	.byte	$07
	.byte	$88
	.byte	$0A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$10
	.byte	$08
	.byte	$68
	.byte	$10
	.byte	$04
	.byte	$C7
	.byte	$10
	.byte	$47
	.byte	$08
	.byte	$10
	.byte	$0D
	.byte	$D8
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$2C
	.byte	$0C
	.byte	$10
	.byte	$08
	.byte	$C8
	.byte	$06
	.byte	$22
	.byte	$23
	.byte	$11
	.byte	$16
	.byte	$10
	.byte	$49
	.byte	$68
	.byte	$10
	.byte	$22
	.byte	$39
	.byte	$10
	.byte	$06
	.byte	$D8
.segment	"RODATA"
.segment	"BANK0"
_level04_enemy:
	.byte	$49
	.byte	$02
	.byte	$02
	.byte	$89
	.byte	$02
	.byte	$02
	.byte	$75
	.byte	$02
	.byte	$02
	.byte	$45
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$01
	.byte	$02
	.byte	$88
	.byte	$01
	.byte	$01
	.byte	$37
	.byte	$01
	.byte	$01
	.byte	$FF
_level04:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$1A
	.byte	$F6
	.byte	$1F
	.byte	$B7
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$15
	.byte	$04
	.byte	$04
	.byte	$15
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$15
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$07
	.byte	$10
	.byte	$1D
	.byte	$08
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$07
	.byte	$15
	.byte	$01
	.byte	$10
	.byte	$09
	.byte	$08
	.byte	$15
	.byte	$83
	.byte	$08
	.byte	$04
	.byte	$11
	.byte	$4F
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$15
	.byte	$C2
	.byte	$0E
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$16
	.byte	$2C
	.byte	$16
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$10
	.byte	$0C
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$10
	.byte	$0B
	.byte	$08
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$66
	.byte	$10
	.byte	$0C
	.byte	$08
	.byte	$0A
	.byte	$10
	.byte	$0C
	.byte	$08
	.byte	$11
	.byte	$39
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0B
	.byte	$11
	.byte	$D8
	.byte	$10
	.byte	$07
	.byte	$38
	.byte	$2A
	.byte	$10
	.byte	$06
	.byte	$19
	.byte	$10
	.byte	$15
	.byte	$08
	.byte	$14
	.byte	$10
	.byte	$0D
	.byte	$58
	.byte	$01
	.byte	$11
	.byte	$F9
	.byte	$10
	.byte	$07
	.byte	$08
	.byte	$10
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$09
	.byte	$10
	.byte	$03
	.byte	$E6
	.byte	$10
	.byte	$08
	.byte	$D8
	.byte	$15
	.byte	$02
	.byte	$30
	.byte	$10
	.byte	$0D
	.byte	$08
	.byte	$10
	.byte	$07
	.byte	$88
	.byte	$12
	.byte	$2E
	.byte	$15
	.byte	$03
	.byte	$13
	.byte	$10
	.byte	$07
	.byte	$D8
	.byte	$09
	.byte	$15
	.byte	$C1
	.byte	$0C
	.byte	$05
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$06
	.byte	$A8
	.byte	$0A
	.byte	$2C
	.byte	$16
	.byte	$2C
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$0D
	.byte	$10
	.byte	$25
	.byte	$38
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$0C
	.byte	$38
	.byte	$2C
	.byte	$2C
	.byte	$26
	.byte	$27
	.byte	$10
	.byte	$0C
	.byte	$08
	.byte	$11
	.byte	$35
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$03
	.byte	$0B
	.byte	$07
	.byte	$0A
	.byte	$02
	.byte	$10
	.byte	$0A
	.byte	$18
	.byte	$01
	.byte	$11
	.byte	$FB
	.byte	$10
	.byte	$15
	.byte	$88
	.byte	$10
	.byte	$0F
	.byte	$08
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$10
	.byte	$0A
	.byte	$08
	.byte	$26
	.byte	$24
	.byte	$24
	.byte	$10
	.byte	$03
	.byte	$69
	.byte	$11
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$15
	.byte	$04
	.byte	$09
	.byte	$10
	.byte	$06
	.byte	$08
	.byte	$10
	.byte	$22
	.byte	$F8
	.byte	$15
	.byte	$01
	.byte	$0A
	.byte	$10
	.byte	$09
	.byte	$48
	.byte	$10
	.byte	$05
	.byte	$39
	.byte	$10
	.byte	$08
	.byte	$58
	.byte	$1E
	.byte	$1F
	.byte	$10
	.byte	$0A
	.byte	$48
	.byte	$0C
	.byte	$11
	.byte	$FA
	.byte	$05
	.byte	$10
	.byte	$46
	.byte	$18
	.byte	$10
	.byte	$22
	.byte	$36
	.byte	$15
	.byte	$02
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$11
	.byte	$76
	.byte	$10
	.byte	$08
	.byte	$28
	.byte	$22
	.byte	$23
	.byte	$2C
	.byte	$2C
	.byte	$29
	.byte	$15
	.byte	$41
	.byte	$10
	.byte	$0B
	.byte	$78
	.byte	$10
	.byte	$06
	.byte	$38
.segment	"RODATA"
.segment	"BANK0"
_level05_enemy:
	.byte	$88
	.byte	$02
	.byte	$01
	.byte	$59
	.byte	$02
	.byte	$05
	.byte	$81
	.byte	$02
	.byte	$01
	.byte	$4A
	.byte	$01
	.byte	$01
	.byte	$47
	.byte	$01
	.byte	$01
	.byte	$69
	.byte	$01
	.byte	$05
	.byte	$70
	.byte	$01
	.byte	$01
	.byte	$FF
_level05:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DA
	.byte	$B1
	.byte	$0E
	.byte	$15
	.byte	$47
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$0C
	.byte	$04
	.byte	$04
	.byte	$0C
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$07
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$01
	.byte	$0C
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$2A
	.byte	$0C
	.byte	$01
	.byte	$0B
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$15
	.byte	$2A
	.byte	$14
	.byte	$0D
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$0A
	.byte	$0C
	.byte	$E2
	.byte	$03
	.byte	$08
	.byte	$38
	.byte	$09
	.byte	$87
	.byte	$09
	.byte	$49
	.byte	$09
	.byte	$C8
	.byte	$0C
	.byte	$A3
	.byte	$0C
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$0F
	.byte	$03
	.byte	$0D
	.byte	$08
	.byte	$01
	.byte	$03
	.byte	$0D
	.byte	$08
	.byte	$03
	.byte	$0E
	.byte	$28
	.byte	$09
	.byte	$EA
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$09
	.byte	$6A
	.byte	$03
	.byte	$1A
	.byte	$28
	.byte	$03
	.byte	$0D
	.byte	$08
	.byte	$0F
	.byte	$00
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$01
	.byte	$03
	.byte	$0E
	.byte	$48
	.byte	$03
	.byte	$1B
	.byte	$38
	.byte	$03
	.byte	$04
	.byte	$A7
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$A7
	.byte	$0F
	.byte	$03
	.byte	$09
	.byte	$28
	.byte	$03
	.byte	$22
	.byte	$38
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$2A
	.byte	$03
	.byte	$0A
	.byte	$48
	.byte	$2A
	.byte	$1E
	.byte	$1F
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$3B
	.byte	$08
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$03
	.byte	$0B
	.byte	$88
	.byte	$1E
	.byte	$1F
	.byte	$03
	.byte	$07
	.byte	$18
	.byte	$09
	.byte	$54
	.byte	$03
	.byte	$0B
	.byte	$28
	.byte	$09
	.byte	$14
	.byte	$09
	.byte	$7B
	.byte	$03
	.byte	$09
	.byte	$28
	.byte	$00
	.byte	$09
	.byte	$3B
	.byte	$03
	.byte	$0B
	.byte	$F8
	.byte	$03
	.byte	$1B
	.byte	$C8
	.byte	$03
	.byte	$24
	.byte	$77
	.byte	$03
	.byte	$39
	.byte	$08
	.byte	$20
	.byte	$21
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$0C
	.byte	$05
	.byte	$09
	.byte	$F2
.segment	"RODATA"
.segment	"BANK0"
_level06_enemy:
	.byte	$4A
	.byte	$02
	.byte	$01
	.byte	$37
	.byte	$02
	.byte	$01
	.byte	$75
	.byte	$02
	.byte	$06
	.byte	$44
	.byte	$02
	.byte	$01
	.byte	$70
	.byte	$02
	.byte	$02
	.byte	$34
	.byte	$01
	.byte	$01
	.byte	$52
	.byte	$01
	.byte	$01
	.byte	$61
	.byte	$01
	.byte	$01
	.byte	$70
	.byte	$01
	.byte	$01
	.byte	$FF
_level06:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E8
	.byte	$E7
	.byte	$02
	.byte	$14
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$0B
	.byte	$0F
	.byte	$04
	.byte	$04
	.byte	$0F
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$0F
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$03
	.byte	$1D
	.byte	$08
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$08
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$06
	.byte	$17
	.byte	$19
	.byte	$2A
	.byte	$2C
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$09
	.byte	$18
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$0F
	.byte	$C1
	.byte	$0B
	.byte	$88
	.byte	$0F
	.byte	$83
	.byte	$0F
	.byte	$04
	.byte	$0E
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$0D
	.byte	$15
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$03
	.byte	$1B
	.byte	$08
	.byte	$0B
	.byte	$08
	.byte	$2F
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$27
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$07
	.byte	$0F
	.byte	$02
	.byte	$0D
	.byte	$0D
	.byte	$07
	.byte	$15
	.byte	$03
	.byte	$16
	.byte	$78
	.byte	$28
	.byte	$16
	.byte	$28
	.byte	$03
	.byte	$0F
	.byte	$98
	.byte	$26
	.byte	$27
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$0B
	.byte	$42
	.byte	$26
	.byte	$24
	.byte	$24
	.byte	$0F
	.byte	$C1
	.byte	$03
	.byte	$07
	.byte	$98
	.byte	$0F
	.byte	$02
	.byte	$09
	.byte	$03
	.byte	$05
	.byte	$23
	.byte	$03
	.byte	$25
	.byte	$67
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$0A
	.byte	$03
	.byte	$05
	.byte	$58
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$6A
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$0F
	.byte	$42
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$0C
	.byte	$03
	.byte	$03
	.byte	$4B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$2A
	.byte	$C8
	.byte	$03
	.byte	$1C
	.byte	$08
	.byte	$0B
	.byte	$08
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$03
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$6D
	.byte	$0B
	.byte	$08
	.byte	$20
	.byte	$21
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$22
	.byte	$23
	.byte	$0B
	.byte	$48
	.byte	$1A
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$0F
	.byte	$83
	.byte	$03
	.byte	$02
	.byte	$CB
	.byte	$2C
	.byte	$2C
.segment	"RODATA"
.segment	"BANK0"
_level07_enemy:
	.byte	$AD
	.byte	$02
	.byte	$02
	.byte	$56
	.byte	$02
	.byte	$06
	.byte	$52
	.byte	$02
	.byte	$06
	.byte	$30
	.byte	$02
	.byte	$02
	.byte	$9D
	.byte	$01
	.byte	$06
	.byte	$2B
	.byte	$01
	.byte	$02
	.byte	$A6
	.byte	$01
	.byte	$05
	.byte	$86
	.byte	$01
	.byte	$01
	.byte	$67
	.byte	$01
	.byte	$02
	.byte	$27
	.byte	$01
	.byte	$02
	.byte	$24
	.byte	$01
	.byte	$01
	.byte	$42
	.byte	$01
	.byte	$02
	.byte	$4C
	.byte	$00
	.byte	$05
	.byte	$5C
	.byte	$00
	.byte	$05
	.byte	$6C
	.byte	$00
	.byte	$05
	.byte	$6A
	.byte	$00
	.byte	$06
	.byte	$4A
	.byte	$00
	.byte	$06
	.byte	$69
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$FF
_level07:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$2F
	.byte	$2A
	.byte	$28
	.byte	$9A
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$1E
	.byte	$08
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$88
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$88
	.byte	$1C
	.byte	$1D
	.byte	$2C
	.byte	$2C
	.byte	$03
	.byte	$62
	.byte	$17
	.byte	$19
	.byte	$02
	.byte	$C8
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$03
	.byte	$62
	.byte	$18
	.byte	$18
	.byte	$02
	.byte	$C8
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$06
	.byte	$38
	.byte	$30
	.byte	$03
	.byte	$C1
	.byte	$0B
	.byte	$01
	.byte	$16
	.byte	$48
	.byte	$04
	.byte	$02
	.byte	$62
	.byte	$03
	.byte	$02
	.byte	$09
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$7A
	.byte	$0A
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$1C
	.byte	$1D
	.byte	$2A
	.byte	$2A
	.byte	$01
	.byte	$02
	.byte	$6A
	.byte	$02
	.byte	$C8
	.byte	$0A
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$2A
	.byte	$2A
	.byte	$01
	.byte	$02
	.byte	$6A
	.byte	$01
	.byte	$06
	.byte	$68
	.byte	$2C
	.byte	$0C
	.byte	$02
	.byte	$FA
	.byte	$01
	.byte	$07
	.byte	$58
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$07
	.byte	$C8
	.byte	$06
	.byte	$2C
	.byte	$02
	.byte	$77
	.byte	$2A
	.byte	$01
	.byte	$08
	.byte	$78
	.byte	$28
	.byte	$1E
	.byte	$1F
	.byte	$28
	.byte	$01
	.byte	$0A
	.byte	$C8
	.byte	$01
	.byte	$1B
	.byte	$88
	.byte	$01
	.byte	$29
	.byte	$08
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$01
	.byte	$2F
	.byte	$08
	.byte	$28
	.byte	$2C
	.byte	$01
	.byte	$05
	.byte	$47
	.byte	$02
	.byte	$C8
	.byte	$08
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$1C
	.byte	$1D
	.byte	$01
	.byte	$02
	.byte	$A7
	.byte	$02
	.byte	$C8
	.byte	$06
	.byte	$2A
	.byte	$01
	.byte	$02
	.byte	$A5
	.byte	$01
	.byte	$02
	.byte	$6C
	.byte	$28
	.byte	$01
	.byte	$0A
	.byte	$38
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$01
	.byte	$05
	.byte	$98
	.byte	$02
	.byte	$B9
	.byte	$02
	.byte	$1E
	.byte	$2A
	.byte	$02
	.byte	$98
	.byte	$04
	.byte	$02
	.byte	$11
	.byte	$0D
	.byte	$15
	.byte	$01
	.byte	$09
	.byte	$58
	.byte	$02
	.byte	$52
	.byte	$01
	.byte	$0A
	.byte	$98
	.byte	$02
	.byte	$58
	.byte	$02
	.byte	$DC
	.byte	$01
	.byte	$08
	.byte	$48
	.byte	$02
	.byte	$7B
	.byte	$28
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$25
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$01
	.byte	$07
	.byte	$58
	.byte	$26
	.byte	$24
	.byte	$27
	.byte	$01
	.byte	$11
	.byte	$D8
	.byte	$01
	.byte	$07
	.byte	$38
	.byte	$01
	.byte	$22
	.byte	$21
	.byte	$01
	.byte	$02
	.byte	$D5
	.byte	$01
	.byte	$07
	.byte	$18
	.byte	$04
	.byte	$02
	.byte	$C5
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$02
	.byte	$BE
	.byte	$2C
	.byte	$29
	.byte	$01
	.byte	$0A
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$16
	.byte	$02
	.byte	$37
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$01
	.byte	$03
	.byte	$FB
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$29
	.byte	$2C
	.byte	$22
	.byte	$23
	.byte	$01
	.byte	$0F
	.byte	$68
	.byte	$01
	.byte	$27
	.byte	$98
.segment	"RODATA"
.segment	"BANK0"
_level08_enemy:
	.byte	$4A
	.byte	$02
	.byte	$04
	.byte	$7A
	.byte	$02
	.byte	$04
	.byte	$45
	.byte	$02
	.byte	$04
	.byte	$75
	.byte	$02
	.byte	$04
	.byte	$34
	.byte	$02
	.byte	$02
	.byte	$94
	.byte	$02
	.byte	$02
	.byte	$3C
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$01
	.byte	$04
	.byte	$66
	.byte	$01
	.byte	$04
	.byte	$19
	.byte	$01
	.byte	$01
	.byte	$A8
	.byte	$01
	.byte	$01
	.byte	$6E
	.byte	$00
	.byte	$04
	.byte	$5C
	.byte	$00
	.byte	$06
	.byte	$7C
	.byte	$00
	.byte	$06
	.byte	$FF
_level08:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BF
	.byte	$C0
	.byte	$5B
	.byte	$11
	.byte	$6E
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$07
	.byte	$09
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$09
	.byte	$01
	.byte	$09
	.byte	$83
	.byte	$09
	.byte	$04
	.byte	$0E
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$03
	.byte	$1B
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$03
	.byte	$1C
	.byte	$48
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$09
	.byte	$01
	.byte	$08
	.byte	$2D
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$61
	.byte	$03
	.byte	$1A
	.byte	$38
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$16
	.byte	$03
	.byte	$0D
	.byte	$08
	.byte	$03
	.byte	$0D
	.byte	$18
	.byte	$03
	.byte	$0D
	.byte	$38
	.byte	$14
	.byte	$05
	.byte	$0D
	.byte	$05
	.byte	$03
	.byte	$09
	.byte	$68
	.byte	$2C
	.byte	$01
	.byte	$30
	.byte	$2C
	.byte	$30
	.byte	$03
	.byte	$1B
	.byte	$68
	.byte	$03
	.byte	$1C
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$09
	.byte	$E2
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$25
	.byte	$08
	.byte	$03
	.byte	$25
	.byte	$07
	.byte	$14
	.byte	$0D
	.byte	$03
	.byte	$1C
	.byte	$38
	.byte	$08
	.byte	$C8
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$2F
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$0B
	.byte	$0D
	.byte	$0D
	.byte	$0A
	.byte	$03
	.byte	$1D
	.byte	$88
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$14
	.byte	$03
	.byte	$03
	.byte	$79
	.byte	$09
	.byte	$A1
	.byte	$03
	.byte	$06
	.byte	$18
	.byte	$03
	.byte	$22
	.byte	$14
	.byte	$09
	.byte	$82
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$08
	.byte	$87
	.byte	$08
	.byte	$49
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$16
	.byte	$16
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$03
	.byte	$0E
	.byte	$28
	.byte	$03
	.byte	$0F
	.byte	$48
	.byte	$03
	.byte	$0D
	.byte	$68
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$22
	.byte	$23
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$07
	.byte	$08
	.byte	$B3
.segment	"RODATA"
.segment	"BANK0"
_level09_enemy:
	.byte	$43
	.byte	$05
	.byte	$01
	.byte	$65
	.byte	$04
	.byte	$06
	.byte	$82
	.byte	$04
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$06
	.byte	$5B
	.byte	$03
	.byte	$01
	.byte	$6A
	.byte	$03
	.byte	$01
	.byte	$13
	.byte	$03
	.byte	$04
	.byte	$A3
	.byte	$03
	.byte	$04
	.byte	$6B
	.byte	$02
	.byte	$05
	.byte	$93
	.byte	$02
	.byte	$02
	.byte	$3E
	.byte	$01
	.byte	$05
	.byte	$4E
	.byte	$01
	.byte	$05
	.byte	$6E
	.byte	$01
	.byte	$05
	.byte	$7E
	.byte	$01
	.byte	$05
	.byte	$9A
	.byte	$01
	.byte	$02
	.byte	$45
	.byte	$01
	.byte	$06
	.byte	$FF
_level09:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$C1
	.byte	$76
	.byte	$AE
	.byte	$3B
	.byte	$E3
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$1A
	.byte	$1B
	.byte	$04
	.byte	$0D
	.byte	$1B
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$1B
	.byte	$01
	.byte	$1B
	.byte	$83
	.byte	$1B
	.byte	$04
	.byte	$0E
	.byte	$03
	.byte	$1F
	.byte	$08
	.byte	$03
	.byte	$16
	.byte	$08
	.byte	$29
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$15
	.byte	$2A
	.byte	$2A
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$14
	.byte	$09
	.byte	$1A
	.byte	$14
	.byte	$2A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$2C
	.byte	$0E
	.byte	$17
	.byte	$19
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$04
	.byte	$15
	.byte	$1A
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$0B
	.byte	$18
	.byte	$0B
	.byte	$0D
	.byte	$05
	.byte	$06
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$0B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$28
	.byte	$26
	.byte	$27
	.byte	$03
	.byte	$0A
	.byte	$38
	.byte	$28
	.byte	$26
	.byte	$24
	.byte	$24
	.byte	$03
	.byte	$09
	.byte	$38
	.byte	$1A
	.byte	$47
	.byte	$14
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$2C
	.byte	$1A
	.byte	$07
	.byte	$03
	.byte	$09
	.byte	$18
	.byte	$04
	.byte	$03
	.byte	$22
	.byte	$42
	.byte	$15
	.byte	$24
	.byte	$0B
	.byte	$03
	.byte	$27
	.byte	$48
	.byte	$1A
	.byte	$97
	.byte	$24
	.byte	$27
	.byte	$03
	.byte	$07
	.byte	$B8
	.byte	$1A
	.byte	$87
	.byte	$1A
	.byte	$89
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$1A
	.byte	$6B
	.byte	$03
	.byte	$17
	.byte	$E8
	.byte	$2F
	.byte	$1B
	.byte	$23
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$25
	.byte	$98
	.byte	$0E
	.byte	$00
	.byte	$1B
	.byte	$22
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$0B
	.byte	$0D
	.byte	$07
	.byte	$1B
	.byte	$22
	.byte	$07
	.byte	$07
	.byte	$03
	.byte	$3D
	.byte	$B8
	.byte	$03
	.byte	$0A
	.byte	$78
	.byte	$15
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$14
	.byte	$1A
	.byte	$58
	.byte	$05
	.byte	$03
	.byte	$4D
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$28
	.byte	$03
	.byte	$2B
	.byte	$58
	.byte	$1B
	.byte	$01
	.byte	$30
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$14
	.byte	$03
	.byte	$02
	.byte	$54
	.byte	$03
	.byte	$1B
	.byte	$88
	.byte	$2C
	.byte	$14
	.byte	$0D
	.byte	$09
	.byte	$03
	.byte	$0D
	.byte	$38
	.byte	$03
	.byte	$0E
	.byte	$48
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$08
	.byte	$1B
	.byte	$C1
	.byte	$1A
	.byte	$93
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$08
	.byte	$1B
	.byte	$E2
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$2C
	.byte	$0B
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$1A
	.byte	$42
	.byte	$03
	.byte	$26
	.byte	$28
	.byte	$04
	.byte	$07
	.byte	$1B
	.byte	$01
	.byte	$0A
	.byte	$2C
	.byte	$14
	.byte	$03
	.byte	$3D
	.byte	$28
	.byte	$2C
	.byte	$03
	.byte	$05
	.byte	$78
	.byte	$1A
	.byte	$08
	.byte	$12
	.byte	$13
	.byte	$03
	.byte	$04
	.byte	$AC
	.byte	$03
	.byte	$14
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$1B
	.byte	$C2
	.byte	$10
	.byte	$2D
	.byte	$11
	.byte	$03
	.byte	$26
	.byte	$58
	.byte	$03
	.byte	$06
	.byte	$F7
	.byte	$03
	.byte	$3C
	.byte	$88
	.byte	$1A
	.byte	$C8
	.byte	$12
	.byte	$2E
	.byte	$1B
	.byte	$01
	.byte	$13
	.byte	$03
	.byte	$7D
	.byte	$18
	.byte	$03
	.byte	$2A
	.byte	$A8
	.byte	$03
	.byte	$04
	.byte	$6B
	.byte	$03
	.byte	$1B
	.byte	$28
	.byte	$14
	.byte	$15
	.byte	$03
	.byte	$14
	.byte	$18
	.byte	$1B
	.byte	$83
	.byte	$03
	.byte	$0E
	.byte	$28
	.byte	$14
	.byte	$03
	.byte	$5A
	.byte	$18
	.byte	$03
	.byte	$0D
	.byte	$08
	.byte	$03
	.byte	$04
	.byte	$F8
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$1A
	.byte	$C8
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$06
	.byte	$09
	.byte	$1A
	.byte	$C8
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$1A
	.byte	$4B
	.byte	$03
	.byte	$0A
	.byte	$48
	.byte	$0F
	.byte	$03
	.byte	$37
	.byte	$58
	.byte	$2C
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$03
	.byte	$1A
	.byte	$78
	.byte	$1A
	.byte	$C4
	.byte	$2C
	.byte	$03
	.byte	$46
	.byte	$28
	.byte	$03
	.byte	$07
	.byte	$E8
	.byte	$03
	.byte	$9D
	.byte	$D8
	.byte	$2C
	.byte	$14
	.byte	$1A
	.byte	$E8
	.byte	$00
	.byte	$1B
	.byte	$04
	.byte	$03
	.byte	$06
	.byte	$18
	.byte	$03
	.byte	$43
	.byte	$78
	.byte	$03
	.byte	$63
	.byte	$29
	.byte	$25
	.byte	$03
	.byte	$06
	.byte	$C8
	.byte	$0A
	.byte	$1A
	.byte	$A7
	.byte	$26
	.byte	$24
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$03
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$1A
	.byte	$C8
	.byte	$06
	.byte	$2C
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$03
	.byte	$82
	.byte	$3B
	.byte	$03
	.byte	$05
	.byte	$18
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$22
	.byte	$23
	.byte	$1A
	.byte	$87
	.byte	$1A
	.byte	$C8
	.byte	$03
	.byte	$02
	.byte	$58
	.byte	$1B
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$78
.segment	"RODATA"
.segment	"BANK0"
_level10_enemy:
	.byte	$49
	.byte	$02
	.byte	$04
	.byte	$73
	.byte	$02
	.byte	$05
	.byte	$24
	.byte	$02
	.byte	$06
	.byte	$71
	.byte	$02
	.byte	$06
	.byte	$91
	.byte	$02
	.byte	$02
	.byte	$2A
	.byte	$01
	.byte	$06
	.byte	$9C
	.byte	$00
	.byte	$01
	.byte	$FF
_level10:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DF
	.byte	$E7
	.byte	$EA
	.byte	$1C
	.byte	$25
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$10
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$83
	.byte	$10
	.byte	$04
	.byte	$0E
	.byte	$03
	.byte	$1E
	.byte	$08
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$2A
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$03
	.byte	$0C
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$10
	.byte	$04
	.byte	$15
	.byte	$03
	.byte	$0C
	.byte	$48
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$1B
	.byte	$68
	.byte	$0F
	.byte	$03
	.byte	$0A
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$0C
	.byte	$05
	.byte	$10
	.byte	$04
	.byte	$03
	.byte	$06
	.byte	$E8
	.byte	$0B
	.byte	$03
	.byte	$0C
	.byte	$F8
	.byte	$28
	.byte	$10
	.byte	$21
	.byte	$03
	.byte	$18
	.byte	$B8
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$15
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$16
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$03
	.byte	$0B
	.byte	$18
	.byte	$1E
	.byte	$1F
	.byte	$03
	.byte	$17
	.byte	$28
	.byte	$29
	.byte	$2C
	.byte	$29
	.byte	$03
	.byte	$0C
	.byte	$68
	.byte	$03
	.byte	$02
	.byte	$F3
	.byte	$03
	.byte	$0F
	.byte	$58
	.byte	$03
	.byte	$22
	.byte	$1C
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$16
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$54
	.byte	$03
	.byte	$0A
	.byte	$18
	.byte	$08
	.byte	$54
	.byte	$03
	.byte	$0A
	.byte	$38
	.byte	$03
	.byte	$2C
	.byte	$68
	.byte	$10
	.byte	$82
	.byte	$14
	.byte	$03
	.byte	$23
	.byte	$5B
	.byte	$08
	.byte	$83
	.byte	$06
	.byte	$03
	.byte	$04
	.byte	$A4
	.byte	$03
	.byte	$09
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$A4
	.byte	$03
	.byte	$08
	.byte	$88
	.byte	$03
	.byte	$23
	.byte	$33
	.byte	$09
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$24
	.byte	$34
	.byte	$03
	.byte	$02
	.byte	$9C
	.byte	$03
	.byte	$3B
	.byte	$08
	.byte	$03
	.byte	$0C
	.byte	$F8
	.byte	$10
	.byte	$02
	.byte	$0C
	.byte	$03
	.byte	$49
	.byte	$68
	.byte	$08
	.byte	$16
	.byte	$0C
	.byte	$04
	.byte	$03
	.byte	$4B
	.byte	$78
	.byte	$0C
	.byte	$07
	.byte	$07
	.byte	$0A
	.byte	$08
	.byte	$C8
	.byte	$03
	.byte	$23
	.byte	$88
	.byte	$08
	.byte	$E5
	.byte	$03
	.byte	$07
	.byte	$18
	.byte	$08
	.byte	$65
	.byte	$1A
	.byte	$08
	.byte	$82
	.byte	$03
	.byte	$04
	.byte	$88
	.byte	$04
	.byte	$04
	.byte	$10
	.byte	$E1
	.byte	$03
	.byte	$03
	.byte	$8D
.segment	"RODATA"
.segment	"BANK0"
_level11_enemy:
	.byte	$69
	.byte	$05
	.byte	$04
	.byte	$A6
	.byte	$05
	.byte	$06
	.byte	$62
	.byte	$05
	.byte	$04
	.byte	$90
	.byte	$04
	.byte	$05
	.byte	$A0
	.byte	$04
	.byte	$05
	.byte	$5D
	.byte	$03
	.byte	$02
	.byte	$39
	.byte	$03
	.byte	$04
	.byte	$89
	.byte	$03
	.byte	$04
	.byte	$FF
_level11:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$48
	.byte	$E0
	.byte	$94
	.byte	$25
	.byte	$28
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$09
	.byte	$04
	.byte	$0D
	.byte	$09
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$09
	.byte	$01
	.byte	$09
	.byte	$83
	.byte	$09
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$1F
	.byte	$08
	.byte	$02
	.byte	$13
	.byte	$08
	.byte	$1A
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$02
	.byte	$1D
	.byte	$48
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$2B
	.byte	$02
	.byte	$1D
	.byte	$38
	.byte	$02
	.byte	$1E
	.byte	$08
	.byte	$02
	.byte	$1F
	.byte	$88
	.byte	$02
	.byte	$1C
	.byte	$08
	.byte	$03
	.byte	$C4
	.byte	$02
	.byte	$02
	.byte	$8B
	.byte	$02
	.byte	$1E
	.byte	$48
	.byte	$02
	.byte	$1D
	.byte	$08
	.byte	$02
	.byte	$13
	.byte	$08
	.byte	$02
	.byte	$1E
	.byte	$88
	.byte	$02
	.byte	$1C
	.byte	$08
	.byte	$2C
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$19
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$18
	.byte	$09
	.byte	$01
	.byte	$02
	.byte	$18
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$64
	.byte	$46
	.byte	$15
	.byte	$02
	.byte	$1D
	.byte	$68
	.byte	$02
	.byte	$15
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$85
	.byte	$09
	.byte	$C1
	.byte	$03
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$55
	.byte	$0C
	.byte	$02
	.byte	$65
	.byte	$A8
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$1C
	.byte	$1D
	.byte	$03
	.byte	$E5
	.byte	$03
	.byte	$D8
	.byte	$04
	.byte	$06
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$14
	.byte	$05
	.byte	$03
	.byte	$15
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$26
	.byte	$2C
	.byte	$08
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$03
	.byte	$11
	.byte	$03
	.byte	$29
	.byte	$03
	.byte	$04
	.byte	$0C
	.byte	$03
	.byte	$F8
	.byte	$09
	.byte	$A1
	.byte	$1E
	.byte	$1F
	.byte	$03
	.byte	$44
	.byte	$08
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$4E
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$3C
	.byte	$03
	.byte	$37
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$03
	.byte	$06
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$0F
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$30
	.byte	$03
	.byte	$87
	.byte	$26
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$03
	.byte	$C7
	.byte	$24
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$15
	.byte	$03
	.byte	$47
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$02
	.byte	$02
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$6B
	.byte	$04
	.byte	$03
	.byte	$B2
	.byte	$2C
	.byte	$02
	.byte	$05
	.byte	$64
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$83
	.byte	$2C
	.byte	$0B
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$03
	.byte	$99
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$09
	.byte	$28
	.byte	$2F
	.byte	$02
	.byte	$28
	.byte	$48
	.byte	$02
	.byte	$27
	.byte	$53
	.byte	$16
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$30
	.byte	$02
	.byte	$09
	.byte	$18
	.byte	$02
	.byte	$23
	.byte	$47
	.byte	$29
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$02
	.byte	$22
	.byte	$0B
	.byte	$05
	.byte	$02
	.byte	$22
	.byte	$4B
	.byte	$02
	.byte	$14
	.byte	$78
	.byte	$02
	.byte	$05
	.byte	$99
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$0C
	.byte	$02
	.byte	$09
	.byte	$18
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$02
	.byte	$0B
	.byte	$B8
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$0C
	.byte	$C8
	.byte	$22
	.byte	$23
	.byte	$03
	.byte	$A7
	.byte	$03
	.byte	$C8
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$03
	.byte	$87
	.byte	$03
	.byte	$C8
.segment	"RODATA"
.segment	"BANK0"
_level12_enemy:
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$A8
	.byte	$05
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$04
	.byte	$3B
	.byte	$04
	.byte	$06
	.byte	$37
	.byte	$04
	.byte	$01
	.byte	$46
	.byte	$04
	.byte	$01
	.byte	$1E
	.byte	$03
	.byte	$04
	.byte	$39
	.byte	$03
	.byte	$02
	.byte	$A4
	.byte	$03
	.byte	$06
	.byte	$90
	.byte	$03
	.byte	$06
	.byte	$4C
	.byte	$02
	.byte	$06
	.byte	$59
	.byte	$02
	.byte	$04
	.byte	$7A
	.byte	$02
	.byte	$04
	.byte	$A9
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$02
	.byte	$06
	.byte	$85
	.byte	$02
	.byte	$06
	.byte	$93
	.byte	$02
	.byte	$06
	.byte	$2C
	.byte	$01
	.byte	$05
	.byte	$3A
	.byte	$01
	.byte	$02
	.byte	$8A
	.byte	$01
	.byte	$01
	.byte	$A8
	.byte	$01
	.byte	$01
	.byte	$96
	.byte	$01
	.byte	$01
	.byte	$2C
	.byte	$00
	.byte	$04
	.byte	$9C
	.byte	$00
	.byte	$04
	.byte	$FF
_level12:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$63
	.byte	$F7
	.byte	$49
	.byte	$E1
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$04
	.byte	$04
	.byte	$13
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$13
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$07
	.byte	$11
	.byte	$1F
	.byte	$08
	.byte	$11
	.byte	$16
	.byte	$08
	.byte	$07
	.byte	$13
	.byte	$05
	.byte	$11
	.byte	$05
	.byte	$08
	.byte	$13
	.byte	$A2
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$2C
	.byte	$2C
	.byte	$0B
	.byte	$0E
	.byte	$11
	.byte	$06
	.byte	$08
	.byte	$28
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$11
	.byte	$05
	.byte	$08
	.byte	$27
	.byte	$2C
	.byte	$2C
	.byte	$12
	.byte	$08
	.byte	$12
	.byte	$03
	.byte	$11
	.byte	$05
	.byte	$08
	.byte	$24
	.byte	$27
	.byte	$2C
	.byte	$14
	.byte	$0D
	.byte	$15
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$12
	.byte	$09
	.byte	$13
	.byte	$02
	.byte	$0C
	.byte	$11
	.byte	$05
	.byte	$58
	.byte	$09
	.byte	$24
	.byte	$24
	.byte	$12
	.byte	$41
	.byte	$14
	.byte	$07
	.byte	$11
	.byte	$06
	.byte	$68
	.byte	$15
	.byte	$12
	.byte	$48
	.byte	$0F
	.byte	$11
	.byte	$07
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$12
	.byte	$04
	.byte	$13
	.byte	$41
	.byte	$2A
	.byte	$12
	.byte	$C8
	.byte	$0A
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2F
	.byte	$12
	.byte	$A9
	.byte	$12
	.byte	$A8
	.byte	$13
	.byte	$83
	.byte	$12
	.byte	$92
	.byte	$13
	.byte	$A4
	.byte	$11
	.byte	$13
	.byte	$08
	.byte	$30
	.byte	$11
	.byte	$0D
	.byte	$08
	.byte	$11
	.byte	$02
	.byte	$47
	.byte	$11
	.byte	$0B
	.byte	$08
	.byte	$12
	.byte	$89
	.byte	$12
	.byte	$88
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$11
	.byte	$03
	.byte	$A5
	.byte	$2F
	.byte	$2A
	.byte	$11
	.byte	$0B
	.byte	$18
	.byte	$2C
	.byte	$08
	.byte	$15
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$00
	.byte	$12
	.byte	$A5
	.byte	$11
	.byte	$06
	.byte	$08
	.byte	$2A
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$2C
	.byte	$0E
	.byte	$11
	.byte	$07
	.byte	$28
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$28
	.byte	$12
	.byte	$15
	.byte	$2A
	.byte	$11
	.byte	$04
	.byte	$7B
	.byte	$12
	.byte	$C8
	.byte	$2C
	.byte	$12
	.byte	$15
	.byte	$11
	.byte	$09
	.byte	$68
	.byte	$11
	.byte	$07
	.byte	$88
	.byte	$2A
	.byte	$11
	.byte	$04
	.byte	$D8
	.byte	$12
	.byte	$88
	.byte	$12
	.byte	$07
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$11
	.byte	$07
	.byte	$D8
	.byte	$12
	.byte	$65
	.byte	$2A
	.byte	$11
	.byte	$08
	.byte	$18
	.byte	$12
	.byte	$47
	.byte	$12
	.byte	$17
	.byte	$11
	.byte	$06
	.byte	$18
	.byte	$11
	.byte	$22
	.byte	$05
	.byte	$12
	.byte	$16
	.byte	$11
	.byte	$07
	.byte	$18
	.byte	$0B
	.byte	$09
	.byte	$12
	.byte	$96
	.byte	$11
	.byte	$08
	.byte	$38
	.byte	$12
	.byte	$90
	.byte	$11
	.byte	$09
	.byte	$68
	.byte	$11
	.byte	$0D
	.byte	$08
	.byte	$0C
	.byte	$0A
	.byte	$11
	.byte	$0C
	.byte	$08
	.byte	$11
	.byte	$06
	.byte	$17
	.byte	$11
	.byte	$06
	.byte	$08
	.byte	$0B
	.byte	$11
	.byte	$02
	.byte	$44
	.byte	$09
	.byte	$11
	.byte	$0C
	.byte	$A8
	.byte	$12
	.byte	$84
	.byte	$11
	.byte	$05
	.byte	$08
	.byte	$2F
	.byte	$13
	.byte	$21
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$00
	.byte	$0E
	.byte	$13
	.byte	$21
	.byte	$2C
	.byte	$08
	.byte	$0D
	.byte	$11
	.byte	$06
	.byte	$F8
	.byte	$0D
	.byte	$07
	.byte	$0D
	.byte	$07
	.byte	$12
	.byte	$C4
	.byte	$11
	.byte	$19
	.byte	$38
	.byte	$11
	.byte	$43
	.byte	$04
	.byte	$11
	.byte	$06
	.byte	$78
	.byte	$12
	.byte	$38
	.byte	$08
	.byte	$06
	.byte	$2C
	.byte	$14
	.byte	$11
	.byte	$06
	.byte	$B8
	.byte	$0B
	.byte	$12
	.byte	$7A
	.byte	$11
	.byte	$09
	.byte	$18
	.byte	$13
	.byte	$03
	.byte	$11
	.byte	$22
	.byte	$CA
	.byte	$11
	.byte	$2A
	.byte	$38
	.byte	$2A
	.byte	$11
	.byte	$05
	.byte	$7C
	.byte	$12
	.byte	$C8
	.byte	$2F
	.byte	$11
	.byte	$23
	.byte	$05
	.byte	$11
	.byte	$05
	.byte	$08
	.byte	$14
	.byte	$15
	.byte	$2C
	.byte	$0E
	.byte	$11
	.byte	$0A
	.byte	$08
	.byte	$12
	.byte	$F2
	.byte	$11
	.byte	$27
	.byte	$88
	.byte	$1C
	.byte	$1D
	.byte	$1C
	.byte	$1D
	.byte	$11
	.byte	$4A
	.byte	$28
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$12
	.byte	$02
	.byte	$11
	.byte	$0B
	.byte	$48
	.byte	$12
	.byte	$F5
	.byte	$12
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$09
	.byte	$12
	.byte	$35
	.byte	$00
	.byte	$11
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$12
	.byte	$09
	.byte	$0F
	.byte	$00
	.byte	$11
	.byte	$06
	.byte	$48
	.byte	$12
	.byte	$08
	.byte	$12
	.byte	$89
	.byte	$11
	.byte	$06
	.byte	$48
	.byte	$12
	.byte	$48
	.byte	$12
	.byte	$49
	.byte	$11
	.byte	$06
	.byte	$48
	.byte	$11
	.byte	$64
	.byte	$47
	.byte	$11
	.byte	$23
	.byte	$09
	.byte	$12
	.byte	$88
	.byte	$11
	.byte	$26
	.byte	$66
	.byte	$11
	.byte	$48
	.byte	$18
	.byte	$13
	.byte	$03
	.byte	$11
	.byte	$50
	.byte	$18
	.byte	$11
	.byte	$0B
	.byte	$D8
	.byte	$11
	.byte	$09
	.byte	$A8
	.byte	$11
	.byte	$08
	.byte	$3D
	.byte	$11
	.byte	$1C
	.byte	$08
	.byte	$11
	.byte	$43
	.byte	$D8
	.byte	$11
	.byte	$02
	.byte	$75
	.byte	$12
	.byte	$7A
	.byte	$11
	.byte	$0A
	.byte	$18
	.byte	$11
	.byte	$2C
	.byte	$98
	.byte	$11
	.byte	$1B
	.byte	$08
	.byte	$12
	.byte	$82
	.byte	$0B
	.byte	$09
	.byte	$11
	.byte	$35
	.byte	$18
	.byte	$11
	.byte	$66
	.byte	$68
	.byte	$11
	.byte	$0A
	.byte	$08
	.byte	$11
	.byte	$05
	.byte	$C5
	.byte	$11
	.byte	$06
	.byte	$08
	.byte	$11
	.byte	$03
	.byte	$B6
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$11
	.byte	$26
	.byte	$00
	.byte	$13
	.byte	$E3
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$96
	.byte	$16
	.byte	$16
	.byte	$13
	.byte	$81
	.byte	$11
	.byte	$67
	.byte	$D8
	.byte	$11
	.byte	$0B
	.byte	$18
	.byte	$12
	.byte	$48
	.byte	$29
	.byte	$13
	.byte	$01
	.byte	$11
	.byte	$09
	.byte	$08
	.byte	$11
	.byte	$43
	.byte	$99
	.byte	$0A
	.byte	$11
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$21
	.byte	$12
	.byte	$41
	.byte	$11
	.byte	$07
	.byte	$08
	.byte	$28
	.byte	$22
	.byte	$23
	.byte	$28
	.byte	$11
	.byte	$2B
	.byte	$08
	.byte	$22
	.byte	$23
	.byte	$11
	.byte	$09
	.byte	$18
	.byte	$04
	.byte	$05
	.byte	$13
	.byte	$07
	.byte	$11
	.byte	$03
	.byte	$68
.segment	"RODATA"
.segment	"BANK0"
_level13_enemy:
	.byte	$49
	.byte	$02
	.byte	$04
	.byte	$75
	.byte	$02
	.byte	$04
	.byte	$44
	.byte	$02
	.byte	$06
	.byte	$40
	.byte	$02
	.byte	$01
	.byte	$3E
	.byte	$01
	.byte	$01
	.byte	$2D
	.byte	$01
	.byte	$01
	.byte	$2A
	.byte	$01
	.byte	$06
	.byte	$65
	.byte	$01
	.byte	$04
	.byte	$55
	.byte	$01
	.byte	$0A
	.byte	$45
	.byte	$01
	.byte	$0A
	.byte	$19
	.byte	$00
	.byte	$06
	.byte	$39
	.byte	$00
	.byte	$06
	.byte	$79
	.byte	$00
	.byte	$06
	.byte	$FF
_level13:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$47
	.byte	$14
	.byte	$1F
	.byte	$AB
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$04
	.byte	$07
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$83
	.byte	$08
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$1D
	.byte	$08
	.byte	$02
	.byte	$14
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$08
	.byte	$03
	.byte	$09
	.byte	$02
	.byte	$0D
	.byte	$18
	.byte	$0E
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$28
	.byte	$2C
	.byte	$0F
	.byte	$28
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$2C
	.byte	$20
	.byte	$21
	.byte	$02
	.byte	$09
	.byte	$18
	.byte	$04
	.byte	$03
	.byte	$F6
	.byte	$15
	.byte	$02
	.byte	$09
	.byte	$18
	.byte	$02
	.byte	$0D
	.byte	$38
	.byte	$02
	.byte	$1D
	.byte	$08
	.byte	$2C
	.byte	$0C
	.byte	$05
	.byte	$08
	.byte	$02
	.byte	$06
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$0B
	.byte	$07
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$0A
	.byte	$02
	.byte	$08
	.byte	$88
	.byte	$28
	.byte	$03
	.byte	$82
	.byte	$02
	.byte	$09
	.byte	$38
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$14
	.byte	$07
	.byte	$0D
	.byte	$09
	.byte	$2C
	.byte	$14
	.byte	$0D
	.byte	$02
	.byte	$2A
	.byte	$28
	.byte	$03
	.byte	$54
	.byte	$02
	.byte	$0A
	.byte	$68
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$E8
	.byte	$16
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$02
	.byte	$0B
	.byte	$88
	.byte	$1E
	.byte	$1F
	.byte	$02
	.byte	$17
	.byte	$98
	.byte	$29
	.byte	$2C
	.byte	$29
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$F4
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$02
	.byte	$0C
	.byte	$28
	.byte	$2A
	.byte	$16
	.byte	$02
	.byte	$1C
	.byte	$E8
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$0C
	.byte	$02
	.byte	$07
	.byte	$D8
	.byte	$08
	.byte	$04
	.byte	$30
	.byte	$02
	.byte	$0B
	.byte	$A8
	.byte	$0C
	.byte	$02
	.byte	$02
	.byte	$5C
	.byte	$03
	.byte	$C8
	.byte	$02
	.byte	$02
	.byte	$A4
	.byte	$03
	.byte	$83
	.byte	$00
	.byte	$03
	.byte	$C8
	.byte	$02
	.byte	$02
	.byte	$A4
	.byte	$03
	.byte	$88
	.byte	$14
	.byte	$02
	.byte	$06
	.byte	$E8
	.byte	$0C
	.byte	$02
	.byte	$22
	.byte	$35
	.byte	$02
	.byte	$07
	.byte	$28
	.byte	$2C
	.byte	$14
	.byte	$02
	.byte	$42
	.byte	$34
	.byte	$0D
	.byte	$09
	.byte	$1C
	.byte	$1D
	.byte	$02
	.byte	$0B
	.byte	$58
	.byte	$0E
	.byte	$1E
	.byte	$1F
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$02
	.byte	$19
	.byte	$18
	.byte	$0F
	.byte	$02
	.byte	$0B
	.byte	$18
	.byte	$02
	.byte	$25
	.byte	$F7
	.byte	$02
	.byte	$07
	.byte	$18
	.byte	$22
	.byte	$23
	.byte	$08
	.byte	$C1
	.byte	$0C
	.byte	$06
	.byte	$17
	.byte	$19
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$88
	.byte	$04
	.byte	$02
	.byte	$23
	.byte	$C5
	.byte	$04
	.byte	$04
	.byte	$08
	.byte	$E1
	.byte	$02
	.byte	$03
	.byte	$53
.segment	"RODATA"
.segment	"BANK0"
_level14_enemy:
	.byte	$7D
	.byte	$01
	.byte	$03
	.byte	$28
	.byte	$01
	.byte	$03
	.byte	$74
	.byte	$01
	.byte	$03
	.byte	$54
	.byte	$01
	.byte	$03
	.byte	$20
	.byte	$01
	.byte	$06
	.byte	$FF
_level14:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A4
	.byte	$6F
	.byte	$99
	.byte	$10
	.byte	$74
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$0F
	.byte	$04
	.byte	$07
	.byte	$0F
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$83
	.byte	$0F
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$1F
	.byte	$08
	.byte	$02
	.byte	$13
	.byte	$08
	.byte	$17
	.byte	$19
	.byte	$2C
	.byte	$2F
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$C1
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$03
	.byte	$01
	.byte	$0C
	.byte	$0D
	.byte	$05
	.byte	$09
	.byte	$02
	.byte	$08
	.byte	$38
	.byte	$30
	.byte	$2C
	.byte	$0E
	.byte	$2A
	.byte	$08
	.byte	$06
	.byte	$02
	.byte	$0A
	.byte	$48
	.byte	$03
	.byte	$08
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$28
	.byte	$0F
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$2A
	.byte	$03
	.byte	$05
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$02
	.byte	$0D
	.byte	$08
	.byte	$0B
	.byte	$0A
	.byte	$2A
	.byte	$0B
	.byte	$02
	.byte	$02
	.byte	$4F
	.byte	$02
	.byte	$15
	.byte	$98
	.byte	$0C
	.byte	$03
	.byte	$3A
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$27
	.byte	$38
	.byte	$0E
	.byte	$2A
	.byte	$2A
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$27
	.byte	$48
	.byte	$14
	.byte	$0D
	.byte	$0A
	.byte	$2A
	.byte	$2A
	.byte	$0B
	.byte	$0A
	.byte	$02
	.byte	$15
	.byte	$C8
	.byte	$02
	.byte	$03
	.byte	$78
	.byte	$0F
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$58
	.byte	$28
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$58
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$2C
	.byte	$14
	.byte	$09
	.byte	$2A
	.byte	$02
	.byte	$02
	.byte	$8B
	.byte	$03
	.byte	$88
	.byte	$22
	.byte	$23
	.byte	$03
	.byte	$18
	.byte	$0E
	.byte	$02
	.byte	$0E
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$88
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$82
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$E1
	.byte	$02
	.byte	$03
	.byte	$63
.segment	"RODATA"
.segment	"BANK0"
_level15_enemy:
	.byte	$78
	.byte	$05
	.byte	$06
	.byte	$44
	.byte	$05
	.byte	$03
	.byte	$60
	.byte	$05
	.byte	$01
	.byte	$9D
	.byte	$04
	.byte	$04
	.byte	$AA
	.byte	$04
	.byte	$05
	.byte	$44
	.byte	$04
	.byte	$04
	.byte	$8D
	.byte	$03
	.byte	$03
	.byte	$29
	.byte	$03
	.byte	$01
	.byte	$3E
	.byte	$02
	.byte	$03
	.byte	$8E
	.byte	$02
	.byte	$06
	.byte	$9B
	.byte	$02
	.byte	$05
	.byte	$13
	.byte	$01
	.byte	$03
	.byte	$FF
_level15:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$57
	.byte	$61
	.byte	$EC
	.byte	$5E
	.byte	$A9
	.byte	$01
	.byte	$1A
	.byte	$1B
	.byte	$24
	.byte	$25
	.byte	$04
	.byte	$0D
	.byte	$25
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$25
	.byte	$01
	.byte	$25
	.byte	$83
	.byte	$25
	.byte	$04
	.byte	$0E
	.byte	$1B
	.byte	$1F
	.byte	$08
	.byte	$25
	.byte	$82
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$2C
	.byte	$2F
	.byte	$25
	.byte	$21
	.byte	$0C
	.byte	$05
	.byte	$24
	.byte	$93
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$24
	.byte	$12
	.byte	$0E
	.byte	$2C
	.byte	$0B
	.byte	$25
	.byte	$E1
	.byte	$24
	.byte	$C8
	.byte	$0A
	.byte	$24
	.byte	$88
	.byte	$2C
	.byte	$08
	.byte	$24
	.byte	$C8
	.byte	$07
	.byte	$0A
	.byte	$24
	.byte	$72
	.byte	$24
	.byte	$08
	.byte	$0B
	.byte	$1B
	.byte	$08
	.byte	$C8
	.byte	$24
	.byte	$88
	.byte	$1B
	.byte	$08
	.byte	$58
	.byte	$0C
	.byte	$0A
	.byte	$2C
	.byte	$0B
	.byte	$09
	.byte	$1B
	.byte	$09
	.byte	$08
	.byte	$1B
	.byte	$05
	.byte	$15
	.byte	$1B
	.byte	$09
	.byte	$08
	.byte	$2A
	.byte	$1B
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$1B
	.byte	$0B
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$1B
	.byte	$0D
	.byte	$18
	.byte	$1B
	.byte	$10
	.byte	$38
	.byte	$30
	.byte	$00
	.byte	$25
	.byte	$61
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$24
	.byte	$05
	.byte	$2F
	.byte	$24
	.byte	$29
	.byte	$2F
	.byte	$1B
	.byte	$05
	.byte	$08
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$1B
	.byte	$05
	.byte	$39
	.byte	$24
	.byte	$C8
	.byte	$2C
	.byte	$01
	.byte	$24
	.byte	$65
	.byte	$2A
	.byte	$00
	.byte	$30
	.byte	$1B
	.byte	$08
	.byte	$38
	.byte	$2F
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$0F
	.byte	$1B
	.byte	$08
	.byte	$48
	.byte	$0C
	.byte	$0A
	.byte	$2C
	.byte	$2A
	.byte	$24
	.byte	$0B
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$30
	.byte	$24
	.byte	$17
	.byte	$25
	.byte	$61
	.byte	$1B
	.byte	$06
	.byte	$08
	.byte	$2F
	.byte	$2A
	.byte	$24
	.byte	$AA
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$0E
	.byte	$24
	.byte	$08
	.byte	$24
	.byte	$83
	.byte	$1B
	.byte	$05
	.byte	$08
	.byte	$1B
	.byte	$02
	.byte	$86
	.byte	$1B
	.byte	$02
	.byte	$E7
	.byte	$1B
	.byte	$07
	.byte	$38
	.byte	$2F
	.byte	$1B
	.byte	$04
	.byte	$97
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$24
	.byte	$15
	.byte	$1B
	.byte	$02
	.byte	$97
	.byte	$1B
	.byte	$16
	.byte	$F8
	.byte	$1B
	.byte	$0F
	.byte	$08
	.byte	$14
	.byte	$0A
	.byte	$25
	.byte	$E1
	.byte	$1B
	.byte	$08
	.byte	$D8
	.byte	$1B
	.byte	$02
	.byte	$78
	.byte	$2C
	.byte	$1B
	.byte	$02
	.byte	$9A
	.byte	$1B
	.byte	$09
	.byte	$78
	.byte	$24
	.byte	$08
	.byte	$1B
	.byte	$07
	.byte	$D8
	.byte	$1B
	.byte	$0F
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$00
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$0B
	.byte	$0D
	.byte	$09
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$0D
	.byte	$1B
	.byte	$22
	.byte	$BE
	.byte	$1B
	.byte	$06
	.byte	$68
	.byte	$00
	.byte	$1B
	.byte	$2B
	.byte	$A8
	.byte	$14
	.byte	$04
	.byte	$15
	.byte	$2C
	.byte	$08
	.byte	$15
	.byte	$1B
	.byte	$0A
	.byte	$88
	.byte	$1B
	.byte	$03
	.byte	$87
	.byte	$1B
	.byte	$16
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$06
	.byte	$2A
	.byte	$2A
	.byte	$08
	.byte	$1B
	.byte	$23
	.byte	$9F
	.byte	$1B
	.byte	$07
	.byte	$18
	.byte	$00
	.byte	$1B
	.byte	$0A
	.byte	$28
	.byte	$26
	.byte	$0E
	.byte	$2A
	.byte	$14
	.byte	$1B
	.byte	$26
	.byte	$AF
	.byte	$24
	.byte	$08
	.byte	$26
	.byte	$1B
	.byte	$02
	.byte	$C8
	.byte	$0B
	.byte	$1B
	.byte	$08
	.byte	$58
	.byte	$2F
	.byte	$1C
	.byte	$1D
	.byte	$2C
	.byte	$2C
	.byte	$1C
	.byte	$1D
	.byte	$1B
	.byte	$08
	.byte	$C8
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$1B
	.byte	$07
	.byte	$A8
	.byte	$08
	.byte	$09
	.byte	$1B
	.byte	$02
	.byte	$B8
	.byte	$0C
	.byte	$24
	.byte	$11
	.byte	$24
	.byte	$C8
	.byte	$0B
	.byte	$07
	.byte	$09
	.byte	$02
	.byte	$2C
	.byte	$0C
	.byte	$1B
	.byte	$43
	.byte	$7E
	.byte	$1B
	.byte	$27
	.byte	$28
	.byte	$1B
	.byte	$43
	.byte	$85
	.byte	$1B
	.byte	$0B
	.byte	$08
	.byte	$04
	.byte	$1B
	.byte	$07
	.byte	$88
	.byte	$0F
	.byte	$24
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$1B
	.byte	$43
	.byte	$9E
	.byte	$24
	.byte	$48
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$24
	.byte	$01
	.byte	$0E
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$24
	.byte	$C8
	.byte	$1B
	.byte	$03
	.byte	$63
	.byte	$1B
	.byte	$03
	.byte	$6D
	.byte	$1B
	.byte	$08
	.byte	$38
	.byte	$1B
	.byte	$42
	.byte	$2A
	.byte	$1B
	.byte	$0A
	.byte	$48
	.byte	$17
	.byte	$19
	.byte	$08
	.byte	$05
	.byte	$09
	.byte	$24
	.byte	$C8
	.byte	$04
	.byte	$1B
	.byte	$02
	.byte	$B1
	.byte	$18
	.byte	$18
	.byte	$08
	.byte	$1B
	.byte	$63
	.byte	$0E
	.byte	$1B
	.byte	$05
	.byte	$18
	.byte	$0B
	.byte	$0D
	.byte	$0D
	.byte	$07
	.byte	$1B
	.byte	$08
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$25
	.byte	$42
	.byte	$08
	.byte	$1B
	.byte	$07
	.byte	$98
	.byte	$1E
	.byte	$1F
	.byte	$25
	.byte	$41
	.byte	$26
	.byte	$1B
	.byte	$28
	.byte	$B8
	.byte	$25
	.byte	$03
	.byte	$0F
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$1B
	.byte	$65
	.byte	$23
	.byte	$24
	.byte	$03
	.byte	$25
	.byte	$62
	.byte	$14
	.byte	$1B
	.byte	$64
	.byte	$58
	.byte	$25
	.byte	$83
	.byte	$24
	.byte	$07
	.byte	$0F
	.byte	$16
	.byte	$1B
	.byte	$64
	.byte	$58
	.byte	$25
	.byte	$81
	.byte	$26
	.byte	$0F
	.byte	$2C
	.byte	$26
	.byte	$2F
	.byte	$1B
	.byte	$66
	.byte	$68
	.byte	$06
	.byte	$24
	.byte	$47
	.byte	$24
	.byte	$B4
	.byte	$1B
	.byte	$06
	.byte	$08
	.byte	$1B
	.byte	$05
	.byte	$34
	.byte	$14
	.byte	$07
	.byte	$1B
	.byte	$06
	.byte	$28
	.byte	$24
	.byte	$24
	.byte	$1B
	.byte	$63
	.byte	$84
	.byte	$1B
	.byte	$49
	.byte	$68
	.byte	$1B
	.byte	$0B
	.byte	$C8
	.byte	$29
	.byte	$30
	.byte	$1B
	.byte	$4C
	.byte	$88
	.byte	$0F
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$1B
	.byte	$47
	.byte	$F8
	.byte	$24
	.byte	$05
	.byte	$2F
	.byte	$1E
	.byte	$1F
	.byte	$2F
	.byte	$1B
	.byte	$3B
	.byte	$18
	.byte	$1B
	.byte	$09
	.byte	$48
	.byte	$1B
	.byte	$22
	.byte	$08
	.byte	$1B
	.byte	$04
	.byte	$48
	.byte	$1B
	.byte	$23
	.byte	$DC
	.byte	$1B
	.byte	$9C
	.byte	$68
	.byte	$10
	.byte	$2D
	.byte	$2D
	.byte	$11
	.byte	$1B
	.byte	$0A
	.byte	$08
	.byte	$1B
	.byte	$24
	.byte	$28
	.byte	$25
	.byte	$41
	.byte	$1B
	.byte	$2A
	.byte	$28
	.byte	$25
	.byte	$42
	.byte	$1B
	.byte	$15
	.byte	$38
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$12
	.byte	$2E
	.byte	$13
	.byte	$1B
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$1B
	.byte	$0B
	.byte	$38
	.byte	$2C
	.byte	$14
	.byte	$15
	.byte	$1B
	.byte	$0C
	.byte	$38
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$1B
	.byte	$09
	.byte	$38
	.byte	$2A
	.byte	$2A
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$3B
	.byte	$25
	.byte	$01
	.byte	$24
	.byte	$88
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$05
	.byte	$09
	.byte	$00
	.byte	$25
	.byte	$02
	.byte	$1B
	.byte	$03
	.byte	$63
.segment	"RODATA"
.segment	"BANK0"
_level16_enemy:
	.byte	$27
	.byte	$00
	.byte	$04
	.byte	$97
	.byte	$00
	.byte	$04
	.byte	$FF
_level16:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$E4
	.byte	$54
	.byte	$08
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$0A
	.byte	$04
	.byte	$07
	.byte	$0A
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$0A
	.byte	$01
	.byte	$0A
	.byte	$83
	.byte	$0A
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$26
	.byte	$24
	.byte	$0A
	.byte	$01
	.byte	$27
	.byte	$03
	.byte	$02
	.byte	$29
	.byte	$03
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$0D
	.byte	$0A
	.byte	$01
	.byte	$09
	.byte	$17
	.byte	$19
	.byte	$2C
	.byte	$0C
	.byte	$03
	.byte	$B3
	.byte	$04
	.byte	$06
	.byte	$16
	.byte	$03
	.byte	$63
	.byte	$18
	.byte	$18
	.byte	$2C
	.byte	$08
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$A2
	.byte	$0B
	.byte	$0D
	.byte	$15
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$28
	.byte	$0A
	.byte	$21
	.byte	$02
	.byte	$17
	.byte	$18
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$03
	.byte	$5B
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$0C
	.byte	$28
	.byte	$03
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$0A
	.byte	$05
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$0A
	.byte	$06
	.byte	$03
	.byte	$88
.segment	"RODATA"
.segment	"BANK0"
_level17_enemy:
	.byte	$88
	.byte	$02
	.byte	$04
	.byte	$96
	.byte	$02
	.byte	$06
	.byte	$72
	.byte	$02
	.byte	$06
	.byte	$2C
	.byte	$01
	.byte	$07
	.byte	$6C
	.byte	$01
	.byte	$07
	.byte	$9C
	.byte	$01
	.byte	$07
	.byte	$59
	.byte	$01
	.byte	$03
	.byte	$66
	.byte	$01
	.byte	$07
	.byte	$44
	.byte	$01
	.byte	$07
	.byte	$94
	.byte	$01
	.byte	$07
	.byte	$52
	.byte	$01
	.byte	$03
	.byte	$49
	.byte	$00
	.byte	$07
	.byte	$59
	.byte	$00
	.byte	$07
	.byte	$79
	.byte	$00
	.byte	$07
	.byte	$FF
_level17:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$5D
	.byte	$92
	.byte	$1F
	.byte	$85
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$07
	.byte	$02
	.byte	$1D
	.byte	$08
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$07
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$88
	.byte	$08
	.byte	$83
	.byte	$08
	.byte	$01
	.byte	$17
	.byte	$19
	.byte	$2C
	.byte	$0E
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$08
	.byte	$05
	.byte	$02
	.byte	$0B
	.byte	$28
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$28
	.byte	$2F
	.byte	$08
	.byte	$21
	.byte	$03
	.byte	$C8
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$09
	.byte	$03
	.byte	$43
	.byte	$03
	.byte	$05
	.byte	$02
	.byte	$06
	.byte	$18
	.byte	$0B
	.byte	$0D
	.byte	$0D
	.byte	$07
	.byte	$0D
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$2A
	.byte	$02
	.byte	$0D
	.byte	$38
	.byte	$27
	.byte	$2A
	.byte	$02
	.byte	$06
	.byte	$5A
	.byte	$02
	.byte	$04
	.byte	$58
	.byte	$24
	.byte	$03
	.byte	$09
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$D8
	.byte	$24
	.byte	$03
	.byte	$09
	.byte	$20
	.byte	$21
	.byte	$02
	.byte	$08
	.byte	$28
	.byte	$24
	.byte	$03
	.byte	$09
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$06
	.byte	$96
	.byte	$15
	.byte	$02
	.byte	$0C
	.byte	$B8
	.byte	$02
	.byte	$07
	.byte	$28
	.byte	$16
	.byte	$16
	.byte	$08
	.byte	$C2
	.byte	$03
	.byte	$7A
	.byte	$02
	.byte	$0A
	.byte	$18
	.byte	$03
	.byte	$7A
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$12
	.byte	$2E
	.byte	$08
	.byte	$02
	.byte	$13
	.byte	$03
	.byte	$C8
	.byte	$03
	.byte	$62
	.byte	$02
	.byte	$0A
	.byte	$68
	.byte	$03
	.byte	$62
	.byte	$02
	.byte	$09
	.byte	$68
	.byte	$06
	.byte	$10
	.byte	$2D
	.byte	$08
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$15
	.byte	$68
	.byte	$03
	.byte	$76
	.byte	$28
	.byte	$28
	.byte	$02
	.byte	$0A
	.byte	$68
	.byte	$02
	.byte	$06
	.byte	$3A
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$02
	.byte	$07
	.byte	$39
	.byte	$02
	.byte	$15
	.byte	$38
	.byte	$03
	.byte	$33
	.byte	$02
	.byte	$0A
	.byte	$78
	.byte	$03
	.byte	$73
	.byte	$02
	.byte	$10
	.byte	$E8
	.byte	$15
	.byte	$02
	.byte	$09
	.byte	$68
	.byte	$02
	.byte	$0E
	.byte	$78
	.byte	$2C
	.byte	$2C
	.byte	$26
	.byte	$27
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$26
	.byte	$24
	.byte	$24
	.byte	$03
	.byte	$49
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$02
	.byte	$26
	.byte	$C9
	.byte	$02
	.byte	$2D
	.byte	$C8
	.byte	$26
	.byte	$02
	.byte	$0C
	.byte	$48
	.byte	$26
	.byte	$24
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$2A
	.byte	$08
	.byte	$01
	.byte	$03
	.byte	$BC
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$20
	.byte	$21
	.byte	$2A
	.byte	$03
	.byte	$47
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$27
	.byte	$28
	.byte	$22
	.byte	$23
	.byte	$28
	.byte	$03
	.byte	$47
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$02
	.byte	$22
	.byte	$96
	.byte	$03
	.byte	$87
	.byte	$03
	.byte	$C8
	.byte	$04
	.byte	$05
	.byte	$08
	.byte	$07
	.byte	$02
	.byte	$03
	.byte	$53
.segment	"RODATA"
.segment	"BANK0"
_level18_enemy:
	.byte	$1B
	.byte	$00
	.byte	$04
	.byte	$8D
	.byte	$00
	.byte	$03
	.byte	$17
	.byte	$00
	.byte	$07
	.byte	$26
	.byte	$00
	.byte	$07
	.byte	$FF
_level18:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$DC
	.byte	$3E
	.byte	$0A
	.byte	$34
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$88
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$04
	.byte	$0E
	.byte	$01
	.byte	$15
	.byte	$08
	.byte	$2A
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$0C
	.byte	$0D
	.byte	$03
	.byte	$01
	.byte	$15
	.byte	$2A
	.byte	$0C
	.byte	$01
	.byte	$06
	.byte	$38
	.byte	$0E
	.byte	$02
	.byte	$D8
	.byte	$08
	.byte	$02
	.byte	$C8
	.byte	$17
	.byte	$19
	.byte	$0E
	.byte	$2A
	.byte	$14
	.byte	$02
	.byte	$5A
	.byte	$01
	.byte	$05
	.byte	$58
	.byte	$18
	.byte	$18
	.byte	$02
	.byte	$58
	.byte	$01
	.byte	$07
	.byte	$48
	.byte	$04
	.byte	$02
	.byte	$11
	.byte	$0D
	.byte	$0D
	.byte	$09
	.byte	$01
	.byte	$0A
	.byte	$58
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$30
	.byte	$02
	.byte	$02
	.byte	$16
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$28
	.byte	$22
	.byte	$23
	.byte	$28
	.byte	$01
	.byte	$0B
	.byte	$78
	.byte	$22
	.byte	$23
	.byte	$01
	.byte	$09
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$58
.segment	"RODATA"
.segment	"BANK0"
_level19:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$E9
	.byte	$00
	.byte	$BE
	.byte	$3F
	.byte	$5A
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$04
	.byte	$0D
	.byte	$10
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$10
	.byte	$01
	.byte	$06
	.byte	$2C
	.byte	$1C
	.byte	$1D
	.byte	$10
	.byte	$E2
	.byte	$10
	.byte	$01
	.byte	$0E
	.byte	$03
	.byte	$C8
	.byte	$1E
	.byte	$1F
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$28
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$2C
	.byte	$22
	.byte	$23
	.byte	$02
	.byte	$09
	.byte	$18
	.byte	$2F
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$15
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$E1
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$82
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$15
	.byte	$03
	.byte	$08
	.byte	$14
	.byte	$06
	.byte	$1C
	.byte	$1D
	.byte	$14
	.byte	$02
	.byte	$06
	.byte	$68
	.byte	$03
	.byte	$60
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$02
	.byte	$06
	.byte	$38
	.byte	$03
	.byte	$48
	.byte	$02
	.byte	$0A
	.byte	$68
	.byte	$02
	.byte	$0F
	.byte	$08
	.byte	$02
	.byte	$02
	.byte	$4B
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$02
	.byte	$4B
	.byte	$02
	.byte	$0D
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$BD
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$30
	.byte	$02
	.byte	$0D
	.byte	$58
	.byte	$02
	.byte	$0B
	.byte	$C8
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$02
	.byte	$05
	.byte	$A0
	.byte	$00
	.byte	$10
	.byte	$E5
	.byte	$04
	.byte	$05
	.byte	$0D
	.byte	$0A
	.byte	$2C
	.byte	$0C
	.byte	$05
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$A8
	.byte	$04
	.byte	$10
	.byte	$A2
	.byte	$08
	.byte	$04
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$1C
	.byte	$1D
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$02
	.byte	$0E
	.byte	$28
	.byte	$02
	.byte	$0D
	.byte	$08
	.byte	$04
	.byte	$15
	.byte	$02
	.byte	$1B
	.byte	$18
	.byte	$04
	.byte	$0A
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$10
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$0C
	.byte	$08
	.byte	$00
	.byte	$0C
	.byte	$03
	.byte	$87
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$02
	.byte	$05
	.byte	$07
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$36
	.byte	$02
	.byte	$06
	.byte	$48
	.byte	$09
	.byte	$2C
	.byte	$0B
	.byte	$02
	.byte	$0B
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$0B
	.byte	$07
	.byte	$02
	.byte	$0D
	.byte	$78
	.byte	$03
	.byte	$DB
	.byte	$03
	.byte	$82
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$09
	.byte	$02
	.byte	$04
	.byte	$58
	.byte	$0F
	.byte	$03
	.byte	$89
	.byte	$02
	.byte	$02
	.byte	$4D
	.byte	$03
	.byte	$C8
	.byte	$03
	.byte	$C9
	.byte	$03
	.byte	$59
	.byte	$03
	.byte	$C8
	.byte	$1C
	.byte	$1D
	.byte	$0F
	.byte	$02
	.byte	$05
	.byte	$2A
	.byte	$03
	.byte	$C8
	.byte	$02
	.byte	$46
	.byte	$38
	.byte	$08
	.byte	$02
	.byte	$07
	.byte	$B8
	.byte	$10
	.byte	$01
	.byte	$03
	.byte	$2B
	.byte	$0B
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$2F
	.byte	$10
	.byte	$61
	.byte	$02
	.byte	$25
	.byte	$88
	.byte	$03
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$DC
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$0F
	.byte	$2C
	.byte	$10
	.byte	$41
	.byte	$08
	.byte	$15
	.byte	$02
	.byte	$4B
	.byte	$68
	.byte	$03
	.byte	$84
	.byte	$02
	.byte	$1C
	.byte	$08
	.byte	$03
	.byte	$88
	.byte	$02
	.byte	$02
	.byte	$97
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$24
	.byte	$C8
	.byte	$03
	.byte	$08
	.byte	$02
	.byte	$02
	.byte	$97
	.byte	$03
	.byte	$04
	.byte	$14
	.byte	$02
	.byte	$0A
	.byte	$78
	.byte	$02
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$88
	.byte	$03
	.byte	$69
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$02
	.byte	$04
	.byte	$EA
	.byte	$02
	.byte	$07
	.byte	$38
	.byte	$02
	.byte	$05
	.byte	$09
	.byte	$0C
	.byte	$02
	.byte	$09
	.byte	$38
	.byte	$0F
	.byte	$1C
	.byte	$1D
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$D8
	.byte	$1E
	.byte	$1F
	.byte	$0C
	.byte	$02
	.byte	$28
	.byte	$98
	.byte	$03
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$62
	.byte	$15
	.byte	$14
	.byte	$07
	.byte	$07
	.byte	$02
	.byte	$17
	.byte	$78
	.byte	$02
	.byte	$1B
	.byte	$08
	.byte	$2C
	.byte	$02
	.byte	$67
	.byte	$99
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$02
	.byte	$26
	.byte	$59
	.byte	$03
	.byte	$C8
	.byte	$2A
	.byte	$0C
	.byte	$09
	.byte	$10
	.byte	$42
	.byte	$2F
	.byte	$2A
	.byte	$02
	.byte	$05
	.byte	$98
	.byte	$2A
	.byte	$08
	.byte	$10
	.byte	$43
	.byte	$0E
	.byte	$10
	.byte	$81
	.byte	$02
	.byte	$13
	.byte	$08
	.byte	$02
	.byte	$22
	.byte	$90
	.byte	$10
	.byte	$41
	.byte	$0E
	.byte	$02
	.byte	$25
	.byte	$98
	.byte	$10
	.byte	$E3
	.byte	$02
	.byte	$09
	.byte	$08
	.byte	$02
	.byte	$0E
	.byte	$18
	.byte	$02
	.byte	$1E
	.byte	$08
	.byte	$02
	.byte	$1B
	.byte	$08
	.byte	$03
	.byte	$88
	.byte	$02
	.byte	$46
	.byte	$18
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$02
	.byte	$24
	.byte	$03
	.byte	$03
	.byte	$85
	.byte	$03
	.byte	$13
	.byte	$0E
	.byte	$2C
	.byte	$1A
	.byte	$02
	.byte	$05
	.byte	$F8
	.byte	$08
	.byte	$06
	.byte	$17
	.byte	$19
	.byte	$0E
	.byte	$02
	.byte	$83
	.byte	$4D
	.byte	$02
	.byte	$06
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$48
	.byte	$02
	.byte	$66
	.byte	$C8
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$67
	.byte	$C8
	.byte	$02
	.byte	$43
	.byte	$E4
	.byte	$05
	.byte	$03
	.byte	$4D
	.byte	$03
	.byte	$88
	.byte	$10
	.byte	$08
	.byte	$02
	.byte	$1F
	.byte	$08
	.byte	$02
	.byte	$13
	.byte	$08
.segment	"RODATA"
.segment	"BANK0"
_level20_enemy:
	.byte	$CA
	.byte	$00
	.byte	$08
	.byte	$FF
_level20:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$E6
	.byte	$11
	.byte	$06
	.byte	$B1
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$2C
	.byte	$2C
	.byte	$03
	.byte	$1B
	.byte	$03
	.byte	$01
	.byte	$0C
	.byte	$09
	.byte	$03
	.byte	$8B
	.byte	$2C
	.byte	$08
	.byte	$07
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$07
	.byte	$03
	.byte	$83
	.byte	$06
	.byte	$02
	.byte	$48
	.byte	$0E
	.byte	$01
	.byte	$08
	.byte	$23
	.byte	$02
	.byte	$83
	.byte	$01
	.byte	$1B
	.byte	$08
	.byte	$03
	.byte	$83
	.byte	$1C
	.byte	$1D
	.byte	$03
	.byte	$45
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$1E
	.byte	$1F
	.byte	$03
	.byte	$45
	.byte	$01
	.byte	$1C
	.byte	$38
	.byte	$01
	.byte	$1B
	.byte	$08
	.byte	$02
	.byte	$83
	.byte	$08
	.byte	$05
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$98
	.byte	$08
	.byte	$04
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$08
_boss_dialog_strings:
	.addr	L215D
	.addr	L215F
	.addr	L2161
	.addr	L2163
	.addr	L2165
_defeat_dialog_strings:
	.addr	L2167
_boss_dialog_portrait_sprites:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_boss_dialog:
	.addr	_boss_dialog_portrait_sprites
	.addr	_boss_dialog_strings
	.byte	$05
_defeat_dialog:
	.word	$0000
	.addr	_boss_dialog_strings
	.byte	$01
.segment	"RODATA"
.segment	"BANK0"
_level_neoman17777_enemy:
	.byte	$AB
	.byte	$00
	.byte	$04
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$AD
	.byte	$00
	.byte	$06
	.byte	$1E
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$11
	.byte	$01
	.byte	$01
	.byte	$14
	.byte	$01
	.byte	$07
	.byte	$A7
	.byte	$01
	.byte	$04
	.byte	$A9
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$01
	.byte	$03
	.byte	$AA
	.byte	$01
	.byte	$04
	.byte	$1D
	.byte	$01
	.byte	$01
	.byte	$51
	.byte	$02
	.byte	$05
	.byte	$71
	.byte	$02
	.byte	$05
	.byte	$62
	.byte	$02
	.byte	$05
	.byte	$A6
	.byte	$02
	.byte	$04
	.byte	$18
	.byte	$02
	.byte	$03
	.byte	$A8
	.byte	$02
	.byte	$04
	.byte	$8A
	.byte	$02
	.byte	$06
	.byte	$AB
	.byte	$02
	.byte	$06
	.byte	$6E
	.byte	$02
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$01
	.byte	$20
	.byte	$03
	.byte	$05
	.byte	$11
	.byte	$03
	.byte	$01
	.byte	$12
	.byte	$03
	.byte	$01
	.byte	$13
	.byte	$03
	.byte	$01
	.byte	$9A
	.byte	$03
	.byte	$06
	.byte	$6C
	.byte	$03
	.byte	$07
	.byte	$AC
	.byte	$03
	.byte	$06
	.byte	$23
	.byte	$04
	.byte	$05
	.byte	$AC
	.byte	$04
	.byte	$04
	.byte	$A0
	.byte	$05
	.byte	$04
	.byte	$11
	.byte	$05
	.byte	$01
	.byte	$A8
	.byte	$05
	.byte	$04
	.byte	$FF
_level_neoman17777:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$DD
	.byte	$A0
	.byte	$39
	.byte	$45
	.byte	$C1
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$09
	.byte	$0B
	.byte	$04
	.byte	$04
	.byte	$0B
	.byte	$08
	.byte	$2C
	.byte	$0B
	.byte	$01
	.byte	$07
	.byte	$09
	.byte	$07
	.byte	$07
	.byte	$1F
	.byte	$08
	.byte	$09
	.byte	$88
	.byte	$06
	.byte	$17
	.byte	$19
	.byte	$0B
	.byte	$C2
	.byte	$0B
	.byte	$02
	.byte	$0E
	.byte	$09
	.byte	$88
	.byte	$18
	.byte	$18
	.byte	$0B
	.byte	$A1
	.byte	$29
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$0B
	.byte	$02
	.byte	$15
	.byte	$09
	.byte	$02
	.byte	$14
	.byte	$06
	.byte	$09
	.byte	$98
	.byte	$07
	.byte	$06
	.byte	$26
	.byte	$07
	.byte	$06
	.byte	$28
	.byte	$09
	.byte	$C4
	.byte	$2C
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$07
	.byte	$08
	.byte	$18
	.byte	$14
	.byte	$09
	.byte	$28
	.byte	$16
	.byte	$07
	.byte	$09
	.byte	$18
	.byte	$28
	.byte	$07
	.byte	$0C
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$14
	.byte	$0D
	.byte	$15
	.byte	$2A
	.byte	$07
	.byte	$06
	.byte	$08
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$0F
	.byte	$09
	.byte	$1A
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$07
	.byte	$05
	.byte	$28
	.byte	$09
	.byte	$C8
	.byte	$07
	.byte	$02
	.byte	$78
	.byte	$15
	.byte	$09
	.byte	$88
	.byte	$07
	.byte	$18
	.byte	$78
	.byte	$28
	.byte	$2C
	.byte	$29
	.byte	$09
	.byte	$5A
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$14
	.byte	$09
	.byte	$AA
	.byte	$07
	.byte	$07
	.byte	$58
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$09
	.byte	$09
	.byte	$07
	.byte	$08
	.byte	$58
	.byte	$1E
	.byte	$1F
	.byte	$07
	.byte	$07
	.byte	$38
	.byte	$07
	.byte	$03
	.byte	$58
	.byte	$07
	.byte	$03
	.byte	$B7
	.byte	$07
	.byte	$09
	.byte	$B8
	.byte	$07
	.byte	$0D
	.byte	$58
	.byte	$2C
	.byte	$2C
	.byte	$2B
	.byte	$07
	.byte	$0B
	.byte	$08
	.byte	$2F
	.byte	$09
	.byte	$08
	.byte	$2F
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$2B
	.byte	$07
	.byte	$02
	.byte	$95
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$0E
	.byte	$2C
	.byte	$0F
	.byte	$09
	.byte	$45
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$0B
	.byte	$63
	.byte	$07
	.byte	$1C
	.byte	$08
	.byte	$09
	.byte	$C8
	.byte	$30
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$30
	.byte	$07
	.byte	$2D
	.byte	$58
	.byte	$07
	.byte	$09
	.byte	$78
	.byte	$07
	.byte	$22
	.byte	$56
	.byte	$07
	.byte	$0A
	.byte	$08
	.byte	$2B
	.byte	$07
	.byte	$03
	.byte	$96
	.byte	$07
	.byte	$2A
	.byte	$A8
	.byte	$09
	.byte	$D9
	.byte	$07
	.byte	$16
	.byte	$38
	.byte	$2C
	.byte	$14
	.byte	$0D
	.byte	$15
	.byte	$1D
	.byte	$07
	.byte	$0C
	.byte	$18
	.byte	$07
	.byte	$23
	.byte	$09
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$2D
	.byte	$2E
	.byte	$2E
	.byte	$2E
	.byte	$11
	.byte	$07
	.byte	$05
	.byte	$08
	.byte	$0F
	.byte	$07
	.byte	$0F
	.byte	$38
	.byte	$07
	.byte	$11
	.byte	$48
	.byte	$07
	.byte	$1B
	.byte	$18
	.byte	$07
	.byte	$05
	.byte	$1B
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$2A
	.byte	$0B
	.byte	$02
	.byte	$07
	.byte	$2A
	.byte	$48
	.byte	$09
	.byte	$07
	.byte	$07
	.byte	$2C
	.byte	$48
	.byte	$2A
	.byte	$07
	.byte	$3D
	.byte	$48
	.byte	$07
	.byte	$0A
	.byte	$08
	.byte	$14
	.byte	$0A
	.byte	$2A
	.byte	$2B
	.byte	$2A
	.byte	$07
	.byte	$39
	.byte	$38
	.byte	$07
	.byte	$0B
	.byte	$08
	.byte	$07
	.byte	$48
	.byte	$D8
	.byte	$07
	.byte	$06
	.byte	$18
	.byte	$1C
	.byte	$07
	.byte	$22
	.byte	$14
	.byte	$07
	.byte	$09
	.byte	$08
	.byte	$07
	.byte	$44
	.byte	$25
	.byte	$07
	.byte	$0F
	.byte	$38
	.byte	$25
	.byte	$28
	.byte	$09
	.byte	$C8
	.byte	$16
	.byte	$07
	.byte	$24
	.byte	$87
	.byte	$26
	.byte	$24
	.byte	$27
	.byte	$09
	.byte	$C8
	.byte	$2A
	.byte	$0B
	.byte	$81
	.byte	$2A
	.byte	$07
	.byte	$42
	.byte	$47
	.byte	$07
	.byte	$54
	.byte	$48
	.byte	$07
	.byte	$45
	.byte	$68
	.byte	$07
	.byte	$4B
	.byte	$A8
	.byte	$2C
	.byte	$07
	.byte	$04
	.byte	$6C
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$2B
	.byte	$1E
	.byte	$1F
	.byte	$2B
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$23
	.byte	$14
	.byte	$07
	.byte	$43
	.byte	$FC
	.byte	$07
	.byte	$06
	.byte	$18
	.byte	$07
	.byte	$06
	.byte	$99
	.byte	$07
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$99
	.byte	$09
	.byte	$C8
	.byte	$2E
	.byte	$13
	.byte	$07
	.byte	$22
	.byte	$B8
	.byte	$2D
	.byte	$11
	.byte	$10
	.byte	$2D
	.byte	$07
	.byte	$18
	.byte	$F8
	.byte	$2B
	.byte	$09
	.byte	$BC
	.byte	$09
	.byte	$C8
	.byte	$09
	.byte	$02
	.byte	$2D
	.byte	$2D
	.byte	$2D
	.byte	$09
	.byte	$7C
	.byte	$09
	.byte	$C8
	.byte	$07
	.byte	$07
	.byte	$E7
	.byte	$07
	.byte	$09
	.byte	$78
	.byte	$0B
	.byte	$01
	.byte	$07
	.byte	$66
	.byte	$38
	.byte	$07
	.byte	$73
	.byte	$28
	.byte	$09
	.byte	$3C
	.byte	$07
	.byte	$68
	.byte	$E8
	.byte	$09
	.byte	$22
	.byte	$09
	.byte	$3C
	.byte	$07
	.byte	$6B
	.byte	$68
	.byte	$07
	.byte	$44
	.byte	$19
	.byte	$07
	.byte	$06
	.byte	$08
	.byte	$16
	.byte	$07
	.byte	$0F
	.byte	$58
	.byte	$09
	.byte	$38
	.byte	$28
	.byte	$07
	.byte	$23
	.byte	$DB
	.byte	$07
	.byte	$68
	.byte	$98
	.byte	$2B
	.byte	$29
	.byte	$07
	.byte	$0B
	.byte	$38
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$02
	.byte	$07
	.byte	$09
	.byte	$C8
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$2B
	.byte	$38
	.byte	$16
	.byte	$2B
	.byte	$16
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$20
	.byte	$21
	.byte	$07
	.byte	$0C
	.byte	$58
	.byte	$22
	.byte	$23
	.byte	$09
	.byte	$86
	.byte	$00
	.byte	$26
	.byte	$09
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$0B
	.byte	$07
	.byte	$09
	.byte	$B3
.segment	"RODATA"
.segment	"BANK0"
_level_debug_tiledump_enemy:
	.byte	$FF
_level_debug_tiledump:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$8C
	.byte	$5D
	.byte	$0F
	.byte	$C6
	.byte	$01
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$04
	.byte	$07
	.byte	$36
	.byte	$07
	.byte	$04
	.byte	$2C
	.byte	$36
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0E
	.byte	$35
	.byte	$88
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$35
	.byte	$C8
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$35
	.byte	$C8
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$35
	.byte	$C8
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$35
	.byte	$C8
	.byte	$32
	.byte	$36
	.byte	$A2
	.byte	$36
	.byte	$03
	.byte	$35
	.byte	$C8
	.byte	$34
	.byte	$07
	.byte	$07
	.byte	$34
	.byte	$1E
	.byte	$08
	.byte	$34
	.byte	$1B
	.byte	$08
	.byte	$2C
	.byte	$06
	.byte	$05
	.byte	$36
	.byte	$07
	.byte	$34
	.byte	$03
	.byte	$D8
.segment	"RODATA"
.segment	"BANK0"
_level_star_test:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$56
	.byte	$09
	.byte	$15
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$06
	.byte	$2A
	.byte	$17
	.byte	$19
	.byte	$2A
	.byte	$03
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$C8
	.byte	$18
	.byte	$18
	.byte	$01
	.byte	$0C
	.byte	$08
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$0C
	.byte	$08
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$1C
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$3E
	.byte	$01
	.byte	$1D
	.byte	$38
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$7B
	.byte	$01
	.byte	$1D
	.byte	$38
	.byte	$01
	.byte	$1F
	.byte	$B8
	.byte	$01
	.byte	$1F
	.byte	$B8
	.byte	$01
	.byte	$1F
	.byte	$B8
	.byte	$01
	.byte	$1E
	.byte	$B8
	.byte	$03
	.byte	$05
	.byte	$1A
	.byte	$02
	.byte	$88
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$43
	.byte	$B8
.segment	"RODATA"
.segment	"BANK0"
_level_enemies_test_enemy:
	.byte	$7B
	.byte	$02
	.byte	$05
	.byte	$8B
	.byte	$02
	.byte	$05
	.byte	$81
	.byte	$02
	.byte	$03
	.byte	$8E
	.byte	$01
	.byte	$03
	.byte	$4D
	.byte	$01
	.byte	$03
	.byte	$20
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$19
	.byte	$01
	.byte	$04
	.byte	$50
	.byte	$02
	.byte	$07
	.byte	$FF
_level_enemies_test:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$6C
	.byte	$D6
	.byte	$09
	.byte	$5C
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$03
	.byte	$1A
	.byte	$0E
	.byte	$01
	.byte	$0C
	.byte	$08
	.byte	$2C
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$2B
	.byte	$01
	.byte	$1B
	.byte	$18
	.byte	$01
	.byte	$1F
	.byte	$28
	.byte	$01
	.byte	$1E
	.byte	$28
	.byte	$01
	.byte	$0F
	.byte	$08
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$16
	.byte	$28
	.byte	$14
	.byte	$0D
	.byte	$03
	.byte	$01
	.byte	$15
	.byte	$01
	.byte	$1C
	.byte	$48
	.byte	$01
	.byte	$1E
	.byte	$08
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$18
	.byte	$02
	.byte	$4C
	.byte	$02
	.byte	$C8
	.byte	$01
	.byte	$06
	.byte	$16
	.byte	$01
	.byte	$16
	.byte	$18
	.byte	$01
	.byte	$1D
	.byte	$68
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$F4
	.byte	$01
	.byte	$1D
	.byte	$38
	.byte	$14
	.byte	$01
	.byte	$3D
	.byte	$28
	.byte	$01
	.byte	$46
	.byte	$98
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$93
.segment	"RODATA"
.segment	"BANK0"
_level_question_block_test:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$14
	.byte	$5F
	.byte	$08
	.byte	$26
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$0B
	.byte	$04
	.byte	$06
	.byte	$28
	.byte	$03
	.byte	$0B
	.byte	$08
	.byte	$06
	.byte	$16
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$0B
	.byte	$08
	.byte	$03
	.byte	$E1
	.byte	$16
	.byte	$03
	.byte	$21
	.byte	$02
	.byte	$C8
	.byte	$01
	.byte	$0E
	.byte	$28
	.byte	$03
	.byte	$C3
	.byte	$01
	.byte	$06
	.byte	$17
	.byte	$01
	.byte	$16
	.byte	$18
	.byte	$02
	.byte	$99
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$02
	.byte	$4E
	.byte	$02
	.byte	$F8
	.byte	$01
	.byte	$11
	.byte	$18
	.byte	$1A
	.byte	$01
	.byte	$05
	.byte	$18
	.byte	$01
	.byte	$09
	.byte	$38
	.byte	$01
	.byte	$07
	.byte	$93
	.byte	$01
	.byte	$12
	.byte	$68
	.byte	$18
	.byte	$08
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$0B
	.byte	$04
.segment	"RODATA"
.segment	"BANK0"
_level_macosten_enemy:
	.byte	$13
	.byte	$03
	.byte	$04
	.byte	$A3
	.byte	$03
	.byte	$04
	.byte	$14
	.byte	$03
	.byte	$04
	.byte	$A4
	.byte	$03
	.byte	$04
	.byte	$18
	.byte	$03
	.byte	$04
	.byte	$A8
	.byte	$03
	.byte	$04
	.byte	$2E
	.byte	$03
	.byte	$05
	.byte	$71
	.byte	$04
	.byte	$07
	.byte	$91
	.byte	$04
	.byte	$07
	.byte	$2A
	.byte	$04
	.byte	$07
	.byte	$30
	.byte	$05
	.byte	$05
	.byte	$A6
	.byte	$05
	.byte	$04
	.byte	$27
	.byte	$05
	.byte	$05
	.byte	$89
	.byte	$05
	.byte	$03
	.byte	$4B
	.byte	$05
	.byte	$04
	.byte	$7C
	.byte	$05
	.byte	$01
	.byte	$FF
_level_macosten:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$DD
	.byte	$2A
	.byte	$AC
	.byte	$49
	.byte	$ED
	.byte	$01
	.byte	$1A
	.byte	$1B
	.byte	$31
	.byte	$32
	.byte	$04
	.byte	$04
	.byte	$32
	.byte	$08
	.byte	$2C
	.byte	$32
	.byte	$01
	.byte	$1B
	.byte	$09
	.byte	$07
	.byte	$1B
	.byte	$1F
	.byte	$08
	.byte	$31
	.byte	$88
	.byte	$06
	.byte	$2C
	.byte	$0B
	.byte	$07
	.byte	$0A
	.byte	$16
	.byte	$2C
	.byte	$28
	.byte	$12
	.byte	$2E
	.byte	$13
	.byte	$0E
	.byte	$31
	.byte	$88
	.byte	$10
	.byte	$2D
	.byte	$11
	.byte	$29
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$1C
	.byte	$1D
	.byte	$31
	.byte	$C8
	.byte	$1E
	.byte	$1F
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$31
	.byte	$C8
	.byte	$17
	.byte	$19
	.byte	$18
	.byte	$18
	.byte	$2A
	.byte	$2B
	.byte	$31
	.byte	$43
	.byte	$31
	.byte	$C8
	.byte	$32
	.byte	$82
	.byte	$32
	.byte	$04
	.byte	$1B
	.byte	$1D
	.byte	$08
	.byte	$1B
	.byte	$06
	.byte	$08
	.byte	$2F
	.byte	$32
	.byte	$C1
	.byte	$2F
	.byte	$2C
	.byte	$2A
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$32
	.byte	$E2
	.byte	$0E
	.byte	$31
	.byte	$0A
	.byte	$1B
	.byte	$0C
	.byte	$08
	.byte	$32
	.byte	$22
	.byte	$31
	.byte	$C8
	.byte	$30
	.byte	$32
	.byte	$C1
	.byte	$30
	.byte	$32
	.byte	$21
	.byte	$1B
	.byte	$15
	.byte	$48
	.byte	$2F
	.byte	$32
	.byte	$21
	.byte	$32
	.byte	$42
	.byte	$1B
	.byte	$06
	.byte	$08
	.byte	$31
	.byte	$B1
	.byte	$31
	.byte	$FC
	.byte	$31
	.byte	$88
	.byte	$31
	.byte	$73
	.byte	$2C
	.byte	$30
	.byte	$29
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$01
	.byte	$32
	.byte	$21
	.byte	$2C
	.byte	$12
	.byte	$2E
	.byte	$13
	.byte	$1B
	.byte	$0B
	.byte	$48
	.byte	$1B
	.byte	$02
	.byte	$D9
	.byte	$1B
	.byte	$1D
	.byte	$C8
	.byte	$1B
	.byte	$1D
	.byte	$38
	.byte	$1B
	.byte	$0A
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$31
	.byte	$83
	.byte	$32
	.byte	$82
	.byte	$2F
	.byte	$2B
	.byte	$2F
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$1B
	.byte	$06
	.byte	$18
	.byte	$2B
	.byte	$0E
	.byte	$2B
	.byte	$0E
	.byte	$2A
	.byte	$2B
	.byte	$2A
	.byte	$2B
	.byte	$1B
	.byte	$07
	.byte	$28
	.byte	$31
	.byte	$48
	.byte	$31
	.byte	$09
	.byte	$1B
	.byte	$0B
	.byte	$08
	.byte	$31
	.byte	$29
	.byte	$1B
	.byte	$0B
	.byte	$08
	.byte	$1B
	.byte	$07
	.byte	$28
	.byte	$17
	.byte	$19
	.byte	$2C
	.byte	$30
	.byte	$2B
	.byte	$30
	.byte	$2C
	.byte	$1B
	.byte	$07
	.byte	$28
	.byte	$18
	.byte	$18
	.byte	$0F
	.byte	$32
	.byte	$C1
	.byte	$0F
	.byte	$1B
	.byte	$26
	.byte	$68
	.byte	$04
	.byte	$05
	.byte	$15
	.byte	$32
	.byte	$C2
	.byte	$31
	.byte	$09
	.byte	$1B
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$1B
	.byte	$05
	.byte	$96
	.byte	$0F
	.byte	$1B
	.byte	$09
	.byte	$98
	.byte	$1B
	.byte	$23
	.byte	$E7
	.byte	$14
	.byte	$1B
	.byte	$07
	.byte	$98
	.byte	$1B
	.byte	$1C
	.byte	$C8
	.byte	$1B
	.byte	$1B
	.byte	$08
	.byte	$1B
	.byte	$04
	.byte	$48
	.byte	$1B
	.byte	$5E
	.byte	$38
	.byte	$1B
	.byte	$1D
	.byte	$58
	.byte	$1B
	.byte	$05
	.byte	$16
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$0F
	.byte	$1B
	.byte	$10
	.byte	$28
	.byte	$1B
	.byte	$0A
	.byte	$08
	.byte	$1B
	.byte	$06
	.byte	$26
	.byte	$1B
	.byte	$1D
	.byte	$88
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$2B
	.byte	$2C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$02
	.byte	$1B
	.byte	$65
	.byte	$38
	.byte	$32
	.byte	$61
	.byte	$0C
	.byte	$05
	.byte	$09
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$2B
	.byte	$08
	.byte	$04
	.byte	$06
	.byte	$2C
	.byte	$25
	.byte	$1B
	.byte	$06
	.byte	$18
	.byte	$01
	.byte	$2C
	.byte	$2C
	.byte	$31
	.byte	$08
	.byte	$26
	.byte	$24
	.byte	$27
	.byte	$29
	.byte	$1B
	.byte	$07
	.byte	$28
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$1B
	.byte	$08
	.byte	$58
	.byte	$31
	.byte	$68
	.byte	$1B
	.byte	$0A
	.byte	$68
	.byte	$1B
	.byte	$1B
	.byte	$08
	.byte	$2C
	.byte	$20
	.byte	$21
	.byte	$1B
	.byte	$0C
	.byte	$08
	.byte	$22
	.byte	$23
	.byte	$31
	.byte	$48
	.byte	$2B
	.byte	$1B
	.byte	$07
	.byte	$08
	.byte	$14
	.byte	$0D
	.byte	$04
	.byte	$1B
	.byte	$11
	.byte	$38
	.byte	$1B
	.byte	$07
	.byte	$18
	.byte	$29
	.byte	$1B
	.byte	$0C
	.byte	$48
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$1B
	.byte	$1B
	.byte	$68
	.byte	$06
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$31
	.byte	$08
	.byte	$1B
	.byte	$02
	.byte	$E9
	.byte	$1B
	.byte	$05
	.byte	$08
	.byte	$26
	.byte	$27
	.byte	$08
	.byte	$04
	.byte	$04
	.byte	$15
	.byte	$02
	.byte	$1B
	.byte	$47
	.byte	$B8
	.byte	$1B
	.byte	$04
	.byte	$68
	.byte	$2A
	.byte	$00
	.byte	$1B
	.byte	$05
	.byte	$18
	.byte	$2A
	.byte	$2C
	.byte	$03
	.byte	$08
	.byte	$07
	.byte	$0A
	.byte	$2A
	.byte	$2A
	.byte	$0F
	.byte	$1B
	.byte	$85
	.byte	$68
	.byte	$31
	.byte	$08
	.byte	$0E
	.byte	$17
	.byte	$19
	.byte	$2A
	.byte	$2A
	.byte	$1E
	.byte	$1F
	.byte	$1B
	.byte	$06
	.byte	$58
	.byte	$03
	.byte	$30
	.byte	$18
	.byte	$18
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$1B
	.byte	$46
	.byte	$78
	.byte	$2B
	.byte	$1B
	.byte	$64
	.byte	$26
	.byte	$15
	.byte	$24
	.byte	$1B
	.byte	$05
	.byte	$18
	.byte	$16
	.byte	$0F
	.byte	$2C
	.byte	$2C
	.byte	$01
	.byte	$32
	.byte	$02
	.byte	$31
	.byte	$C8
	.byte	$02
	.byte	$2A
	.byte	$2A
	.byte	$0F
	.byte	$2C
	.byte	$31
	.byte	$27
	.byte	$1B
	.byte	$26
	.byte	$48
	.byte	$31
	.byte	$08
	.byte	$2C
	.byte	$29
	.byte	$26
	.byte	$27
	.byte	$26
	.byte	$27
	.byte	$31
	.byte	$C8
	.byte	$04
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$1B
	.byte	$03
	.byte	$48
.segment	"RODATA"
.segment	"BANK0"
_level_screen_edge_test_enemy:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$FF
_level_screen_edge_test:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$57
	.byte	$95
	.byte	$03
	.byte	$9A
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$2C
	.byte	$2C
	.byte	$03
	.byte	$0C
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$14
	.byte	$0D
	.byte	$0D
	.byte	$01
	.byte	$0D
	.byte	$17
	.byte	$03
	.byte	$1C
	.byte	$2C
	.byte	$32
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$11
	.byte	$15
	.byte	$2E
	.byte	$2E
	.byte	$01
	.byte	$0A
	.byte	$06
	.byte	$2D
	.byte	$2D
	.byte	$01
	.byte	$1C
	.byte	$48
	.byte	$03
	.byte	$0B
	.byte	$01
	.byte	$0C
	.byte	$2A
	.byte	$01
	.byte	$0C
	.byte	$46
	.byte	$03
	.byte	$12
	.byte	$05
	.byte	$03
	.byte	$0D
.segment	"RODATA"
.segment	"BANK0"
_level_bonus01:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9D
	.byte	$8B
	.byte	$71
	.byte	$16
	.byte	$F3
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$C8
	.byte	$2A
	.byte	$03
	.byte	$A1
	.byte	$2A
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$02
	.byte	$85
	.byte	$01
	.byte	$0A
	.byte	$18
	.byte	$03
	.byte	$23
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$02
	.byte	$A8
	.byte	$01
	.byte	$0E
	.byte	$38
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$C6
	.byte	$03
	.byte	$61
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$02
	.byte	$77
	.byte	$01
	.byte	$1B
	.byte	$68
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$19
	.byte	$48
	.byte	$01
	.byte	$0E
	.byte	$28
	.byte	$01
	.byte	$0E
	.byte	$B8
	.byte	$02
	.byte	$B9
	.byte	$01
	.byte	$09
	.byte	$68
	.byte	$02
	.byte	$B4
	.byte	$01
	.byte	$0D
	.byte	$38
	.byte	$02
	.byte	$5D
	.byte	$01
	.byte	$16
	.byte	$18
	.byte	$01
	.byte	$0E
	.byte	$38
	.byte	$01
	.byte	$12
	.byte	$58
	.byte	$01
	.byte	$1B
	.byte	$B8
	.byte	$01
	.byte	$1B
	.byte	$A8
	.byte	$01
	.byte	$10
	.byte	$38
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$18
	.byte	$C8
	.byte	$01
	.byte	$23
	.byte	$08
	.byte	$02
	.byte	$6C
	.byte	$02
	.byte	$C8
	.byte	$01
	.byte	$07
	.byte	$A7
	.byte	$2A
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$01
	.byte	$05
	.byte	$17
	.byte	$01
	.byte	$1E
	.byte	$08
	.byte	$01
	.byte	$0F
	.byte	$58
	.byte	$01
	.byte	$0F
	.byte	$68
	.byte	$01
	.byte	$04
	.byte	$BB
	.byte	$01
	.byte	$16
	.byte	$18
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$2C
	.byte	$58
	.byte	$01
	.byte	$2C
	.byte	$D8
	.byte	$01
	.byte	$08
	.byte	$C8
	.byte	$01
	.byte	$0F
	.byte	$E8
	.byte	$01
	.byte	$1C
	.byte	$08
	.byte	$01
	.byte	$09
	.byte	$08
.segment	"RODATA"
.segment	"BANK0"
_level_bonus02:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BE
	.byte	$28
	.byte	$A9
	.byte	$17
	.byte	$DE
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$07
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$01
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$02
	.byte	$C8
	.byte	$2A
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$8B
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$02
	.byte	$96
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$44
	.byte	$01
	.byte	$0B
	.byte	$28
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$2A
	.byte	$01
	.byte	$1B
	.byte	$28
	.byte	$01
	.byte	$03
	.byte	$58
	.byte	$01
	.byte	$0B
	.byte	$68
	.byte	$01
	.byte	$0E
	.byte	$18
	.byte	$01
	.byte	$0F
	.byte	$58
	.byte	$01
	.byte	$0C
	.byte	$B8
	.byte	$01
	.byte	$07
	.byte	$99
	.byte	$01
	.byte	$09
	.byte	$28
	.byte	$01
	.byte	$0E
	.byte	$18
	.byte	$01
	.byte	$0B
	.byte	$88
	.byte	$02
	.byte	$96
	.byte	$01
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$2C
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$B8
	.byte	$01
	.byte	$1B
	.byte	$18
	.byte	$01
	.byte	$06
	.byte	$78
	.byte	$01
	.byte	$08
	.byte	$D8
	.byte	$01
	.byte	$0E
	.byte	$58
	.byte	$01
	.byte	$0D
	.byte	$08
	.byte	$01
	.byte	$23
	.byte	$04
	.byte	$03
	.byte	$83
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$45
	.byte	$03
	.byte	$C1
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$03
	.byte	$05
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$01
	.byte	$04
	.byte	$57
	.byte	$01
	.byte	$17
	.byte	$08
	.byte	$01
	.byte	$0F
	.byte	$28
	.byte	$01
	.byte	$25
	.byte	$8A
	.byte	$01
	.byte	$07
	.byte	$18
	.byte	$02
	.byte	$87
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$01
	.byte	$26
	.byte	$B6
	.byte	$01
	.byte	$08
	.byte	$A8
	.byte	$01
	.byte	$23
	.byte	$99
	.byte	$01
	.byte	$08
	.byte	$48
	.byte	$01
	.byte	$26
	.byte	$27
	.byte	$01
	.byte	$0A
	.byte	$38
	.byte	$01
	.byte	$0A
	.byte	$08
	.byte	$01
	.byte	$06
	.byte	$19
	.byte	$01
	.byte	$06
	.byte	$48
	.byte	$02
	.byte	$84
	.byte	$02
	.byte	$4C
	.byte	$01
	.byte	$1C
	.byte	$F8
	.byte	$01
	.byte	$1B
	.byte	$08
	.byte	$02
	.byte	$88
.segment	"RODATA"
.segment	"BANK0"
_level_nt_length:
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$06
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$03
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$06
	.byte	$01
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$03
_valrigard_starting_nt:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
_valrigard_inital_coords:
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4A
	.byte	$4D
	.byte	$4D
	.byte	$64
	.byte	$4C
	.byte	$4D
	.byte	$4D
	.byte	$30
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$4D
	.byte	$21
	.byte	$21
_level_compressed_nametable_pointers:
	.addr	_level01
	.addr	_level02
	.addr	_level03
	.addr	_level04
	.addr	_level05
	.addr	_level06
	.addr	_level07
	.addr	_level08
	.addr	_level09
	.addr	_level10
	.addr	_level11
	.addr	_level12
	.addr	_level13
	.addr	_level14
	.addr	_level15
	.addr	_level16
	.addr	_level17
	.addr	_level18
	.addr	_level19
	.addr	_level20
	.addr	_level_neoman17777
	.addr	_level_debug_tiledump
	.addr	_level_star_test
	.addr	_level_enemies_test
	.addr	_level_question_block_test
	.addr	_level_macosten
	.addr	_level_screen_edge_test
	.addr	_level_bonus01
	.addr	_level_bonus02
_level_nametable_banks:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_level_names:
	.addr	L2A0F
	.addr	L2A11
	.addr	L2A13
	.addr	L2A15
	.addr	L2A17
	.addr	L2A19
	.addr	L2A1B
	.addr	L2A1D
	.addr	L2A1F
	.addr	L2A21
	.addr	L2A23
	.addr	L2A25
	.addr	L2A27
	.addr	L2A29
	.addr	L2A2B
	.addr	L2A2D
	.addr	L2A2F
	.addr	L2A31
	.addr	L2A33
	.addr	L2A35
	.addr	L2A37
	.addr	L2A39
	.addr	L2A3B
	.addr	L2A3D
	.addr	L2A3F
	.addr	L2A41
	.addr	L2A43
	.addr	L2A45
	.addr	L2A47
_empty_enemy:
	.byte	$FF
_level_enemy_data:
	.addr	_level01_enemy
	.addr	_level02_enemy
	.addr	_level03_enemy
	.addr	_level04_enemy
	.addr	_level05_enemy
	.addr	_level06_enemy
	.addr	_level07_enemy
	.addr	_level08_enemy
	.addr	_level09_enemy
	.addr	_level10_enemy
	.addr	_level11_enemy
	.addr	_level12_enemy
	.addr	_level13_enemy
	.addr	_level14_enemy
	.addr	_level15_enemy
	.addr	_level16_enemy
	.addr	_level17_enemy
	.addr	_level18_enemy
	.addr	_empty_enemy
	.addr	_level20_enemy
	.addr	_level_neoman17777_enemy
	.addr	_level_debug_tiledump_enemy
	.addr	_empty_enemy
	.addr	_level_enemies_test_enemy
	.addr	_empty_enemy
	.addr	_level_macosten_enemy
	.addr	_level_screen_edge_test_enemy
	.addr	_empty_enemy
	.addr	_empty_enemy
.segment	"RODATA"
_settings_bitmask_lookup_table:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_welcome_screen:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$8F
	.byte	$34
	.byte	$1A
	.byte	$38
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1D
	.byte	$03
	.byte	$10
	.byte	$E0
	.byte	$E5
	.byte	$82
	.byte	$03
	.byte	$32
	.byte	$E1
	.byte	$01
	.byte	$06
	.byte	$18
	.byte	$F2
	.byte	$F7
	.byte	$92
	.byte	$F5
	.byte	$03
	.byte	$30
	.byte	$F6
	.byte	$F3
	.byte	$01
	.byte	$06
	.byte	$18
	.byte	$E2
	.byte	$E3
	.byte	$01
	.byte	$12
	.byte	$4E
	.byte	$01
	.byte	$08
	.byte	$0E
	.byte	$F2
	.byte	$01
	.byte	$07
	.byte	$22
	.byte	$03
	.byte	$0A
	.byte	$01
	.byte	$08
	.byte	$0E
	.byte	$01
	.byte	$1F
	.byte	$38
	.byte	$01
	.byte	$1D
	.byte	$38
	.byte	$01
	.byte	$0F
	.byte	$38
	.byte	$E7
	.byte	$01
	.byte	$32
	.byte	$38
	.byte	$E6
	.byte	$01
	.byte	$07
	.byte	$38
	.byte	$F0
	.byte	$01
	.byte	$31
	.byte	$36
	.byte	$03
	.byte	$21
	.byte	$F1
	.byte	$01
	.byte	$06
	.byte	$18
	.byte	$A1
	.byte	$03
	.byte	$15
	.byte	$01
	.byte	$06
	.byte	$18
	.byte	$B1
	.byte	$03
	.byte	$15
	.byte	$01
	.byte	$12
	.byte	$8E
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1E
	.byte	$03
	.byte	$1C
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$53
	.byte	$B2
	.byte	$03
	.byte	$29
	.byte	$F6
	.byte	$F7
	.byte	$03
	.byte	$3B
	.byte	$F7
.segment	"BANK5"
_game_select_screen:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$0C
	.byte	$2E
	.byte	$18
	.byte	$7D
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1D
	.byte	$03
	.byte	$15
	.byte	$53
	.byte	$65
	.byte	$6C
	.byte	$65
	.byte	$63
	.byte	$74
	.byte	$20
	.byte	$61
	.byte	$20
	.byte	$47
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$3A
	.byte	$01
	.byte	$1E
	.byte	$4E
	.byte	$03
	.byte	$0B
	.byte	$47
	.byte	$61
	.byte	$75
	.byte	$6E
	.byte	$74
	.byte	$6C
	.byte	$65
	.byte	$74
	.byte	$01
	.byte	$1D
	.byte	$30
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$99
	.byte	$4C
	.byte	$65
	.byte	$76
	.byte	$65
	.byte	$6C
	.byte	$01
	.byte	$1D
	.byte	$34
	.byte	$01
	.byte	$06
	.byte	$3A
	.byte	$74
	.byte	$74
	.byte	$69
	.byte	$6E
	.byte	$67
	.byte	$73
	.byte	$01
	.byte	$1D
	.byte	$30
	.byte	$03
	.byte	$06
	.byte	$41
	.byte	$62
	.byte	$6F
	.byte	$75
	.byte	$74
	.byte	$2E
	.byte	$2E
	.byte	$2E
	.byte	$01
	.byte	$1D
	.byte	$30
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1E
	.byte	$03
	.byte	$12
	.byte	$82
	.byte	$E5
	.byte	$03
	.byte	$3B
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$03
	.byte	$3B
	.byte	$F7
_level_select_screen:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$FC
	.byte	$F1
	.byte	$18
	.byte	$3B
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1D
	.byte	$03
	.byte	$15
	.byte	$53
	.byte	$65
	.byte	$6C
	.byte	$65
	.byte	$63
	.byte	$74
	.byte	$20
	.byte	$61
	.byte	$20
	.byte	$4C
	.byte	$65
	.byte	$76
	.byte	$65
	.byte	$6C
	.byte	$3A
	.byte	$01
	.byte	$1E
	.byte	$4F
	.byte	$03
	.byte	$1C
	.byte	$48
	.byte	$69
	.byte	$67
	.byte	$68
	.byte	$20
	.byte	$53
	.byte	$63
	.byte	$6F
	.byte	$72
	.byte	$65
	.byte	$01
	.byte	$1E
	.byte	$6E
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1C
	.byte	$03
	.byte	$09
	.byte	$3C
	.byte	$2F
	.byte	$3E
	.byte	$3A
	.byte	$20
	.byte	$43
	.byte	$68
	.byte	$6F
	.byte	$6F
	.byte	$73
	.byte	$65
	.byte	$01
	.byte	$13
	.byte	$18
	.byte	$41
	.byte	$3A
	.byte	$01
	.byte	$26
	.byte	$95
	.byte	$03
	.byte	$14
	.byte	$42
	.byte	$3A
	.byte	$20
	.byte	$42
	.byte	$61
	.byte	$63
	.byte	$6B
	.byte	$01
	.byte	$1B
	.byte	$5C
	.byte	$03
	.byte	$1E
	.byte	$03
	.byte	$0F
	.byte	$82
	.byte	$E5
	.byte	$03
	.byte	$3B
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$03
	.byte	$3B
	.byte	$F7
_about_screen:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7F
	.byte	$17
	.byte	$B1
	.byte	$22
	.byte	$BC
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$20
	.byte	$20
	.byte	$04
	.byte	$1F
	.byte	$04
	.byte	$1C
	.byte	$20
	.byte	$43
	.byte	$61
	.byte	$73
	.byte	$74
	.byte	$6C
	.byte	$65
	.byte	$20
	.byte	$45
	.byte	$73
	.byte	$63
	.byte	$61
	.byte	$70
	.byte	$65
	.byte	$00
	.byte	$41
	.byte	$6C
	.byte	$70
	.byte	$68
	.byte	$61
	.byte	$02
	.byte	$1E
	.byte	$53
	.byte	$04
	.byte	$08
	.byte	$42
	.byte	$79
	.byte	$20
	.byte	$6D
	.byte	$61
	.byte	$63
	.byte	$6F
	.byte	$73
	.byte	$74
	.byte	$65
	.byte	$6E
	.byte	$02
	.byte	$1E
	.byte	$4B
	.byte	$04
	.byte	$03
	.byte	$41
	.byte	$64
	.byte	$64
	.byte	$69
	.byte	$74
	.byte	$69
	.byte	$6F
	.byte	$6E
	.byte	$61
	.byte	$6C
	.byte	$20
	.byte	$43
	.byte	$72
	.byte	$65
	.byte	$03
	.byte	$04
	.byte	$73
	.byte	$3A
	.byte	$02
	.byte	$1E
	.byte	$53
	.byte	$04
	.byte	$03
	.byte	$52
	.byte	$61
	.byte	$73
	.byte	$75
	.byte	$70
	.byte	$64
	.byte	$6F
	.byte	$6F
	.byte	$20
	.byte	$2D
	.byte	$20
	.byte	$54
	.byte	$69
	.byte	$02
	.byte	$22
	.byte	$1F
	.byte	$53
	.byte	$63
	.byte	$72
	.byte	$65
	.byte	$02
	.byte	$1E
	.byte	$BC
	.byte	$04
	.byte	$1F
	.byte	$04
	.byte	$1E
	.byte	$04
	.byte	$19
	.byte	$42
	.byte	$3A
	.byte	$20
	.byte	$42
	.byte	$61
	.byte	$63
	.byte	$6B
	.byte	$02
	.byte	$1E
	.byte	$47
	.byte	$04
	.byte	$1C
	.byte	$04
	.byte	$09
	.byte	$82
	.byte	$E5
	.byte	$04
	.byte	$3B
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$04
	.byte	$3B
	.byte	$F7
_game_complete_screen:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$F0
	.byte	$B0
	.byte	$24
	.byte	$D9
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$04
	.byte	$43
	.byte	$6F
	.byte	$6E
	.byte	$67
	.byte	$72
	.byte	$61
	.byte	$74
	.byte	$75
	.byte	$6C
	.byte	$61
	.byte	$74
	.byte	$69
	.byte	$6F
	.byte	$6E
	.byte	$73
	.byte	$21
	.byte	$01
	.byte	$1D
	.byte	$38
	.byte	$20
	.byte	$59
	.byte	$6F
	.byte	$75
	.byte	$20
	.byte	$63
	.byte	$6C
	.byte	$65
	.byte	$61
	.byte	$72
	.byte	$65
	.byte	$64
	.byte	$20
	.byte	$69
	.byte	$74
	.byte	$2E
	.byte	$01
	.byte	$1D
	.byte	$37
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$1F
	.byte	$03
	.byte	$05
	.byte	$E0
	.byte	$E1
	.byte	$01
	.byte	$1B
	.byte	$17
	.byte	$20
	.byte	$F0
	.byte	$F1
	.byte	$01
	.byte	$1C
	.byte	$3D
	.byte	$03
	.byte	$1C
	.byte	$03
	.byte	$0A
	.byte	$42
	.byte	$3A
	.byte	$20
	.byte	$4D
	.byte	$65
	.byte	$6E
	.byte	$75
	.byte	$01
	.byte	$0C
	.byte	$0D
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$01
	.byte	$1A
	.byte	$2D
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$01
	.byte	$1B
	.byte	$18
	.byte	$CD
	.byte	$CE
	.byte	$01
	.byte	$1B
	.byte	$18
	.byte	$BC
	.byte	$DD
	.byte	$DE
	.byte	$02
	.byte	$98
	.byte	$82
	.byte	$E5
	.byte	$03
	.byte	$3B
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$03
	.byte	$3B
	.byte	$F7
_settings_screen:
	.byte	$4C
	.byte	$5A
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C7
	.byte	$60
	.byte	$55
	.byte	$33
	.byte	$5F
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$20
	.byte	$20
	.byte	$04
	.byte	$1E
	.byte	$04
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$18
	.byte	$12
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$14
	.byte	$0E
	.byte	$02
	.byte	$11
	.byte	$12
	.byte	$02
	.byte	$0B
	.byte	$19
	.byte	$53
	.byte	$65
	.byte	$74
	.byte	$74
	.byte	$69
	.byte	$6E
	.byte	$67
	.byte	$73
	.byte	$02
	.byte	$1A
	.byte	$22
	.byte	$02
	.byte	$08
	.byte	$2A
	.byte	$02
	.byte	$0B
	.byte	$07
	.byte	$44
	.byte	$6F
	.byte	$77
	.byte	$6E
	.byte	$00
	.byte	$74
	.byte	$6F
	.byte	$00
	.byte	$72
	.byte	$65
	.byte	$76
	.byte	$69
	.byte	$76
	.byte	$65
	.byte	$3A
	.byte	$02
	.byte	$12
	.byte	$68
	.byte	$02
	.byte	$09
	.byte	$7D
	.byte	$02
	.byte	$1B
	.byte	$55
	.byte	$02
	.byte	$1B
	.byte	$62
	.byte	$02
	.byte	$14
	.byte	$19
	.byte	$04
	.byte	$10
	.byte	$02
	.byte	$12
	.byte	$18
	.byte	$02
	.byte	$15
	.byte	$4D
	.byte	$03
	.byte	$C3
	.byte	$02
	.byte	$0E
	.byte	$36
	.byte	$02
	.byte	$08
	.byte	$19
	.byte	$02
	.byte	$12
	.byte	$57
	.byte	$02
	.byte	$1B
	.byte	$BB
	.byte	$03
	.byte	$EB
	.byte	$02
	.byte	$19
	.byte	$17
	.byte	$04
	.byte	$1E
	.byte	$04
	.byte	$09
	.byte	$44
	.byte	$65
	.byte	$6C
	.byte	$65
	.byte	$74
	.byte	$65
	.byte	$20
	.byte	$48
	.byte	$69
	.byte	$67
	.byte	$68
	.byte	$20
	.byte	$53
	.byte	$63
	.byte	$6F
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$02
	.byte	$1E
	.byte	$52
	.byte	$20
	.byte	$20
	.byte	$41
	.byte	$3A
	.byte	$20
	.byte	$54
	.byte	$6F
	.byte	$67
	.byte	$67
	.byte	$6C
	.byte	$65
	.byte	$2F
	.byte	$53
	.byte	$65
	.byte	$6C
	.byte	$65
	.byte	$63
	.byte	$74
	.byte	$02
	.byte	$1D
	.byte	$38
	.byte	$42
	.byte	$3A
	.byte	$20
	.byte	$42
	.byte	$61
	.byte	$63
	.byte	$6B
	.byte	$02
	.byte	$0F
	.byte	$10
	.byte	$C0
	.byte	$C1
	.byte	$02
	.byte	$1B
	.byte	$2F
	.byte	$20
	.byte	$D0
	.byte	$D1
	.byte	$02
	.byte	$07
	.byte	$03
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$02
	.byte	$0F
	.byte	$18
	.byte	$A0
	.byte	$A0
	.byte	$02
	.byte	$07
	.byte	$03
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$02
	.byte	$0F
	.byte	$18
	.byte	$B0
	.byte	$B0
	.byte	$04
	.byte	$81
	.byte	$82
	.byte	$E5
	.byte	$04
	.byte	$3B
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$04
	.byte	$3B
	.byte	$F7
.segment	"RODATA"
.segment	"RODATA"
_palette_sp:
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$32
	.byte	$0F
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$0F
	.byte	$30
	.byte	$16
	.byte	$00
_cmaps:
	.addr	_cmap
	.addr	_cmap+240
	.addr	_cmap+480
	.addr	_cmap+720
	.addr	_cmap+960
	.addr	_cmap+1200
_draw_screen_sub_lookup_addr_0:
	.byte	$00
	.byte	$40
	.byte	$80
	.byte	$C0
_draw_screen_sub_lookup_index_offset_0:
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0C
_draw_screen_sub_lookup_addr_1:
	.byte	$20
	.byte	$60
	.byte	$A0
	.byte	$E0
_draw_screen_sub_lookup_index_offset_1:
	.byte	$02
	.byte	$06
	.byte	$0A
	.byte	$0E
_leftright_movement_offset_lookup_table:
	.byte	$FF
	.byte	$0F
_leftright_movement_moving_lookup_table:
	.byte	$FF
	.byte	$01
_updown_movement_offset_lookup_table:
	.byte	$FF
	.byte	$0F
_cannon_ul_sprite_lookup_table:
	.byte	$06
	.byte	$07
	.byte	$00
_cannon_ur_sprite_lookup_table:
	.byte	$02
	.byte	$01
	.byte	$00
_cannon_dr_sprite_lookup_table:
	.byte	$02
	.byte	$03
	.byte	$04
_cannon_dl_sprite_lookup_table:
	.byte	$06
	.byte	$05
	.byte	$04
_cannon_sprite_quadrant_lookup_table:
	.addr	_cannon_ul_sprite_lookup_table
	.addr	_cannon_ur_sprite_lookup_table
	.addr	_cannon_dl_sprite_lookup_table
	.addr	_cannon_dr_sprite_lookup_table
_menu_logic_functions:
	.addr	_menu_game_type_select
	.addr	_menu_level_select
	.addr	_menu_about_screen
	.addr	_menu_game_complete_screen
	.addr	_menu_settings
_menu_load_functions:
	.addr	_empty_function
	.addr	_load_level_selector
	.addr	_load_about_screen
	.addr	_load_game_complete_screen
	.addr	_load_settings_menu
_menu_compressed_data:
	.addr	_game_select_screen
	.addr	_level_select_screen
	.addr	_about_screen
	.addr	_game_complete_screen
	.addr	_settings_screen
_game_type_select_menu_links:
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$02
_game_type_select_menu_selector_x:
	.byte	$54
	.byte	$44
	.byte	$54
	.byte	$54
_game_type_select_menu_selector_y:
	.byte	$67
	.byte	$77
	.byte	$87
	.byte	$97
_settings_menu_selector_x:
	.byte	$2C
_settings_menu_toggle_text_x:
	.byte	$19
_settings_menu_selector_y:
	.byte	$37
	.byte	$97
_settings_menu_text_y:
	.byte	$07
	.byte	$FF
.segment	"BANK5"
_draw_func_pointers:
	.addr	_empty_function
	.addr	_draw_korbat
	.addr	_draw_grarrl
	.addr	_draw_splyke
	.addr	_draw_cannon
	.addr	_draw_acid
	.addr	_draw_spikeball
	.addr	_draw_sun
	.addr	_draw_boss
	.addr	_draw_cannonball
	.addr	_draw_acid_drop
	.addr	_draw_boss_fireball
	.addr	_draw_purple_death_effect
	.addr	_draw_splyke_death_effect
	.addr	_draw_floating_numbers_effect
.segment	"RODATA"
.segment	"BANK5"
_draw_boss_functions:
	.addr	_draw_boss_flying
	.addr	_draw_boss_idle
	.addr	_draw_boss_flying
	.addr	_draw_boss_flying
	.addr	_draw_boss_flying
	.addr	_draw_boss_dying
.segment	"RODATA"
_enemy_hitbox_width_lookup_table:
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$0B
	.byte	$0B
	.byte	$0D
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
_enemy_hitbox_height_lookup_table:
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$0B
	.byte	$0B
	.byte	$0D
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
_enemy_hitbox_x_offset_lookup_table:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
_enemy_hitbox_y_offset_lookup_table:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
_collision_functions:
	.addr	_empty_function
	.addr	_collision_with_killable_slashable
	.addr	_collision_with_killable_slashable
	.addr	_collision_with_splyke
	.addr	_collision_with_inert_slashable
	.addr	_empty_function
	.addr	_collision_with_unkillable_unslashable
	.addr	_collision_with_unkillable_unslashable
	.addr	_collision_with_boss
	.addr	_collision_with_unkillable_unslashable
	.addr	_collision_with_unkillable_unslashable
	.addr	_collision_with_unkillable_unslashable
	.addr	_empty_function
	.addr	_empty_function
	.addr	_empty_function
_ai_pointers:
	.addr	_empty_function
	.addr	_korbat_ai
	.addr	_spikeball_ai
	.addr	_splyke_ai
	.addr	_cannon_ai
	.addr	_acid_ai
	.addr	_spikeball_ai
	.addr	_sun_ai
	.addr	_boss_ai
	.addr	_cannonball_ai
	.addr	_acid_drop_ai
	.addr	_boss_fireball_ai
	.addr	_death_effect_timer_ai
	.addr	_death_effect_timer_ai
	.addr	_death_effect_timer_ai
_boss_ai_functions:
	.addr	_boss_ai_intro
	.addr	_boss_ai_idle
	.addr	_boss_ai_ascending
	.addr	_boss_ai_descending
	.addr	_boss_ai_damaged
	.addr	_boss_ai_dying
L2163:
	.byte	$59,$6F,$75,$20,$6D,$61,$79,$20,$68,$61,$76,$65,$20,$65,$73,$63
	.byte	$61,$70,$65,$64,$20,$74,$68,$65,$0A,$64,$75,$6E,$67,$65,$6F,$6E
	.byte	$2C,$20,$62,$75,$74,$20,$79,$6F,$75,$20,$77,$6F,$6E,$27,$74,$20
	.byte	$6C,$69,$76,$65,$0A,$74,$6F,$20,$73,$70,$65,$61,$6B,$20,$6F,$66
	.byte	$20,$69,$74,$2E,$2E,$2E,$00
L2161:
	.byte	$44,$69,$64,$20,$79,$6F,$75,$20,$72,$65,$61,$6C,$6C,$79,$20,$74
	.byte	$68,$69,$6E,$6B,$20,$49,$0A,$77,$6F,$75,$6C,$64,$6E,$27,$74,$20
	.byte	$65,$73,$63,$61,$70,$65,$3F,$00
L2165:
	.byte	$57,$65,$27,$6C,$6C,$20,$73,$65,$65,$20,$61,$62,$6F,$75,$74,$20
	.byte	$74,$68,$61,$74,$2C,$20,$6F,$6C,$64,$0A,$6D,$61,$6E,$2E,$00
L215D:
	.byte	$53,$6F,$20,$77,$65,$20,$6D,$65,$65,$74,$20,$61,$67,$61,$69,$6E
	.byte	$2C,$20,$56,$61,$6C,$72,$69,$67,$61,$72,$64,$2E,$00
L215F:
	.byte	$49,$20,$73,$68,$6F,$75,$6C,$64,$20,$68,$61,$76,$65,$20,$6B,$6E
	.byte	$6F,$77,$6E,$2E,$2E,$2E,$00
L2DC0:
	.byte	$41,$72,$65,$20,$79,$6F,$75,$20,$73,$75,$72,$65,$3F,$20,$20,$20
	.byte	$20,$20,$00
L2A37:
	.byte	$55,$73,$65,$72,$3A,$20,$6E,$65,$6F,$6D,$61,$6E,$31,$37,$37,$37
	.byte	$37,$00
L2A43:
	.byte	$53,$63,$72,$65,$65,$6E,$20,$45,$64,$67,$65,$20,$54,$65,$73,$74
	.byte	$00
L2A41:
	.byte	$44,$6F,$77,$6E,$6C,$6F,$61,$64,$65,$72,$20,$54,$65,$73,$74,$00
L2A47:
	.byte	$42,$6F,$6E,$75,$73,$20,$4C,$65,$76,$65,$6C,$20,$32,$00
L2A45:
	.byte	$42,$6F,$6E,$75,$73,$20,$4C,$65,$76,$65,$6C,$20,$31,$00
L2A3F:
	.byte	$3F,$20,$42,$6C,$6F,$63,$6B,$20,$54,$65,$73,$74,$00
L30A8:
	.byte	$46,$65,$62,$20,$32,$36,$20,$32,$30,$32,$32,$00
L2A3D:
	.byte	$45,$6E,$65,$6D,$79,$20,$54,$65,$73,$74,$00
L2A39:
	.byte	$54,$69,$6C,$65,$20,$44,$75,$6D,$70,$00
L2A3B:
	.byte	$53,$74,$61,$72,$20,$54,$65,$73,$74,$00
L2A2F:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$37,$00
L2A29:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$34,$00
L2A27:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$33,$00
L2A35:
	.byte	$4C,$65,$76,$65,$6C,$20,$32,$30,$00
L2A25:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$32,$00
L30B3:
	.byte	$31,$35,$3A,$31,$37,$3A,$32,$36,$00
L2A2D:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$36,$00
L2A23:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$31,$00
L2A21:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$30,$00
L2A33:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$39,$00
L2A2B:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$35,$00
L2A31:
	.byte	$4C,$65,$76,$65,$6C,$20,$31,$38,$00
L2A1B:
	.byte	$4C,$65,$76,$65,$6C,$20,$37,$00
L2A1F:
	.byte	$4C,$65,$76,$65,$6C,$20,$39,$00
L2A19:
	.byte	$4C,$65,$76,$65,$6C,$20,$36,$00
L2A17:
	.byte	$4C,$65,$76,$65,$6C,$20,$35,$00
L2A15:
	.byte	$4C,$65,$76,$65,$6C,$20,$34,$00
L2A13:
	.byte	$4C,$65,$76,$65,$6C,$20,$33,$00
L2A11	:=	L2A47+6
L2A0F	:=	L2A45+6
L2A1D:
	.byte	$4C,$65,$76,$65,$6C,$20,$38,$00
L2167:
	.byte	$54,$65,$73,$74,$2E,$00
L2DBC:
	.byte	$4F,$6E,$20,$00
L2DBE:
	.byte	$4F,$66,$66,$00

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_temppointer:
	.res	2,$00
_temppointer1:
	.res	2,$00
_temp_mutablepointer:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_player_frame_timer:
	.res	1,$00
_player_sword_timer:
	.res	1,$00
_player_death_timer:
	.res	1,$00
_player_walking_timer:
	.res	1,$00
_player_flags:
	.res	1,$00
_game_mode:
	.res	1,$00
_game_level_advance_behavior:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_nt:
	.res	1,$00
_pseudo_scroll_y:
	.res	2,$00
_scroll_y:
	.res	2,$00
_min_scroll_y:
	.res	2,$00
_max_scroll_y:
	.res	2,$00
_initial_scroll:
	.res	2,$00
_scroll_count:
	.res	1,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_level_index:
	.res	1,$00
_energy:
	.res	1,$00
_score:
	.res	2,$00
_enemy_score:
	.res	1,$00
_song:
	.res	1,$00
_nt_max:
	.res	1,$00
_nt_current:
	.res	1,$00
_valrigard:
	.res	8,$00
_hitbox:
	.res	4,$00
_hitbox2:
	.res	4,$00
_shuffle_offset:
	.res	1,$00
_shuffle_maximum:
	.res	1,$00
_debug_tile_x:
	.res	1,$00
_debug_tile_y:
	.res	1,$00
_conveyor_delta:
	.res	1,$00
_menu:
	.res	1,$00
_menu_selection:
	.res	1,$00
_tile_clear_queue:
	.res	8,$00
_tile_clear_to_type_queue:
	.res	4,$00
_tile_clear_front:
	.res	1,$00
_tile_clear_back:
	.res	1,$00
_did_headbonk:
	.res	1,$00
_enemy_is_using_bg_collision:
	.res	1,$00
_advanced_conditional:
	.res	1,$00
_enemy_limit:
	.res	1,$00
_lowest_enemy_index:
	.res	1,$00
_level_index_backup:
	.res	1,$00
.segment	"BSS"
_shuffle_array:
	.res	256,$00
_shuffle_leg_size:
	.res	1,$00
_enemies_x:
	.res	64,$00
_enemies_y:
	.res	64,$00
_enemies_actual_y:
	.res	64,$00
_enemies_nt:
	.res	64,$00
_enemies_flags:
	.res	64,$00
_enemies_type:
	.res	64,$00
_enemies_extra:
	.res	64,$00
_enemies_extra2:
	.res	64,$00
_enemies_timer:
	.res	64,$00
_enemies_count:
	.res	1,$00
_boss_state:
	.res	1,$00
_boss_memory:
	.res	8,$00
_previous_score:
	.res	2,$00
.segment	"XRAM"
_cmap:
	.res	1440,$00
_checksum:
	.res	2,$00
_level_high_scores:
	.res	512,$00
_gauntlet_high_score:
	.res	2,$00
_settings_memory:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; set_prg_bank(METASPRITE_BANK);
;
	lda     #$05
	jsr     _set_prg_bank
;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_player();
;
	jsr     _draw_player
;
; if (game_mode != MODE_GAME_SHOWING_TEXT) {
;
	lda     _game_mode
	cmp     #$05
	beq     L41D1
;
; draw_score();
;
	jsr     _draw_score
;
; draw_energy();
;
	jsr     _draw_energy
;
; for (y = 0; y < shuffle_leg_size; ++y) {
;
L41D1:	lda     #$00
	sta     _y
L41D2:	lda     _y
	cmp     _shuffle_leg_size
	jcs     L41D7
;
; temp1 = y + shuffle_offset;
;
	clc
	adc     _shuffle_offset
	sta     _temp1
;
; AsmSet1ByteFromPtrAtIndexVar(x, shuffle_array, temp1);
;
	ldy     _temp1
	lda     _shuffle_array,y
	sta     _x
;
; if (IS_ENEMY_ACTIVE(x)) {  
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L41D3
;
; temp_x = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _temp_x
;
; temp_y = enemies_y[x];
;
	ldy     _x
	lda     _enemies_y,y
	sta     _temp_y
;
; temp0 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp0
;
; AsmCallFunctionAtPtrOffsetByIndexVar(draw_func_pointers, temp0);
;
	asl     a
	tay
	lda     _draw_func_pointers,y
	ldx     _draw_func_pointers+1,y
	jsr     callax
;
; ++y;
;
L41D3:	inc     _y
;
; ++temp1;
;
	inc     _temp1
;
; AsmSet1ByteFromPtrAtIndexVar(x, shuffle_array, temp1);
;
	ldy     _temp1
	lda     _shuffle_array,y
	sta     _x
;
; if (IS_ENEMY_ACTIVE(x)) {  
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L41D4
;
; temp_x = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _temp_x
;
; temp_y = enemies_y[x];
;
	ldy     _x
	lda     _enemies_y,y
	sta     _temp_y
;
; temp0 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp0
;
; AsmCallFunctionAtPtrOffsetByIndexVar(draw_func_pointers, temp0);
;
	asl     a
	tay
	lda     _draw_func_pointers,y
	ldx     _draw_func_pointers+1,y
	jsr     callax
;
; ++y;
;
L41D4:	inc     _y
;
; ++temp1;
;
	inc     _temp1
;
; AsmSet1ByteFromPtrAtIndexVar(x, shuffle_array, temp1);
;
	ldy     _temp1
	lda     _shuffle_array,y
	sta     _x
;
; if (IS_ENEMY_ACTIVE(x)) {  
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L41D5
;
; temp_x = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _temp_x
;
; temp_y = enemies_y[x];
;
	ldy     _x
	lda     _enemies_y,y
	sta     _temp_y
;
; temp0 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp0
;
; AsmCallFunctionAtPtrOffsetByIndexVar(draw_func_pointers, temp0);
;
	asl     a
	tay
	lda     _draw_func_pointers,y
	ldx     _draw_func_pointers+1,y
	jsr     callax
;
; ++y;
;
L41D5:	inc     _y
;
; ++temp1;
;
	inc     _temp1
;
; AsmSet1ByteFromPtrAtIndexVar(x, shuffle_array, temp1);
;
	ldy     _temp1
	lda     _shuffle_array,y
	sta     _x
;
; if (IS_ENEMY_ACTIVE(x)) {  
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L41D6
;
; temp_x = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _temp_x
;
; temp_y = enemies_y[x];
;
	ldy     _x
	lda     _enemies_y,y
	sta     _temp_y
;
; temp0 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp0
;
; AsmCallFunctionAtPtrOffsetByIndexVar(draw_func_pointers, temp0);
;
	asl     a
	tay
	lda     _draw_func_pointers,y
	ldx     _draw_func_pointers+1,y
	jsr     callax
;
; for (y = 0; y < shuffle_leg_size; ++y) {
;
L41D6:	inc     _y
	jmp     L41D2
;
; shuffle_offset += shuffle_leg_size;
;
L41D7:	lda     _shuffle_leg_size
	clc
	adc     _shuffle_offset
	sta     _shuffle_offset
;
; if (shuffle_offset == shuffle_maximum) { shuffle_offset = 0; }
;
	lda     _shuffle_maximum
	cmp     _shuffle_offset
	bne     L3471
	lda     #$00
	sta     _shuffle_offset
;
; if (!(get_frame_count() & 7)) {
;
L3471:	jsr     _get_frame_count
	and     #$07
	bne     L3475
;
; temp0 = palette_bg[7];
;
	lda     _palette_bg+7
	sta     _temp0
;
; palette_bg[7] = palette_bg[6];
;
	lda     _palette_bg+6
	sta     _palette_bg+7
;
; palette_bg[6] = palette_bg[5];
;
	lda     _palette_bg+5
	sta     _palette_bg+6
;
; palette_bg[5] = temp0;
;
	lda     _temp0
	sta     _palette_bg+5
;
; __asm__("ldx #>%v", palette_bg);
;
	lda     #>_palette_bg
;
; __asm__("stx %v+1", TEMP);
;
	sta     _TEMP+1
;
; __asm__("lda #<%v", palette_bg);
;
	lda     #<_palette_bg
;
; __asm__("sta %v", TEMP);
;
	sta     _TEMP
;
; __asm__("ldx #$00"); // We'd make this #$10 if we wanted pal_spr.
;
	ldx     #$00
;
; __asm__("lda #$08"); // Only update the first 8 bytes of the palette.
;
	lda     #$08
;
; __asm__("bne pal_copy");
;
	jmp     pal_copy
;
; }
;
L3475:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_player: near

.segment	"BANK5"

;
; if (STATUS_DEAD) { // Dead
;
	lda     _player_flags
	and     #$02
	beq     L41DA
;
; temp0 = DIRECTION;
;
	lda     _player_flags
	and     #$01
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, valrigard_dead_sprite_lookup_table, temp0);
;
	asl     a
	tay
	lda     _valrigard_dead_sprite_lookup_table,y
	sta     _temppointer
	lda     _valrigard_dead_sprite_lookup_table+1,y
;
; } else if (IS_SWINGING_SWORD) { // Swinging sword
;
	jmp     L41D9
L41DA:	lda     _player_flags
	and     #$04
	beq     L41DB
;
; temp0 = (player_frame_timer & 0b11111110) | DIRECTION;
;
	lda     _player_frame_timer
	and     #$FE
	sta     ptr1
	lda     _player_flags
	and     #$01
	ora     ptr1
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, valrigard_sword_swing_sprite_lookup_table, temp0);
;
	asl     a
	tay
	lda     _valrigard_sword_swing_sprite_lookup_table,y
	sta     _temppointer
	lda     _valrigard_sword_swing_sprite_lookup_table+1,y
;
; } else if (pad1 & PAD_UP && energy > 0) { // Flying
;
	jmp     L41D9
L41DB:	lda     _pad1
	and     #$08
	beq     L41DF
	lda     _energy
	beq     L41DF
;
; temp0 = (player_frame_timer & 0b11111110) | DIRECTION;
;
	lda     _player_frame_timer
	and     #$FE
	sta     ptr1
	lda     _player_flags
	and     #$01
	ora     ptr1
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, valrigard_flying_sprite_lookup_table, temp0);
;
	asl     a
	tay
	lda     _valrigard_flying_sprite_lookup_table,y
	sta     _temppointer
	lda     _valrigard_flying_sprite_lookup_table+1,y
;
; } else if (IS_WALKING) { // Walking
;
	jmp     L41D9
L41DF:	lda     _player_flags
	and     #$40
	beq     L41E0
;
; temp0 = ((player_walking_timer & 0b11111100) | (DIRECTION << 1));
;
	lda     _player_walking_timer
	and     #$FC
	sta     ptr1
	lda     _player_flags
	and     #$01
	asl     a
	ora     ptr1
	sta     _temp0
;
; temp0 = temp0 >> 1;
;
	lsr     a
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, valrigard_walking_sprite_lookup_table, temp0);
;
	asl     a
	tay
	lda     _valrigard_walking_sprite_lookup_table,y
	sta     _temppointer
	lda     _valrigard_walking_sprite_lookup_table+1,y
;
; } else { // Idle
;
	jmp     L41D9
;
; temp0 = DIRECTION;
;
L41E0:	lda     _player_flags
	and     #$01
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, valrigard_idle_sprite_lookup_table, temp0);
;
	asl     a
	tay
	lda     _valrigard_idle_sprite_lookup_table,y
	sta     _temppointer
	lda     _valrigard_idle_sprite_lookup_table+1,y
L41D9:	sta     _temppointer+1
;
; oam_meta_spr(high_byte(valrigard.x), high_byte(valrigard.y), temppointer);
;
	lda     _valrigard+1
	sta     _TEMP+5
	lda     _valrigard+3
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jsr     _oam_meta_spr_fast_sub
;
; if (player_frame_timer) { 
;
	lda     _player_frame_timer
	beq     L3510
;
; --player_frame_timer;
;
	dec     _player_frame_timer
;
; }
;
L3510:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_korbat (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_korbat: near

.segment	"BANK5"

;
; __asm__("ldy %v", x);
;
	ldy     _x
;
; __asm__("lda %v, %s", enemies_timer, Y);
;
	lda     _enemies_timer,y
;
; __asm__("and #%b", 0b11111);
;
	and     #$1F
;
; __asm__("sta %v, %s", enemies_timer, Y);
;
	sta     _enemies_timer,y
;
; __asm__("and #%b", 0b11110);
;
	and     #$1E
;
; __asm__("sta %v", temp3);
;
	sta     _temp3
;
; temp3 |= ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$01
	ora     _temp3
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, korbat_sprite_lookup_table, temp3); 
;
	asl     a
	tay
	lda     _korbat_sprite_lookup_table,y
	sta     _temppointer
	lda     _korbat_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_grarrl (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_grarrl: near

.segment	"BANK5"

;
; __asm__("ldy %v", x);
;
	ldy     _x
;
; __asm__("lda %v, %s", enemies_timer, Y);
;
	lda     _enemies_timer,y
;
; __asm__("and #%b", 0b11111);
;
	and     #$1F
;
; __asm__("sta %v, %s", enemies_timer, Y);
;
	sta     _enemies_timer,y
;
; __asm__("and #%b", 0b11110);
;
	and     #$1E
;
; __asm__("sta %v", temp3);
;
	sta     _temp3
;
; temp3 |= ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$01
	ora     _temp3
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, grarrl_sprite_lookup_table, temp3); 
;
	asl     a
	tay
	lda     _grarrl_sprite_lookup_table,y
	sta     _temppointer
	lda     _grarrl_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_spikeball (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_spikeball: near

.segment	"BANK5"

;
; oam_meta_spr(temp_x, temp_y, spikeball);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     #<(_spikeball)
	ldx     #>(_spikeball)
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cannon (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_cannon: near

.segment	"BANK5"

;
; temp3 = enemies_extra2[x];
;
	ldy     _x
	lda     _enemies_extra2,y
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cannon_sprite_lookup_table, temp3); 
;
	asl     a
	tay
	lda     _cannon_sprite_lookup_table,y
	sta     _temppointer
	lda     _cannon_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cannonball (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_cannonball: near

.segment	"BANK5"

;
; oam_spr(temp_x, temp_y, CANNONBALL_SPRITE_OFFSET, 1);
;
	lda     _temp_x
	sta     _TEMP
	lda     _temp_y
	sta     _TEMP+1
	lda     #$18
	sta     _TEMP+2
	lda     #$01
	jmp     _oam_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_acid (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_acid: near

.segment	"BANK5"

;
; temp3 = enemies_extra2[x] >> 1;
;
	ldy     _x
	lda     _enemies_extra2,y
	lsr     a
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, acidblob_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _acidblob_sprite_lookup_table,y
	sta     _temppointer
	lda     _acidblob_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_acid_drop (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_acid_drop: near

.segment	"BANK5"

;
; oam_spr(temp_x, temp_y, ACIDDROP_SPRITE_OFFSET, 3);
;
	lda     _temp_x
	sta     _TEMP
	lda     _temp_y
	sta     _TEMP+1
	lda     #$17
	sta     _TEMP+2
	lda     #$03
	jmp     _oam_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_splyke (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_splyke: near

.segment	"BANK5"

;
; temp3 = enemies_extra2[x] & 0b110; // Mask the frame number.
;
	ldy     _x
	lda     _enemies_extra2,y
	and     #$06
	sta     _temp3
;
; temp4 = ENEMY_DIRECTION(x) | temp3;
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$01
	sta     ptr1
	lda     _temp3
	ora     ptr1
	sta     _temp4
;
; temp4 = temp4 | SPLYKE_IS_MOVING_AROUND(x) >> 2;
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$20
	lsr     a
	lsr     a
	ora     _temp4
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, splyke_sprite_lookup_table, temp4);
;
	asl     a
	tay
	lda     _splyke_sprite_lookup_table,y
	sta     _temppointer
	lda     _splyke_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sun (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_sun: near

.segment	"BANK5"

;
; temp3 = (enemies_actual_y[x] & 15) >> 3;
;
	ldy     _x
	lda     _enemies_actual_y,y
	and     #$0F
	lsr     a
	lsr     a
	lsr     a
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, sun_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _sun_sprite_lookup_table,y
	sta     _temppointer
	lda     _sun_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_boss (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_boss: near

.segment	"BANK5"

;
; temp3 = enemies_extra2[x]; // Copy that timer here.
;
	ldy     _x
	lda     _enemies_extra2,y
	sta     _temp3
;
; if (boss_state == 4 && temp3 & 0b10) { // BOSS_STATE_DAMAGED
;
	lda     _boss_state
	cmp     #$04
	bne     L3673
	lda     _temp3
	and     #$02
	beq     L3673
;
; return; // without drawing anything.
;
	rts
;
; temp4 = ENEMY_DIRECTION(x);
;
L3673:	ldy     _x
	lda     _enemies_flags,y
	and     #$01
	sta     _temp4
;
; if (boss_state != 5) { // not BOSS_STATE_DYING:
;
	lda     _boss_state
	cmp     #$05
	beq     L41E3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, boss_head_sprite_lookup_table, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _boss_head_sprite_lookup_table,y
	sta     _temppointer
	lda     _boss_head_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jsr     _oam_meta_spr_fast_sub
;
; temp0 = boss_state;
;
L41E3:	lda     _boss_state
	sta     _temp0
;
; AsmCallFunctionAtPtrOffsetByIndexVar(draw_boss_functions, temp0);
;
	asl     a
	tay
	lda     _draw_boss_functions,y
	ldx     _draw_boss_functions+1,y
	jsr     callax
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_purple_death_effect (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_purple_death_effect: near

.segment	"BANK5"

;
; temp3 = enemies_timer[x] >> 2; // 12 frames -> 3 valid positions
;
	ldy     _x
	lda     _enemies_timer,y
	lsr     a
	lsr     a
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, purple_death_effect_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _purple_death_effect_sprite_lookup_table,y
	sta     _temppointer
	lda     _purple_death_effect_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_splyke_death_effect (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_splyke_death_effect: near

.segment	"BANK5"

;
; temp3 = enemies_timer[x] >> 2; // 12 frames -> 3 valid positions
;
	ldy     _x
	lda     _enemies_timer,y
	lsr     a
	lsr     a
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, splyke_death_effect_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _splyke_death_effect_sprite_lookup_table,y
	sta     _temppointer
	lda     _splyke_death_effect_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_boss_fireball (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_boss_fireball: near

.segment	"BANK5"

;
; temp3 = enemies_timer[x]; 
;
	ldy     _x
	lda     _enemies_timer,y
	sta     _temp3
;
; temp3 += get_frame_count();
;
	jsr     _get_frame_count
	clc
	adc     _temp3
	sta     _temp3
;
; temp3 &= 1;
;
	and     #$01
	sta     _temp3
;
; temp3 += BOSS_MAGIC_SPRITE_OFFSET;
;
	lda     #$80
	clc
	adc     _temp3
	sta     _temp3
;
; oam_spr(temp_x, temp_y, temp3, 0);
;
	lda     _temp_x
	sta     _TEMP
	lda     _temp_y
	sta     _TEMP+1
	lda     _temp3
	sta     _TEMP+2
	lda     #$00
	jmp     _oam_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_floating_numbers_effect (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_floating_numbers_effect: near

.segment	"BANK5"

;
; temp3 = enemies_extra[x];
;
	ldy     _x
	lda     _enemies_extra,y
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, floating_numbers_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _floating_numbers_sprite_lookup_table,y
	sta     _temppointer
	lda     _floating_numbers_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; temp0 = enemies_timer[x];
;
	ldy     _x
	lda     _enemies_timer,y
	sta     _temp0
;
; temp_y += floating_numbers_y_offset_lookup_table[temp0];
;
	ldy     _temp0
	lda     _floating_numbers_y_offset_lookup_table,y
	clc
	adc     _temp_y
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, temppointer);
;
	lda     _temp_x
	sta     _TEMP+5
	lda     _temp_y
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_score (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_score: near

.segment	"BANK5"

;
; if (score == 0){ // Special case. (Haven't thought about optimizing this one away, perhaps I could.)
;
	lda     _score
	ora     _score+1
	bne     L3514
;
; oam_spr(232, 20, 0, 3);
;
	lda     #$E8
	sta     _TEMP
	lda     #$14
	sta     _TEMP+1
	lda     #$00
	sta     _TEMP+2
	lda     #$03
	jmp     _oam_spr_fast_sub
;
; y = 4; // 5 digits (indices 0...4)
;
L3514:	lda     #$04
	sta     _y
;
; temp0 = 0; // Found a nonzero digit? We want to skip leading zeroes.
;
	lda     #$00
	sta     _temp0
;
; for (x = 200; x <= 232; x+=8) {
;
	lda     #$C8
L41E4:	sta     _x
	cmp     #$E9
	bcs     L3527
;
; if (temp0) { // Already found a nonzero digit.
;
	lda     _temp0
	beq     L352F
;
; oam_spr(x, 20, score_string[y], 3);
;
	lda     _x
	sta     _TEMP
	lda     #$14
	sta     _TEMP+1
	ldy     _y
	lda     _score_string,y
	sta     _TEMP+2
	lda     #$03
	jsr     _oam_spr_fast_sub
;
; } else if (score_string[y]) { // This is the first nonzero digit.
;
	jmp     L41E5
L352F:	ldy     _y
	lda     _score_string,y
	beq     L41E5
;
; oam_spr(x, 20, score_string[y], 3);
;
	lda     _x
	sta     _TEMP
	lda     #$14
	sta     _TEMP+1
	ldy     _y
	lda     _score_string,y
	sta     _TEMP+2
	lda     #$03
	jsr     _oam_spr_fast_sub
;
; temp0 = 1; // Mark as having found a nonzero digit.
;
	lda     #$01
	sta     _temp0
;
; --y; // Next index.
;
L41E5:	dec     _y
;
; for (x = 200; x <= 232; x+=8) {
;
	lda     #$08
	clc
	adc     _x
	jmp     L41E4
;
; }
;
L3527:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_energy (void)
; ---------------------------------------------------------------

.segment	"BANK5"

.proc	_draw_energy: near

.segment	"BANK5"

;
; temp0 = energy >> 3;
;
	lda     _energy
	lsr     a
	lsr     a
	lsr     a
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, energy_bar_lookup_table, temp0);
;
	asl     a
	tay
	lda     _energy_bar_lookup_table,y
	sta     _temppointer
	lda     _energy_bar_lookup_table+1,y
	sta     _temppointer+1
;
; oam_meta_spr(ENERGY_BAR_X, ENERGY_BAR_Y, temppointer);
;
	lda     #$D8
	sta     _TEMP+5
	lda     #$1C
	sta     _TEMP+6
	lda     _temppointer
	ldx     _temppointer+1
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_sub: near

.segment	"CODE"

;
; nt = (temp1 & 1) << 1; // 0 or 2 for vertical scrolling
;
	lda     _temp1
	and     #$01
	asl     a
	sta     _nt
;
; y = low_byte(pseudo_scroll_y);
;
	lda     _pseudo_scroll_y
	sta     _y
;
; temp2 = draw_screen_sub_lookup_index_offset_0[scroll_count];
;
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_index_offset_0,y
	sta     _temp2
;
; temp4 = draw_screen_sub_lookup_index_offset_1[scroll_count];
;
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_index_offset_1,y
	sta     _temp4
;
; get_ppu_addr(address, nt, draw_screen_sub_lookup_addr_0[scroll_count], y);
;
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_addr_0,y
	sta     _TEMP+2
	lda     _nt
	sta     _TEMP+3
	lda     _y
	jsr     _get_ppu_addr_fast
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + temp2;
;
	lda     _y
	and     #$F0
	clc
	adc     _temp2
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	and     #$9c
	sta     _TEMP+7
	lda     _address+1
	sta     _TEMP+8
	lda     _index
	jsr     _buffer_4_mt_fast_sub
;
; get_ppu_addr(address, nt, draw_screen_sub_lookup_addr_1[scroll_count], y);
;
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_addr_1,y
	sta     _TEMP+2
	lda     _nt
	sta     _TEMP+3
	lda     _y
	jsr     _get_ppu_addr_fast
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + temp4;
;
	lda     _y
	and     #$F0
	clc
	adc     _temp4
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	and     #$9c
	sta     _TEMP+7
	lda     _address+1
	sta     _TEMP+8
	lda     _index
	jsr     _buffer_4_mt_fast_sub
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handle_tile_clear_queue (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_tile_clear_queue: near

.segment	"CODE"

;
; if (tile_clear_front == tile_clear_back) { return; }
;
	lda     _tile_clear_back
	cmp     _tile_clear_front
	beq     L39BD
;
; AsmSet2ByteFromPtrAtIndexVar(address, tile_clear_queue, tile_clear_front);
;
	lda     _tile_clear_front
	asl     a
	tay
	lda     _tile_clear_queue,y
	sta     _address
	lda     _tile_clear_queue+1,y
	sta     _address+1
;
; AsmSet1ByteFromPtrAtIndexVar(temp0, tile_clear_to_type_queue, tile_clear_front);
;
	ldy     _tile_clear_front
	lda     _tile_clear_to_type_queue,y
	sta     _temp0
;
; buffer_1_mt(address, temp0);
;
	lda     _address
	and     #$de
	sta     _TEMP
	lda     _address+1
	ora     #$40
	sta     _TEMP+1
	lda     _temp0
	jsr     _buffer_1_mt_fast_sub
;
; ++tile_clear_front;
;
	inc     _tile_clear_front
;
; tile_clear_front &= 0b11; // Mask to <4
;
	lda     _tile_clear_front
	and     #$03
	sta     _tile_clear_front
;
; }
;
L39BD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ begin_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_begin_level: near

.segment	"CODE"

;
; music_play(LEVEL_BEGIN_SONG);
;
	lda     #$05
	jsr     _music_play
;
; load_level_welcome_screen();
;
	jsr     _load_level_welcome_screen
;
; ppu_off(); // We're going to make big changes to VRAM so we need to turn it off.
;
	jsr     _ppu_off
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; SET_STATUS_ALIVE();
;
	lda     _player_flags
	and     #$FD
	sta     _player_flags
;
; load_level_new();
;
	jsr     _load_level_new
;
; seed_rng();
;
	jsr     _seed_rng
;
; calculate_shuffle_array();
;
	jsr     _calculate_shuffle_array
;
; convert_to_decimal(score);
;
	lda     _score
	ldx     _score+1
	jsr     _convert_to_decimal
;
; energy = MAX_ENERGY;
;
	lda     #$70
	sta     _energy
;
; tile_clear_front = 0;
;
	lda     #$00
	sta     _tile_clear_front
;
; tile_clear_back = 0;
;
	sta     _tile_clear_back
;
; player_flags = 0; 
;
	sta     _player_flags
;
; scroll_count = 0; 
;
	sta     _scroll_count
;
; player_death_timer = 0;
;
	sta     _player_death_timer
;
; boss_state = 0;
;
	sta     _boss_state
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; music_play(LEVEL_SONG_0); // music_play(level_music) -- maybe this can be selected randomly from a list?
;
	lda     #$01
	jmp     _music_play

.endproc

; ---------------------------------------------------------------
; void __near__ load_level_new (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level_new: near

.segment	"CODE"

;
; set_prg_bank(LEVEL_METADATA_BANK);
;
	lda     #$00
	jsr     _set_prg_bank
;
; nt_max = level_nt_length[level_index];
;
	ldy     _level_index
	lda     _level_nt_length,y
	sta     _nt_max
;
; nt_current = valrigard_starting_nt[level_index];
;
	ldy     _level_index
	lda     _valrigard_starting_nt,y
	sta     _nt_current
;
; high_byte(scroll_y) = nt_current; // The high byte of scroll_y is the nametable we're currently in (0-255).
;
	sta     _scroll_y+1
;
; low_byte(scroll_y) = 2;
;
	lda     #$02
	sta     _scroll_y
;
; high_byte(max_scroll_y) = nt_max - 1; // bottom of this level
;
	lda     _nt_max
	sec
	sbc     #$01
	sta     _max_scroll_y+1
;
; low_byte(max_scroll_y) = 2;
;
	lda     #$02
	sta     _max_scroll_y
;
; high_byte(min_scroll_y) = 0; // Min Scroll
;
	lda     #$00
	sta     _min_scroll_y+1
;
; low_byte(min_scroll_y) = 0x02;
;
	lda     #$02
	sta     _min_scroll_y
;
; initial_scroll = ((nt_current * 0x100) - 0x11);
;
	ldx     _nt_current
	lda     #$00
	sec
	sbc     #$11
	bcs     L3202
	dex
L3202:	sta     _initial_scroll
	stx     _initial_scroll+1
;
; temp4 = valrigard_inital_coords[level_index];
;
	ldy     _level_index
	lda     _valrigard_inital_coords,y
	sta     _temp4
;
; high_byte(valrigard.x) = (temp4 & 0xf0);
;
	and     #$F0
	sta     _valrigard+1
;
; high_byte(valrigard.y) = ((temp4 & 0x0f) * 16) + 2; 
;
	lda     _temp4
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$02
	sta     _valrigard+3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, level_compressed_nametable_pointers, level_index);
;
	lda     _level_index
	asl     a
	tay
	lda     _level_compressed_nametable_pointers,y
	sta     _temppointer
	lda     _level_compressed_nametable_pointers+1,y
	sta     _temppointer+1
;
; set_prg_bank(level_nametable_banks[level_index]);
;
	ldy     _level_index
	lda     _level_nametable_banks,y
	jsr     _set_prg_bank
;
; LZG_decode(temppointer, cmap);
;
	lda     _temppointer
	ldx     _temppointer+1
	jsr     pushax
	lda     #<(_cmap)
	ldx     #>(_cmap)
	jsr     _LZG_decode
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, nt_current);
;
	lda     _nt_current
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; set_data_pointer(temppointer);
;
	lda     _temppointer
	ldx     _temppointer+1
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; temp1 = high_byte(initial_scroll) + 1;
;
	lda     _initial_scroll+1
	clc
	adc     #$01
	sta     _temp1
;
; temp1 = (temp1 & 1) << 1;
;
	and     #$01
	asl     a
	sta     _temp1
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L41EC:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L41EB:	sta     _x
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; get_ppu_addr(address, temp1, x, y);
;
	lda     _x
	sta     _TEMP+2
	lda     _temp1
	sta     _TEMP+3
	lda     _y
	jsr     _get_ppu_addr_fast
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	and     #$9c
	sta     _TEMP+7
	lda     _address+1
	sta     _TEMP+8
	lda     _index
	jsr     _buffer_4_mt_fast_sub
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L41F1
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L41EB
;
; if (y == 0xe0) break;
;
L41F1:	lda     _y
	cmp     #$E0
	beq     L41F2
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L41EC
;
; temp1 = temp1 ^ 2; // flip that 0000 0010 bit
;
L41F2:	lda     _temp1
	eor     #$02
	sta     _temp1
;
; temp0 = nt_current == 0 ? nt_current + 1 : nt_current - 1;
;
	lda     _nt_current
	bne     L41F3
	clc
	adc     #$01
	jmp     L41F4
L41F3:	lda     _nt_current
	sec
	sbc     #$01
L41F4:	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp0);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; set_data_pointer(temppointer);
;
	lda     _temppointer
	ldx     _temppointer+1
	jsr     _set_data_pointer
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L41ED:	sta     _x
;
; y = 0xe0;
;
	lda     #$E0
	sta     _y
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; get_ppu_addr(address, temp1, x, y);
;
	lda     _x
	sta     _TEMP+2
	lda     _temp1
	sta     _TEMP+3
	lda     _y
	jsr     _get_ppu_addr_fast
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	and     #$9c
	sta     _TEMP+7
	lda     _address+1
	sta     _TEMP+8
	lda     _index
	jsr     _buffer_4_mt_fast_sub
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L3289
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L41ED
;
; clear_vram_buffer();
;
L3289:	jsr     _clear_vram_buffer
;
; memfill(&enemies_x, 0, MAX_ENEMIES * 9);
;
	jsr     decsp3
	lda     #<(_enemies_x)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_enemies_x)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	ldx     #$02
	lda     #$40
	jsr     _memfill
;
; enemies_count = 0;
;
	lda     #$00
	sta     _enemies_count
;
; set_prg_bank(LEVEL_METADATA_BANK);
;
	jsr     _set_prg_bank
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, level_enemy_data, level_index);
;
	lda     _level_index
	asl     a
	tay
	lda     _level_enemy_data,y
	sta     _temppointer
	lda     _level_enemy_data+1,y
	sta     _temppointer+1
;
; for (x = 0, y = 0; x < MAX_ENEMIES; ++x){
;
	lda     #$00
	sta     _x
	sta     _y
L41F5:	lda     _x
	cmp     #$40
	jcs     L41F9
;
; enemies_y[x] = 0;
;
	ldy     _x
	lda     #$00
	sta     _enemies_y,y
;
; AsmSet1ByteFromZpPtrAtIndexVar(temp1, temppointer, y); // Get a byte of data - the bitpacked coords.
;
	ldy     _y
	lda     (_temppointer),y
	sta     _temp1
;
; if (temp1 == 0xff) break; // 0xff terminates the enemy data.
;
	cmp     #$FF
	jeq     L41F9
;
; temp2 = temp1 & 0xf0;
;
	lda     _temp1
	and     #$F0
	sta     _temp2
;
; enemies_x[x] = temp2;
;
	ldy     _x
	lda     _temp2
	sta     _enemies_x,y
;
; temp2 = (temp1 & 0x0f) << 4;
;
	lda     _temp1
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _temp2
;
; enemies_actual_y[x] = temp2;
;
	ldy     _x
	lda     _temp2
	sta     _enemies_actual_y,y
;
; ++y; // Next byte:
;
	inc     _y
;
; AsmSet1ByteFromZpPtrAtIndexVar(temp1, temppointer, y); // the namtetable byte.
;
	ldy     _y
	lda     (_temppointer),y
	sta     _temp1
;
; enemies_nt[x] = temp1;
;
	ldy     _x
	lda     _temp1
	sta     _enemies_nt,y
;
; ++y; // Next byte:
;
	inc     _y
;
; AsmSet1ByteFromZpPtrAtIndexVar(temp1, temppointer, y); // the type byte.
;
	ldy     _y
	lda     (_temppointer),y
	sta     _temp1
;
; enemies_type[x] = temp1; 
;
	ldy     _x
	lda     _temp1
	sta     _enemies_type,y
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; if (temp1 == 4) { // ENEMY_CANNON
;
	cmp     #$04
	bne     L41F6
;
; ++x;
;
	inc     _x
;
; enemies_type[x] = ENEMY_CANNONBALL;
;
	ldy     _x
	lda     #$09
;
; } else if (temp1 == 5) { // ENEMY_ACIDPOOL
;
	jmp     L41EE
L41F6:	lda     _temp1
	cmp     #$05
	bne     L41F7
;
; temp2 = rand8() | 0b10000000;
;
	jsr     _rand8
	ora     #$80
	sta     _temp2
;
; enemies_extra[x] = temp2;
;
	ldy     _x
	lda     _temp2
	sta     _enemies_extra,y
;
; ++x;
;
	inc     _x
;
; } else if (temp1 == 8) { // ENEMY_BOSS
;
	jmp     L41F8
L41F7:	lda     _temp1
	cmp     #$08
	bne     L41F8
;
; ++x; // += 3; // Make room for magic bolts.
;
	inc     _x
;
; enemies_type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies_type,y
;
; ++x;
;
	inc     _x
;
; enemies_type[x] = ENEMY_NONE;
;
	ldy     _x
	sta     _enemies_type,y
;
; ++x;
;
	inc     _x
;
; enemies_type[x] = ENEMY_NONE;
;
	ldy     _x
L41EE:	sta     _enemies_type,y
;
; ++y; // Next byte.
;
L41F8:	inc     _y
;
; for (x = 0, y = 0; x < MAX_ENEMIES; ++x){
;
	inc     _x
	jmp     L41F5
;
; enemies_count = x+1+4; // Plus a bit of leeway for floating number effects
;
L41F9:	lda     _x
	clc
	adc     #$01
	bcc     L41F0
	clc
L41F0:	adc     #$04
	sta     _enemies_count
;
; for(++x; x < MAX_ENEMIES; ++x) {
;
L41FD:	inc     _x
	lda     _x
	cmp     #$40
	bcs     L41FA
;
; enemies_type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies_type,y
;
; for(++x; x < MAX_ENEMIES; ++x) {
;
	jmp     L41FD
;
; for (x = 0; x < enemies_count; ++x) {
;
L41FA:	lda     #$00
	sta     _x
	tax
L41FB:	lda     _x
	cmp     _enemies_count
	txa
	sbc     #$00
	bcs     L3338
;
; switch (GET_ENEMY_TYPE(x)) {
;
	ldy     _x
	lda     _enemies_type,y
;
; }
;
	cmp     #$04
	beq     L334C
	cmp     #$05
	bne     L41FC
;
; enemies_timer[x] = 0b10000000;
;
	ldy     _x
	lda     #$80
	sta     _enemies_timer,y
;
; temp0 = rand8() & 0b01111111;
;
L334C:	jsr     _rand8
	and     #$7F
	sta     _temp0
;
; enemies_timer[x] = temp0;
;
	ldy     _x
	ldx     #$00
	lda     _temp0
	sta     _enemies_timer,y
;
; for (x = 0; x < enemies_count; ++x) {
;
L41FC:	inc     _x
	jmp     L41FB
;
; }
;
L3338:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calculate_shuffle_array (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calculate_shuffle_array: near

.segment	"CODE"

;
; temp0 = 0; // Index in the shuffle array
;
	lda     #$00
	sta     _temp0
;
; shuffle_leg_size = enemies_count; // Shuffle array leg size. (1/4 the size of the shuffle array.)
;
	lda     _enemies_count
	sta     _shuffle_leg_size
;
; for (x = 0; x < shuffle_leg_size; ++x) {
;
	lda     #$00
	sta     _x
	tax
L4202:	lda     _x
	cmp     _shuffle_leg_size
	txa
	sbc     #$00
	bcs     L4203
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; for (x = 0; x < shuffle_leg_size; ++x) {
;
	inc     _x
	jmp     L4202
;
; for (x = shuffle_leg_size - 1; ; --x) {
;
L4203:	lda     _shuffle_leg_size
	sec
	sbc     #$01
	sta     _x
;
; shuffle_array[temp0] = x;
;
L3369:	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; if (x == 0) { break; }
;
	lda     _x
	beq     L41FE
;
; for (x = shuffle_leg_size - 1; ; --x) {
;
	dec     _x
	jmp     L3369
;
; for (x = 0; x < shuffle_leg_size; x += 2){
;
L41FE:	sta     _x
	ldx     #$00
	lda     _x
	cmp     _shuffle_leg_size
	bcs     L4205
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; for (x = 0; x < shuffle_leg_size; x += 2){
;
	lda     #$02
	clc
	adc     _x
	jmp     L41FE
;
; for (x = 1; x < shuffle_leg_size; x += 2){
;
L4205:	lda     #$01
L41FF:	sta     _x
	cmp     _shuffle_leg_size
	txa
	sbc     #$00
	bcs     L4206
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; for (x = 1; x < shuffle_leg_size; x += 2){
;
	lda     #$02
	clc
	adc     _x
	jmp     L41FF
;
; for (x = shuffle_leg_size - 1; ; x -= 2) {
;
L4206:	lda     _shuffle_leg_size
	sec
	sbc     #$01
L4200:	sta     _x
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; if (x < 2) { break; }
;
	lda     _x
	cmp     #$02
	bcc     L4207
;
; for (x = shuffle_leg_size - 1; ; x -= 2) {
;
	sec
	sbc     #$02
	jmp     L4200
;
; for (x = shuffle_leg_size - 2; ; x -= 2) {
;
L4207:	lda     _shuffle_leg_size
L420A:	sec
	sbc     #$02
	sta     _x
;
; shuffle_array[temp0] = x;
;
	ldy     _temp0
	lda     _x
	sta     _shuffle_array,y
;
; ++temp0;
;
	inc     _temp0
;
; if (x < 2) { break; }
;
	lda     _x
	cmp     #$02
	bcc     L4208
;
; for (x = shuffle_leg_size - 2; ; x -= 2) {
;
	jmp     L420A
;
; shuffle_offset = 0; 
;
L4208:	lda     #$00
	sta     _shuffle_offset
;
; shuffle_maximum = 4 * shuffle_leg_size; // Set the size of the calculated portion of the shuffle array.
;
	lda     _shuffle_leg_size
	asl     a
	asl     a
	sta     _shuffle_maximum
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_level_welcome_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level_welcome_screen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; LZG_decode(welcome_screen, cmap);
;
	lda     #<(_welcome_screen)
	ldx     #>(_welcome_screen)
	jsr     pushax
	lda     #<(_cmap)
	ldx     #>(_cmap)
	jsr     _LZG_decode
;
; set_prg_bank(LEVEL_METADATA_BANK);
;
	lda     #$00
	jsr     _set_prg_bank
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, level_names, level_index);
;
	lda     _level_index
	asl     a
	tay
	lda     _level_names,y
	sta     _temppointer
	lda     _level_names+1,y
	sta     _temppointer+1
;
; temp0 = strlen(temppointer);
;
	lda     _temppointer
	ldx     _temppointer+1
	jsr     _strlen
	sta     _temp0
;
; temp1 = 16;
;
	lda     #$10
	sta     _temp1
;
; temp1 -= temp0 >> 1;
;
	lda     _temp0
	lsr     a
	eor     #$FF
	sec
	adc     _temp1
	sta     _temp1
;
; temp_mutablepointer = (cmap + 256 + 64); // This sets the correct row
;
	lda     #>(_cmap+320)
	sta     _temp_mutablepointer+1
	lda     #<(_cmap+320)
	sta     _temp_mutablepointer
;
; temp_mutablepointer += temp1; // and then this sets the correct distance from the left of the screen
;
	lda     _temp1
	clc
	adc     _temp_mutablepointer
	sta     _temp_mutablepointer
	lda     #$00
	adc     _temp_mutablepointer+1
	sta     _temp_mutablepointer+1
;
; for (temp2 = 0; temp2 < temp0; ++temp2) {
;
	lda     #$00
	sta     _temp2
	tax
L420B:	lda     _temp2
	cmp     _temp0
	txa
	sbc     #$00
	bcs     L318A
;
; AsmSet1ByteFromZpPtrAtIndexVar(temp3, temppointer, temp2); //temp3 = temppointer[temp2];
;
	ldy     _temp2
	lda     (_temppointer),y
	sta     _temp3
;
; AsmSet1ByteAtZpPtrWithOffset(temp_mutablepointer, temp2, temp3); //temp_mutablepointer[temp2] = temp3;
;
	ldy     _temp2
	lda     _temp3
	sta     (_temp_mutablepointer),y
;
; for (temp2 = 0; temp2 < temp0; ++temp2) {
;
	inc     _temp2
	jmp     L420B
;
; vram_write(cmap, (32*30));
;
L318A:	lda     #<(_cmap)
	ldx     #>(_cmap)
	jsr     pushax
	ldx     #$03
	lda     #$C0
	jsr     _vram_write
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; set_prg_bank(METASPRITE_BANK);
;
	lda     #$05
	jsr     _set_prg_bank
;
; oam_meta_spr(120, 114, valrigard_idle_left);
;
	lda     #$78
	sta     _TEMP+5
	lda     #$72
	sta     _TEMP+6
	lda     #<(_valrigard_idle_left)
	ldx     #>(_valrigard_idle_left)
	jsr     _oam_meta_spr_fast_sub
;
; for (temp0 = 0; temp0 < 150; ++temp0) {
;
	lda     #$00
	sta     _temp0
L420C:	lda     _temp0
	cmp     #$96
	bcs     L31AF
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new) { break; }
;
	lda     _pad1_new
	bne     L31AF
;
; for (temp0 = 0; temp0 < 150; ++temp0) {
;
	inc     _temp0
	jmp     L420C
;
; oam_clear(); // Clear the Valrigard sprite.
;
L31AF:	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ clear_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_screen: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; set_scroll_y(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_y
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ put_str_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str_sub: near

.segment	"CODE"

;
; vram_adr(address);
;
	lda     _address
	ldx     _address+1
	jsr     _vram_adr
;
; while (temp0) {
;
	jmp     L2F45
;
; vram_put(temp0);
;
L2F3E:	lda     _temp0
	jsr     _vram_put
;
; ++temppointer;
;
	inc     _temppointer
	bne     L2F45
	inc     _temppointer+1
;
; temp0 = *temppointer;
;
L2F45:	lda     _temppointer+1
	sta     ptr1+1
	lda     _temppointer
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     _temp0
;
; while (temp0) {
;
	lda     _temp0
	bne     L2F3E
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = valrigard.x;
;
	lda     _valrigard+1
	sta     _old_x+1
	lda     _valrigard
	sta     _old_x
;
; if (STATUS_DEAD) {
;
	lda     _player_flags
	and     #$02
	beq     L421B
;
; valrigard.velocity_x = 0;
;
	ldx     #$00
	txa
;
; else if (pad1 & PAD_LEFT) {
;
	jmp     L421E
L421B:	lda     _pad1
	and     #$02
	beq     L421C
;
; SET_DIRECTION_LEFT();
;
	lda     _player_flags
	and     #$FE
	sta     _player_flags
;
; valrigard.velocity_x = -SPEED;
;
	ldx     #$FE
	lda     #$B0
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L421E
L421C:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L421E
;
; SET_DIRECTION_RIGHT();
;
	lda     _player_flags
	ora     #$01
	sta     _player_flags
;
; valrigard.velocity_x = SPEED;
;
	inx
	lda     #$50
;
; valrigard.velocity_x = 0;
;
L421E:	sta     _valrigard+4
	stx     _valrigard+4+1
;
; valrigard.x += valrigard.velocity_x;
;
	lda     _valrigard+4
	clc
	adc     _valrigard
	sta     _valrigard
	lda     _valrigard+4+1
	adc     _valrigard+1
	sta     _valrigard+1
;
; hitbox.x = high_byte(valrigard.x);
;
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; hitbox.width = VALRIGARD_WIDTH;
;
	lda     #$0B
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_HEIGHT;
;
	lda     #$0D
	sta     _hitbox+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if (collision_L && collision_R) { // Half-stuck in a wall, I'm guessing?
;
	lda     _collision_L
	beq     L374D
	lda     _collision_R
	beq     L374D
;
; valrigard.x = old_x;
;
	lda     _old_x+1
	sta     _valrigard+1
	lda     _old_x
	sta     _valrigard
;
; else if (collision_L) {
;
	jmp     L375A
L374D:	lda     _collision_L
	beq     L3754
;
; high_byte(valrigard.x) -= eject_L;
;
	lda     _eject_L
;
; else if (collision_R) {
;
	jmp     L4240
L3754:	lda     _collision_R
	beq     L375A
;
; high_byte(valrigard.x) -= eject_R;
;
	lda     _eject_R
L4240:	eor     #$FF
	sec
	adc     _valrigard+1
	sta     _valrigard+1
;
; old_y = valrigard.y;
;
L375A:	lda     _valrigard+2+1
	sta     _old_y+1
	lda     _valrigard+2
	sta     _old_y
;
; if (STATUS_DEAD) { // Fall at maximum speed if we're dead.
;
	lda     _player_flags
	and     #$02
;
; else if (pad1 & PAD_UP && energy > 0) { // If we're holding up on the DPad...
;
	bne     L4241
	lda     _pad1
	and     #$08
	beq     L3767
	lda     _energy
	beq     L3767
;
; if (collision_D) { // If grounded...
;
	lda     _collision_D
;
; } else {
;
	bne     L4242
;
; valrigard.velocity_y -= GRAVITY;
;
	lda     _valrigard+6
	sec
	sbc     #$30
	sta     _valrigard+6
	bcs     L3772
	dec     _valrigard+6+1
;
; if (valrigard.velocity_y < -SPEED) { valrigard.velocity_y = -SPEED; }
;
L3772:	lda     _valrigard+6
	cmp     #$B0
	lda     _valrigard+6+1
	sbc     #$FE
	bvc     L3775
	eor     #$80
L3775:	bpl     L4223
L4242:	ldx     #$FE
	lda     #$B0
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; energy -= 1;
;
L4223:	dec     _energy
;
; if (!player_frame_timer && !IS_SWINGING_SWORD) {
;
	lda     _player_frame_timer
	bne     L3785
	lda     _player_flags
	and     #$04
	bne     L3785
;
; player_frame_timer = 14;
;
	lda     #$0E
	sta     _player_frame_timer
;
; } else {
;
	jmp     L3785
;
; valrigard.velocity_y += GRAVITY;
;
L3767:	lda     #$30
	clc
	adc     _valrigard+6
	sta     _valrigard+6
	bcc     L3784
	inc     _valrigard+6+1
;
; if (valrigard.velocity_y > MAX_FALL) { valrigard.velocity_y = MAX_FALL; }
;
L3784:	lda     _valrigard+6
	cmp     #$51
	lda     _valrigard+6+1
	sbc     #$01
	bvs     L3787
	eor     #$80
L3787:	bpl     L3785
L4241:	ldx     #$01
	lda     #$50
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; valrigard.y += valrigard.velocity_y;
;
L3785:	lda     _valrigard+6
	clc
	adc     _valrigard+2
	sta     _valrigard+2
	lda     _valrigard+6+1
	adc     _valrigard+2+1
	sta     _valrigard+2+1
;
; if (high_byte(valrigard.y) < 0x01) { valrigard.y = 0x100; }
;
	lda     _valrigard+3
	bne     L4226
	ldx     #$01
;
; else if (high_byte(valrigard.y) > 0xf0) { valrigard.y = 0xf000; }
;
	jmp     L4239
L4226:	lda     _valrigard+3
	cmp     #$F1
	bcc     L4227
	ldx     #$F0
	lda     #$00
L4239:	sta     _valrigard+2
	stx     _valrigard+2+1
;
; hitbox.x = high_byte(valrigard.x);
;
L4227:	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U) {
;
	lda     _collision_U
	beq     L379E
;
; high_byte(valrigard.y) -= eject_U;
;
	lda     _eject_U
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; if (did_headbonk) { 
;
	lda     _did_headbonk
	jeq     L422E
;
; high_byte(valrigard.y) += 4;
;
	lda     #$04
	clc
	adc     _valrigard+3
	sta     _valrigard+3
;
; valrigard.velocity_y = 0;
;
	lda     #$00
	sta     _valrigard+6
	sta     _valrigard+6+1
;
; else if (collision_D) {
;
	jmp     L422E
L379E:	lda     _collision_D
	beq     L422E
;
; high_byte(valrigard.y) -= eject_D;
;
	lda     _eject_D
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; if (!STATUS_DEAD) { 
;
	lda     _player_flags
	and     #$02
	bne     L422E
;
; valrigard.x += conveyor_delta;
;
	tax
	lda     _conveyor_delta
	cmp     #$80
	bcc     L421A
	dex
	clc
L421A:	adc     _valrigard
	sta     _valrigard
	txa
	adc     _valrigard+1
	sta     _valrigard+1
;
; energy += 4;
;
	lda     #$04
	clc
	adc     _energy
	sta     _energy
;
; if (energy > MAX_ENERGY) { energy = MAX_ENERGY; }
;
	cmp     #$71
	bcc     L4229
	lda     #$70
	sta     _energy
;
; if (TOUCHING_YELLOW_DOOR && (pad1 & PAD_UP)) {
;
L4229:	lda     _player_flags
	and     #$10
	beq     L422D
	lda     _pad1
	and     #$08
	beq     L422D
;
; game_mode = MODE_LEVEL_COMPLETE;
;
	lda     #$04
	sta     _game_mode
;
; if (pad1 & (PAD_LEFT | PAD_RIGHT)) {
;
L422D:	lda     _pad1
	and     #$03
	beq     L422E
;
; SET_IS_WALKING();
;
	lda     _player_flags
	ora     #$40
	sta     _player_flags
;
; ++player_walking_timer;
;
	inc     _player_walking_timer
;
; if (player_walking_timer > 23) {
;
	lda     _player_walking_timer
	cmp     #$18
	bcc     L422E
;
; player_walking_timer = 0;
;
	lda     #$00
	sta     _player_walking_timer
;
; if (high_byte(valrigard.x) < 0x02) { // 0x200 because speed is 0x150, so it needs to be greater
;
L422E:	lda     _valrigard+1
	cmp     #$02
	bcs     L422F
;
; valrigard.x = 0x0200; // This also ensures that none of Valrigard's pixels will be cut off
;
	ldx     #$02
;
; } else if (high_byte(valrigard.x) > 0xf2) { // This also ensures no pixels get cut off
;
	jmp     L423F
L422F:	lda     _valrigard+1
	cmp     #$F3
	bcc     L4230
;
; valrigard.x = 0xf200;
;
	ldx     #$F2
L423F:	lda     #$00
	sta     _valrigard
	stx     _valrigard+1
;
; if (STATUS_DEAD) { return; }
;
L4230:	lda     _player_flags
	and     #$02
	beq     L4243
;
; }
;
	rts
;
; if (TOUCHING_SPIKES) {
;
L4243:	lda     _player_flags
	and     #$20
	beq     L4232
;
; hitbox.x = high_byte(valrigard.x) + VALRIGARD_SPIKE_HITBOX_WIDTH_OFFSET; 
;
	lda     _valrigard+1
	clc
	adc     #$01
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y) + VALRIGARD_SPIKE_HITBOX_HEIGHT_OFFSET; 
;
	lda     _valrigard+3
	clc
	adc     #$01
	sta     _hitbox+1
;
; hitbox.width = VALRIGARD_SPIKE_HITBOX_WIDTH;
;
	lda     #$09
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_SPIKE_HITBOX_HEIGHT;
;
	lda     #$0B
	sta     _hitbox+3
;
; RESET_TOUCHING_SPIKES(); // Clear the spike flag, then try to collide with the background again.
;
	lda     _player_flags
	and     #$DF
	sta     _player_flags
;
; bg_collision();
;
	jsr     _bg_collision
;
; if (TOUCHING_SPIKES) { // If we're still touching spikes even with a smaller hitbox, we die.
;
	lda     _player_flags
	and     #$20
	beq     L4232
;
; if (!STATUS_DEAD) { 
;
	lda     _player_flags
	and     #$02
	bne     L4231
;
; sfx_play(SFX_SMACK, 0);
;
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_stop();
;
	jsr     _music_stop
;
; SET_STATUS_DEAD();
;
L4231:	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; if (high_byte(valrigard.y) > 0xef) { 
;
L4232:	lda     _valrigard+3
	cmp     #$F0
	bcc     L3809
;
; if (level_index >= NUMBER_OF_LEVELS - NUMBER_OF_BONUS_LEVELS) { // If we're in a bonus level:
;
	lda     _level_index
	cmp     #$1B
	bcc     L4233
;
; game_mode = MODE_LEVEL_COMPLETE;
;
	lda     #$04
	sta     _game_mode
;
; } else {
;
	jmp     L3809
;
; SET_STATUS_DEAD();    
;
L4233:	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; temp5 = valrigard.y;
;
L3809:	lda     _valrigard+2+1
	sta     _temp5+1
	lda     _valrigard+2
	sta     _temp5
;
; if (valrigard.y < MAX_UP && scroll_y > min_scroll_y) {
;
	ldx     _valrigard+2+1
	cpx     #$40
	bcs     L380F
	lda     _scroll_y
	sec
	sbc     _min_scroll_y
	sta     tmp1
	lda     _scroll_y+1
	sbc     _min_scroll_y+1
	ora     tmp1
	beq     L380F
	bcc     L380F
;
; temp1 = (MAX_UP - valrigard.y + 0x80) >> 8; // "the numbers work better with +80 (like 0.5)". I'll take his word for it.
;
	lda     #$00
	sec
	sbc     _valrigard+2
	pha
	lda     #$40
	sbc     _valrigard+2+1
	tax
	pla
	clc
	adc     #$80
	bcc     L3816
	inx
L3816:	txa
	sta     _temp1
;
; scroll_y = sub_scroll_y(temp1, scroll_y);
;
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; high_byte(valrigard.y) += temp1;
;
	lda     _temp1
	clc
;
; else if (valrigard.y > MIN_DOWN && scroll_y < max_scroll_y) {
;
	jmp     L423B
L380F:	lda     _valrigard+2
	cmp     #$01
	lda     _valrigard+2+1
	sbc     #$80
	bcc     L4235
	lda     _scroll_y
	cmp     _max_scroll_y
	lda     _scroll_y+1
	sbc     _max_scroll_y+1
	bcc     L3820
L4235:	rts
;
; temp1 = (MIN_DOWN + valrigard.y + 0x80) >> 8;
;
L3820:	lda     _valrigard+2
	pha
	lda     _valrigard+2+1
	clc
	adc     #$80
	tax
	pla
	clc
	adc     #$80
	bcc     L3826
	inx
L3826:	stx     _temp1
;
; add_scroll_y(scroll_y, temp1, scroll_y);
;
	lda     _scroll_y
	sta     _TEMP
	lda     _scroll_y+1
	sta     _TEMP+1
	lda     _temp1
	jsr     _add_scroll_y_fast_sub
	sta     _scroll_y
	stx     _scroll_y+1
;
; high_byte(valrigard.y) -= temp1;
;
	lda     _temp1
	eor     #$FF
	sec
L423B:	adc     _valrigard+3
	sta     _valrigard+3
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ swing_sword (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_swing_sword: near

.segment	"CODE"

;
; if ((pad1 & PAD_A) && !player_sword_timer && !(pad1 & PAD_UP)) {
;
	lda     _pad1
	and     #$80
	beq     L3836
	lda     _player_sword_timer
	bne     L3836
	lda     _pad1
	and     #$08
	bne     L3836
;
; player_sword_timer = 37;
;
	lda     #$25
	sta     _player_sword_timer
;
; player_frame_timer = 14;
;
	lda     #$0E
	sta     _player_frame_timer
;
; SET_STATUS_SWINGING_SWORD();
;
	lda     _player_flags
	ora     #$04
	sta     _player_flags
;
; sfx_play(SFX_SWORD_SLASH,0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; if (player_sword_timer) { 
;
L3836:	lda     _player_sword_timer
	beq     L3846
;
; --player_sword_timer;
;
	dec     _player_sword_timer
;
; } else {
;
	rts
;
; SET_STATUS_NOT_SWINGING_SWORD();
;
L3846:	lda     _player_flags
	and     #$FB
	sta     _player_flags
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; temp3 = hitbox.y;
;
	lda     _hitbox+1
	sta     _temp3
;
; add_scroll_y(temp6, temp3, scroll_y);
;
	lda     _scroll_y
	sta     _TEMP
	lda     _scroll_y+1
	sta     _TEMP+1
	lda     _temp3
	jsr     _add_scroll_y_fast_sub
	sta     _temp6
	stx     _temp6+1
;
; nt_current = high_byte(temp6);
;
	lda     _temp6+1
	sta     _nt_current
;
; temp5 = temp6; // Equivalent to add_scroll_y(temp5, temp3, scroll_y);
;
	lda     _temp6+1
	sta     _temp5+1
	lda     _temp6
	sta     _temp5
;
; temp3 = low_byte(temp5); // low byte y
;
	sta     _temp3
;
; temp1 = hitbox.x; // x left
;
	lda     _hitbox
	sta     _temp1
;
; eject_L = temp1 | 0xf0;
;
	ora     #$F0
	sta     _eject_L
;
; eject_U = temp3 | 0xf0;
;
	lda     _temp3
	ora     #$F0
	sta     _eject_U
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L4248
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; if (!enemy_is_using_bg_collision) { bg_collision_sub_collision_u(); }
;
	lda     _enemy_is_using_bg_collision
	bne     L4248
	jsr     _bg_collision_sub_collision_u
;
; temp1 += hitbox.width; // x right
;
L4248:	lda     _hitbox+2
	clc
	adc     _temp1
	sta     _temp1
;
; eject_R = (temp1 + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L3884
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; if (!enemy_is_using_bg_collision) { bg_collision_sub_collision_u(); }
;
	lda     _enemy_is_using_bg_collision
	bne     L3884
	jsr     _bg_collision_sub_collision_u
;
; add_scroll_y(temp6, hitbox.height, temp6);
;
L3884:	lda     _temp6
	sta     _TEMP
	lda     _temp6+1
	sta     _TEMP+1
	lda     _hitbox+3
	jsr     _add_scroll_y_fast_sub
	sta     _temp6
	stx     _temp6+1
;
; nt_current = high_byte(temp6);
;
	lda     _temp6+1
	sta     _nt_current
;
; temp3 = hitbox.y + hitbox.height; // y bottom
;
	lda     _hitbox+1
	clc
	adc     _hitbox+3
	sta     _temp3
;
; add_scroll_y(temp5, temp3, scroll_y); // upper left
;
	lda     _scroll_y
	sta     _TEMP
	lda     _scroll_y+1
	sta     _TEMP+1
	lda     _temp3
	jsr     _add_scroll_y_fast_sub
	sta     _temp5
	stx     _temp5+1
;
; temp3 = low_byte(temp5); // low byte y
;
	lda     _temp5
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3
	cmp     #$F0
	bcs     L38B3
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L38AC
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp1 = hitbox.x; // x left
;
L38AC:	lda     _hitbox
	sta     _temp1
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L38B3
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L38B3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = high_byte(temp5);
;
	lda     _temp5+1
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temp_mutablepointer, cmaps, temp0);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temp_mutablepointer
	lda     _cmaps+1,y
	sta     _temp_mutablepointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(temp4, temp_mutablepointer, coordinates);
;
	ldy     _coordinates
	lda     (_temp_mutablepointer),y
	sta     _temp4
;
; temp0 = metatile_property_lookup_table[temp4];
;
	ldy     _temp4
	lda     _metatile_property_lookup_table,y
	sta     _temp0
;
; collision = METATILE_IS_SOLID(temp4);
;
	ldy     _temp4
	lda     _metatile_property_lookup_table,y
	and     #$01
	sta     _collision
;
; if (temp0 == METATILE_NO_EFFECT || temp0 == METATILE_SOLID || enemy_is_using_bg_collision) { return; }
;
	lda     _temp0
	beq     L424B
	cmp     #$01
	beq     L424B
	lda     _enemy_is_using_bg_collision
	beq     L424C
L424B:	rts
;
; if (temp0 & METATILE_YELLOW_DOOR) {
;
L424C:	lda     _temp0
	and     #$10
	beq     L424D
;
; SET_TOUCHING_YELLOW_DOOR();
;
	lda     _player_flags
	ora     #$10
;
; } else if (temp0 & METATILE_POWERUP) {
;
	jmp     L4249
L424D:	lda     _temp0
	and     #$40
	beq     L4250
;
; AsmSet1ByteAtZpPtrWithConstOffset(temp_mutablepointer, coordinates, EMPTY_TILE);
;
	ldy     _coordinates
	lda     #$2C
	sta     (_temp_mutablepointer),y
;
; if (temp4 == STAR_TILE) { 
;
	lda     _temp4
	cmp     #$2A
	bne     L424E
;
; ++score;
;
	inc     _score
	bne     L38F1
	inc     _score+1
;
; sfx_play(SFX_STAR_COLLECT,1); // Star collection
;
L38F1:	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; SET_SCORE_CHANGED_THIS_FRAME();
;
	lda     _player_flags
	ora     #$08
	sta     _player_flags
;
; else if (temp4 == ENERGY_REFILL_TILE) { energy = MAX_ENERGY; }
;
	jmp     L424F
L424E:	lda     _temp4
	cmp     #$2B
	bne     L424F
	lda     #$70
	sta     _energy
;
; nt = (nt_current & 1) << 1;
;
L424F:	lda     _nt_current
	and     #$01
	asl     a
	sta     _nt
;
; get_ppu_addr(address, nt, temp1, temp3 & 0xf0);
;
	lda     _temp1
	sta     _TEMP+2
	lda     _nt
	sta     _TEMP+3
	lda     _temp3
	and     #$F0
	jsr     _get_ppu_addr_fast
	sta     _address
	stx     _address+1
;
; AsmSet2ByteAtPtrWithOffset(tile_clear_queue, tile_clear_back, address);
;
	lda     _tile_clear_back
	asl     a
	tay
	lda     _address
	sta     _tile_clear_queue,y
	lda     _address+1
	sta     _tile_clear_queue+1,y
;
; tile_clear_to_type_queue[tile_clear_back] = EMPTY_TILE;
;
	ldy     _tile_clear_back
	lda     #$2C
	sta     _tile_clear_to_type_queue,y
;
; ++tile_clear_back;
;
	inc     _tile_clear_back
;
; tile_clear_back &= 0b11; // Mask to <4
;
	lda     _tile_clear_back
	and     #$03
	sta     _tile_clear_back
;
; } else if (temp0 & METATILE_CONVEYOR_LEFT) {
;
	rts
L4250:	lda     _temp0
	and     #$04
	beq     L4251
;
; conveyor_delta = LEFT_CONVEYOR_DELTA;
;
	lda     #$81
	sta     _conveyor_delta
;
; } else if (temp0 & METATILE_CONVEYOR_RIGHT) {
;
	rts
L4251:	lda     _temp0
	and     #$08
	beq     L4252
;
; conveyor_delta = RIGHT_CONVEYOR_DELTA;
;
	lda     #$7F
	sta     _conveyor_delta
;
; } else if (temp0 & METATILE_SPIKES) {
;
	rts
L4252:	lda     _temp0
	and     #$02
	beq     L4253
;
; SET_TOUCHING_SPIKES();
;
	lda     _player_flags
	ora     #$20
;
; } else if (temp0 & METATILE_RED_DOOR) {
;
	jmp     L4249
L4253:	lda     _temp0
	and     #$20
	beq     L392F
;
; game_mode = MODE_LEVEL_COMPLETE;
;
	lda     #$04
	sta     _game_mode
;
; SET_SHOULD_GO_TO_BONUS_LEVEL();
;
	lda     _player_flags
	ora     #$80
L4249:	sta     _player_flags
;
; }
;
L392F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub_collision_u (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub_collision_u: near

.segment	"CODE"

;
; temp0 = rand8();
;
	jsr     _rand8
	sta     _temp0
;
; advanced_conditional = (high_byte(valrigard.x) + VALRIGARD_HEIGHT/2 ) & 0xf0;
;
	lda     _valrigard+1
	clc
	adc     #$06
	and     #$F0
	sta     _advanced_conditional
;
; if (temp4 == QUESTION_BLOCK && (temp3 & 0x0f) == 0x0f 
;
	lda     _temp4
	cmp     #$16
	bne     L4258
	lda     _temp3
	and     #$0F
;
; && (temp1 & 0xf0) == advanced_conditional ){
;
	cmp     #$0F
	bne     L4258
	lda     _temp1
	and     #$F0
	cmp     _advanced_conditional
	beq     L4259
L4258:	rts
;
; AsmSet1ByteAtZpPtrWithConstOffset(temp_mutablepointer, coordinates, BONKED_QUESTION_BLOCK);
;
L4259:	ldy     _coordinates
	lda     #$1B
	sta     (_temp_mutablepointer),y
;
; if (temp0 > 128) { 
;
	lda     _temp0
	cmp     #$81
	bcc     L425A
;
; ++score;
;
	inc     _score
	bne     L394F
	inc     _score+1
;
; temp0 = 0; // Will be used to select which sprite the floating number effect should use
;
L394F:	lda     #$00
;
; else if (temp0 > 86) { 
;
	jmp     L4257
L425A:	lda     _temp0
	cmp     #$57
	bcc     L425B
;
; score += 2;
;
	lda     #$02
	clc
	adc     _score
	sta     _score
	bcc     L3957
	inc     _score+1
;
; temp0 = 1;
;
L3957:	lda     #$01
;
; else if (temp0 > 43) { 
;
	jmp     L4257
L425B:	lda     _temp0
	cmp     #$2C
	bcc     L425C
;
; score += 3;
;
	lda     #$03
	clc
	adc     _score
	sta     _score
	bcc     L395F
	inc     _score+1
;
; temp0 = 2;
;
L395F:	lda     #$02
;
; else if (temp0 > 2) { 
;
	jmp     L4257
L425C:	lda     _temp0
	cmp     #$03
	bcc     L3963
;
; score += 4;
;
	lda     #$04
	clc
	adc     _score
	sta     _score
	bcc     L3967
	inc     _score+1
;
; temp0 = 3;
;
L3967:	lda     #$03
;
; else { 
;
	jmp     L4257
;
; score += 100;
;
L3963:	lda     #$64
	clc
	adc     _score
	sta     _score
	bcc     L396D
	inc     _score+1
;
; temp0 = 4;
;
L396D:	lda     #$04
L4257:	sta     _temp0
;
; score += temp0;
;
	clc
	adc     _score
	sta     _score
	lda     #$00
	adc     _score+1
	sta     _score+1
;
; SET_SCORE_CHANGED_THIS_FRAME();
;
	lda     _player_flags
	ora     #$08
	sta     _player_flags
;
; did_headbonk = 1;
;
	lda     #$01
	sta     _did_headbonk
;
; sfx_play(SFX_BUMP, 0);
;
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; nt = (nt_current & 1) << 1;
;
	lda     _nt_current
	and     #$01
	asl     a
	sta     _nt
;
; get_ppu_addr(address, nt, temp1, temp3 & 0xf0);
;
	lda     _temp1
	sta     _TEMP+2
	lda     _nt
	sta     _TEMP+3
	lda     _temp3
	and     #$F0
	jsr     _get_ppu_addr_fast
	sta     _address
	stx     _address+1
;
; AsmSet2ByteAtPtrWithOffset(tile_clear_queue, tile_clear_back, address);
;
	lda     _tile_clear_back
	asl     a
	tay
	lda     _address
	sta     _tile_clear_queue,y
	lda     _address+1
	sta     _tile_clear_queue+1,y
;
; tile_clear_to_type_queue[tile_clear_back] = BONKED_QUESTION_BLOCK;
;
	ldy     _tile_clear_back
	lda     #$1B
	sta     _tile_clear_to_type_queue,y
;
; enemies_extra[enemy_limit] = temp0;
;
	ldy     _enemy_limit
	lda     _temp0
	sta     _enemies_extra,y
;
; enemies_timer[enemy_limit] = 32;
;
	ldy     _enemy_limit
	lda     #$20
	sta     _enemies_timer,y
;
; temp0 = (temp1 & 0xf0) + 6;
;
	lda     _temp1
	and     #$F0
	clc
	adc     #$06
	sta     _temp0
;
; enemies_x[enemy_limit] = temp0;
;
	ldy     _enemy_limit
	lda     _temp0
	sta     _enemies_x,y
;
; enemies_actual_y[enemy_limit] = temp3;
;
	ldy     _enemy_limit
	lda     _temp3
	sta     _enemies_actual_y,y
;
; enemies_nt[enemy_limit] = nt_current;      
;
	ldy     _enemy_limit
	lda     _nt_current
	sta     _enemies_nt,y
;
; enemies_type[enemy_limit] = ENEMY_FLOATING_NUMBERS_EFFECT;
;
	ldy     _enemy_limit
	lda     #$0E
	sta     _enemies_type,y
;
; ++enemy_limit;
;
	inc     _enemy_limit
;
; if (enemies_count <= enemy_limit) { 
;
	lda     _enemies_count
	sec
	sbc     _enemy_limit
	sta     tmp1
	lda     tmp1
	beq     L425D
	bcs     L425E
;
; enemies_count = enemy_limit;
;
L425D:	lda     _enemy_limit
	sta     _enemies_count
;
; calculate_shuffle_array(); // don't like having to do this, but we have to
;
	jsr     _calculate_shuffle_array
;
; ++tile_clear_back;
;
L425E:	inc     _tile_clear_back
;
; tile_clear_back &= 0b11;
;
	lda     _tile_clear_back
	and     #$03
	sta     _tile_clear_back
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; nt_current = high_byte(scroll_y);
;
	lda     _scroll_y+1
	sta     _nt_current
;
; lowest_enemy_index = 0xff;
;
	lda     #$FF
	sta     _lowest_enemy_index
;
; enemy_limit = 0;
;
	lda     #$00
	sta     _enemy_limit
;
; for (x = 0; x < enemies_count; ++x) {
;
	sta     _x
	tax
L4263:	lda     _x
	cmp     _enemies_count
	txa
	sbc     #$00
	jcs     L4262
;
; if (GET_ENEMY_TYPE(x)) {
;
	ldy     _x
	lda     _enemies_type,y
	jeq     L4265
;
; high_byte(temp5) = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies_actual_y[x];
;
	ldy     _x
	lda     _enemies_actual_y,y
	sta     _temp5
;
; temp5 -= scroll_y;
;
	lda     _scroll_y
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_y+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; if (high_byte(temp5)) {
;
	lda     _temp5+1
	beq     L3A4E
;
; DEACTIVATE_ENEMY(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$7F
	sta     _enemies_flags,y
;
; continue;
;
	jmp     L3A37
;
; ACTIVATE_ENEMY(x); // This enemy is active if it's on-screen.
;
L3A4E:	ldy     _x
	lda     _enemies_flags,y
	ora     #$80
	sta     _enemies_flags,y
;
; enemies_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies_y,y
;
; if (nt_current != enemies_nt[x]) { 
;
	ldy     _x
	lda     _enemies_nt,y
	cmp     _nt_current
	beq     L4264
;
; temp0 = enemies_y[x] - 16;
;
	ldy     _x
	lda     _enemies_y,y
	sec
	sbc     #$10
	sta     _temp0
;
; enemies_y[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies_y,y
;
; enemy_limit = x + 1;
;
L4264:	lda     _x
	clc
	adc     #$01
	sta     _enemy_limit
;
; lowest_enemy_index = x;
;
	lda     _x
	sta     _lowest_enemy_index
;
; break;
;
	jmp     L4262
;
; for (x = 0; x < enemies_count; ++x) {
;
L3A37:	ldx     #$00
L4265:	inc     _x
	jmp     L4263
;
; for (x; x < enemies_count; ++x) {
;
L4262:	lda     _x
	cmp     _enemies_count
	bcc     L426A
;
; }
;
	rts
;
; if (GET_ENEMY_TYPE(x)) {
;
L426A:	ldy     _x
	lda     _enemies_type,y
	beq     L4267
;
; high_byte(temp5) = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies_actual_y[x];
;
	ldy     _x
	lda     _enemies_actual_y,y
	sta     _temp5
;
; temp5 -= scroll_y;
;
	lda     _scroll_y
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_y+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; if (high_byte(temp5)) {
;
	lda     _temp5+1
	beq     L3A91
;
; DEACTIVATE_ENEMY(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$7F
	sta     _enemies_flags,y
;
; continue;
;
	jmp     L4269
;
; ACTIVATE_ENEMY(x); // This enemy is active if it's on-screen.
;
L3A91:	ldy     _x
	lda     _enemies_flags,y
	ora     #$80
	sta     _enemies_flags,y
;
; enemies_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies_y,y
;
; if (nt_current != enemies_nt[x]) { 
;
	ldy     _x
	lda     _enemies_nt,y
	cmp     _nt_current
	beq     L4266
;
; temp0 = enemies_y[x] - 16;
;
	ldy     _x
	lda     _enemies_y,y
	sec
	sbc     #$10
	sta     _temp0
;
; enemies_y[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies_y,y
;
; enemy_limit = x + 1;
;
L4266:	lda     _x
	clc
	adc     #$01
	sta     _enemy_limit
;
; ++x;
;
L4267:	inc     _x
;
; if (GET_ENEMY_TYPE(x)) {
;
	ldy     _x
	lda     _enemies_type,y
	beq     L4269
;
; high_byte(temp5) = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies_actual_y[x];
;
	ldy     _x
	lda     _enemies_actual_y,y
	sta     _temp5
;
; temp5 -= scroll_y;
;
	lda     _scroll_y
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_y+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; if (high_byte(temp5)) {
;
	lda     _temp5+1
	beq     L3ACC
;
; DEACTIVATE_ENEMY(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$7F
	sta     _enemies_flags,y
;
; continue;
;
	jmp     L4269
;
; ACTIVATE_ENEMY(x);
;
L3ACC:	ldy     _x
	lda     _enemies_flags,y
	ora     #$80
	sta     _enemies_flags,y
;
; enemies_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies_y,y
;
; if (nt_current != enemies_nt[x]) { 
;
	ldy     _x
	lda     _enemies_nt,y
	cmp     _nt_current
	beq     L4268
;
; temp0 = enemies_y[x] - 16;
;
	ldy     _x
	lda     _enemies_y,y
	sec
	sbc     #$10
	sta     _temp0
;
; enemies_y[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies_y,y
;
; enemy_limit = x + 1;
;
L4268:	lda     _x
	clc
	adc     #$01
	sta     _enemy_limit
;
; for (x; x < enemies_count; ++x) {
;
L4269:	inc     _x
	jmp     L4262

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collisions: near

.segment	"CODE"

;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; if (IS_SWINGING_SWORD) {
;
	lda     _player_flags
	and     #$04
	beq     L426C
;
; hitbox.width = VALRIGARD_SWINGING_WIDTH;
;
	lda     #$0F
	sta     _hitbox+2
;
; } else {
;
	jmp     L426B
;
; hitbox.width = VALRIGARD_WIDTH;
;
L426C:	lda     #$0B
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_HEIGHT;    
;
	lda     #$0D
L426B:	sta     _hitbox+3
;
; x = get_frame_count() & 1;
;
	jsr     _get_frame_count
	and     #$01
	sta     _x
;
; x += lowest_enemy_index;
;
	lda     _lowest_enemy_index
L4272:	clc
	adc     _x
	sta     _x
;
; for (x; x < enemy_limit; x += 2) {
;
	cmp     _enemy_limit
	bcc     L4273
;
; }
;
	rts
;
; if(IS_ENEMY_ACTIVE(x)) {
;
L4273:	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L426E
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; hitbox2.width = enemy_hitbox_width_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_width_lookup_table,y
	sta     _hitbox2+2
;
; hitbox2.height = enemy_hitbox_height_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_height_lookup_table,y
	sta     _hitbox2+3
;
; hitbox2.x = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _hitbox2
;
; hitbox2.x += enemy_hitbox_x_offset_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_x_offset_lookup_table,y
	clc
	adc     _hitbox2
	sta     _hitbox2
;
; hitbox2.y = enemies_y[x];
;
	ldy     _x
	lda     _enemies_y,y
	sta     _hitbox2+1
;
; hitbox2.y += enemy_hitbox_y_offset_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_y_offset_lookup_table,y
	clc
	adc     _hitbox2+1
	sta     _hitbox2+1
;
; check_collision(temp0, hitbox, hitbox2);
;
	lda     #<(_hitbox)
	sta     _TEMP
	lda     #>(_hitbox)
	sta     _TEMP+1
	lda     #<(_hitbox2)
	sta     _TEMP+2
	lda     #>(_hitbox2)
	sta     _TEMP+3
	jsr     _check_collision_fast
	sta     _temp0
;
; if (temp0) {
;
	lda     _temp0
	beq     L426E
;
; AsmCallFunctionAtPtrOffsetByIndexVar(collision_functions, temp1);
;
	lda     _temp1
	asl     a
	tay
	lda     _collision_functions,y
	ldx     _collision_functions+1,y
	jsr     callax
;
; x += 2;
;
L426E:	lda     #$02
	clc
	adc     _x
	sta     _x
;
; if(IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L426F
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; hitbox2.width = enemy_hitbox_width_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_width_lookup_table,y
	sta     _hitbox2+2
;
; hitbox2.height = enemy_hitbox_height_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_height_lookup_table,y
	sta     _hitbox2+3
;
; hitbox2.x = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _hitbox2
;
; hitbox2.x += enemy_hitbox_x_offset_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_x_offset_lookup_table,y
	clc
	adc     _hitbox2
	sta     _hitbox2
;
; hitbox2.y = enemies_y[x];
;
	ldy     _x
	lda     _enemies_y,y
	sta     _hitbox2+1
;
; hitbox2.y += enemy_hitbox_y_offset_lookup_table[temp1];
;
	ldy     _temp1
	lda     _enemy_hitbox_y_offset_lookup_table,y
	clc
	adc     _hitbox2+1
	sta     _hitbox2+1
;
; check_collision(temp0, hitbox, hitbox2);
;
	lda     #<(_hitbox)
	sta     _TEMP
	lda     #>(_hitbox)
	sta     _TEMP+1
	lda     #<(_hitbox2)
	sta     _TEMP+2
	lda     #>(_hitbox2)
	sta     _TEMP+3
	jsr     _check_collision_fast
	sta     _temp0
;
; if (temp0) {
;
	lda     _temp0
	beq     L426F
;
; AsmCallFunctionAtPtrOffsetByIndexVar(collision_functions, temp1);
;
	lda     _temp1
	asl     a
	tay
	lda     _collision_functions,y
	ldx     _collision_functions+1,y
	jsr     callax
;
; for (x; x < enemy_limit; x += 2) {
;
L426F:	lda     #$02
	jmp     L4272

.endproc

; ---------------------------------------------------------------
; void __near__ empty_function (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_empty_function: near

.segment	"CODE"

;
; void empty_function(void) { }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_killable_slashable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_killable_slashable: near

.segment	"CODE"

;
; if (!IS_SWINGING_SWORD) { 
;
	lda     _player_flags
	and     #$04
	bne     L3BE7
;
; if (!STATUS_DEAD) { 
;
	lda     _player_flags
	and     #$02
	bne     L4274
;
; sfx_play(SFX_SMACK, 0);
;
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_stop();
;
	jsr     _music_stop
;
; SET_STATUS_DEAD();
;
L4274:	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; else {
;
	rts
;
; enemies_type[x] = ENEMY_PURPLE_DEATH_EFFECT;
;
L3BE7:	ldy     _x
	lda     #$0C
	sta     _enemies_type,y
;
; enemies_timer[x] = 12;
;
	ldy     _x
	sta     _enemies_timer,y
;
; score += 1; // Add to the score 
;
	inc     _score
	bne     L3BFF
	inc     _score+1
;
; SET_SCORE_CHANGED_THIS_FRAME();
;
L3BFF:	lda     _player_flags
	ora     #$08
	sta     _player_flags
;
; sfx_play(SFX_ENEMY_KILL, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_inert_slashable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_inert_slashable: near

.segment	"CODE"

;
; if (IS_SWINGING_SWORD && !SLASHABLE_UNKILLABLE_IS_SLASHED(x)) { 
;
	lda     _player_flags
	and     #$04
	beq     L4276
	ldy     _x
	lda     _enemies_flags,y
	and     #$20
	beq     L4277
L4276:	rts
;
; SLASHABLE_UNKILLABLE_SET_SLASHED(x);
;
L4277:	ldy     _x
	lda     _enemies_flags,y
	ora     #$20
	sta     _enemies_flags,y
;
; score += 1;
;
	inc     _score
	bne     L3C19
	inc     _score+1
;
; SET_SCORE_CHANGED_THIS_FRAME();
;
L3C19:	lda     _player_flags
	ora     #$08
	sta     _player_flags
;
; sfx_play(SFX_ENEMY_KILL, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_unkillable_unslashable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_unkillable_unslashable: near

.segment	"CODE"

;
; if (!STATUS_DEAD) { 
;
	lda     _player_flags
	and     #$02
	bne     L4278
;
; sfx_play(SFX_SMACK, 0);
;
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_stop();
;
	jsr     _music_stop
;
; SET_STATUS_DEAD();
;
L4278:	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_splyke (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_splyke: near

.segment	"CODE"

;
; if (!IS_SWINGING_SWORD) { // Not swinging the sword?
;
	lda     _player_flags
	and     #$04
	bne     L3C2C
;
; if (!STATUS_DEAD) { 
;
	lda     _player_flags
	and     #$02
	bne     L4279
;
; sfx_play(SFX_SMACK, 0);
;
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; music_stop();
;
	jsr     _music_stop
;
; SET_STATUS_DEAD();
;
L4279:	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; } else if (!SPLYKE_IS_MOVING_AROUND(x)){ // Not tornado:
;
	rts
L3C2C:	ldy     _x
	lda     _enemies_flags,y
	and     #$20
	bne     L3C3A
;
; enemies_type[x] = ENEMY_SPLYKE_DEATH_EFFECT;
;
	ldy     _x
	lda     #$0D
	sta     _enemies_type,y
;
; enemies_timer[x] = 12;
;
	ldy     _x
	lda     #$0C
	sta     _enemies_timer,y
;
; score += 1;
;
	inc     _score
	bne     L3C49
	inc     _score+1
;
; SET_SCORE_CHANGED_THIS_FRAME();
;
L3C49:	lda     _player_flags
	ora     #$08
	sta     _player_flags
;
; sfx_play(SFX_ENEMY_KILL, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jmp     _sfx_play
;
; }
;
L3C3A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_movement: near

.segment	"CODE"

;
; for (x = lowest_enemy_index; x < enemy_limit; ++x) {
;
	lda     _lowest_enemy_index
	sta     _x
L427A:	lda     _x
	cmp     _enemy_limit
	bcc     L4283
;
; }
;
	rts
;
; if (IS_ENEMY_ACTIVE(x)) {
;
L4283:	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L427B
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L427B:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L427C
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L427C:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L427D
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L427D:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L427E
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L427E:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L427F
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L427F:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L4280
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L4280:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L4281
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; ++x;
;
L4281:	inc     _x
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$80
	beq     L4282
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies_type,y
	sta     _temp1
;
; AsmCallFunctionAtPtrOffsetByIndexVar(ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	ldx     _ai_pointers+1,y
	jsr     callax
;
; for (x = lowest_enemy_index; x < enemy_limit; ++x) {
;
L4282:	inc     _x
	jmp     L427A

.endproc

; ---------------------------------------------------------------
; void __near__ korbat_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_korbat_ai: near

.segment	"CODE"

;
; __asm__("ldx %v", x); // register x = x (the in-memory variable);
;
	ldx     _x
;
; __asm__("ldy %v, %s", enemies_timer, X);
;
	ldy     _enemies_timer,x
;
; __asm__("iny");
;
	iny
;
; __asm__("tya");
;
	tya
;
; __asm__("sta %v, %s", enemies_timer, X);
;
	sta     _enemies_timer,x
;
; temp3 = ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$01
	sta     _temp3
;
; temp2 = enemies_actual_y[x] + 6; // center y
;
	ldy     _x
	lda     _enemies_actual_y,y
	clc
	adc     #$06
	sta     _temp2
;
; temp1 = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _temp1
;
; temp1 += leftright_movement_offset_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_offset_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp0);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L3D58
;
; ENEMY_FLIP_DIRECTION(x);
;
	ldy     _x
	lda     _enemies_flags,y
	eor     #$01
	sta     _enemies_flags,y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp1 = leftright_movement_moving_lookup_table[temp3];
;
L3D58:	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	sta     _temp1
;
; temp0 = enemies_x[x] + temp1;
;
	ldy     _x
	lda     _enemies_x,y
	clc
	adc     _temp1
	sta     _temp0
;
; enemies_x[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies_x,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ spikeball_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spikeball_ai: near

.segment	"CODE"

;
; __asm__("ldx %v", x); // register x = x (the in-memory variable);
;
	ldx     _x
;
; __asm__("ldy %v, %s", enemies_timer, X);
;
	ldy     _enemies_timer,x
;
; __asm__("iny");
;
	iny
;
; __asm__("tya");
;
	tya
;
; __asm__("sta %v, %s", enemies_timer, X);
;
	sta     _enemies_timer,x
;
; temp3 = ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$01
	sta     _temp3
;
; temp1 = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _temp1
;
; temp1 += leftright_movement_offset_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_offset_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp2 = enemies_actual_y[x] + 18; // Y beneath us
;
	ldy     _x
	lda     _enemies_actual_y,y
	clc
	adc     #$12
	sta     _temp2
;
; temp4 = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp4
;
; if (temp2 >= 0xf0) {
;
	lda     _temp2
	cmp     #$F0
	bcc     L4288
;
; ++temp4;
;
	inc     _temp4
;
; temp2 = 0;
;
	lda     #$00
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
L4288:	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (!METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
;
; } else { // Don't flip twice -- this causes a bug if we're on an edge and there's a block ahead of us, but not one block down+ahead of us.
;
	beq     L4290
;
; temp2 = enemies_actual_y[x] + 6; // center y
;
	ldy     _x
	lda     _enemies_actual_y,y
	clc
	adc     #$06
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp4 = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L3DC0
;
; ENEMY_FLIP_DIRECTION(x);
;
L4290:	ldy     _x
	lda     _enemies_flags,y
	eor     #$01
	sta     _enemies_flags,y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp1 = leftright_movement_moving_lookup_table[temp3];
;
L3DC0:	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	sta     _temp1
;
; temp0 = enemies_x[x] + temp1;
;
	ldy     _x
	lda     _enemies_x,y
	clc
	adc     _temp1
	sta     _temp0
;
; enemies_x[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies_x,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cannon_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cannon_ai: near

.segment	"CODE"

;
; temp_x = x + 1;
;
	lda     _x
	clc
	adc     #$01
	sta     _temp_x
;
; if (IS_ENEMY_ACTIVE(temp_x)) { return; }
;
	ldy     _temp_x
	lda     _enemies_flags,y
	and     #$80
	beq     L4294
;
; }
;
	rts
;
; __asm__("ldx %v", x); // register x = x (the in-memory variable);
;
L4294:	ldx     _x
;
; __asm__("ldy %v, %s", enemies_timer, X);
;
	ldy     _enemies_timer,x
;
; __asm__("dey");
;
	dey
;
; __asm__("tya");
;
	tya
;
; __asm__("sta %v, %s", enemies_timer, X);
;
	sta     _enemies_timer,x
;
; if (enemies_timer[x] == 20) { 
;
	ldy     _x
	lda     _enemies_timer,y
	cmp     #$14
	bne     L3ED6
;
; if (!(enemies_extra2[x] & 0xf0)) {
;
	ldy     _x
	lda     _enemies_extra2,y
	and     #$F0
	beq     L4295
;
; }
;
	rts
;
; temp0 = high_byte(valrigard.x) + (VALRIGARD_WIDTH/2);
;
L4295:	lda     _valrigard+1
	clc
	adc     #$05
	sta     _temp0
;
; temp1 = high_byte(valrigard.y) + 4; // Tweaked for maximum accuracy - may need to be tweaked more.
;
	lda     _valrigard+3
	clc
	adc     #$04
	sta     _temp1
;
; temp2 = enemies_x[x] + 6; // ENEMY_WIDTH/2
;
	ldy     _x
	lda     _enemies_x,y
	clc
	adc     #$06
	sta     _temp2
;
; temp3 = enemies_y[x] + 6; // ENEMY_HEIGHT/2
;
	ldy     _x
	lda     _enemies_y,y
	clc
	adc     #$06
	sta     _temp3
;
; fire_at_target();
;
	jsr     _fire_at_target
;
; enemies_extra[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies_extra,y
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cannon_sprite_quadrant_lookup_table, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cannon_sprite_quadrant_lookup_table,y
	sta     _temppointer
	lda     _cannon_sprite_quadrant_lookup_table+1,y
	sta     _temppointer+1
;
; if (temp0 > 0x30) { // over 0x30 brads
;
	lda     _temp0
	cmp     #$31
	bcc     L4292
;
; AsmSet1ByteFromZpPtrAtConst(temp3, temppointer, 2);
;
	ldy     #$02
;
; } else if (temp0 > 0x10) { // over 0x10 brads
;
	jmp     L4293
L4292:	lda     _temp0
	cmp     #$11
	bcc     L3F0F
;
; AsmSet1ByteFromZpPtrAtConst(temp3, temppointer, 1);
;
	ldy     #$01
;
; } else { // 0x10 or fewer brads
;
	jmp     L4293
;
; AsmSet1ByteFromZpPtrAtConst(temp3, temppointer, 0);
;
L3F0F:	ldy     #$00
L4293:	lda     (_temppointer),y
	sta     _temp3
;
; enemies_extra2[x] = temp3;
;
	ldy     _x
	lda     _temp3
	sta     _enemies_extra2,y
;
; } else if (enemies_timer[x] == 0) {
;
	rts
L3ED6:	ldy     _x
	lda     _enemies_timer,y
	bne     L3F25
;
; enemies_timer[x] = 120;
;
	ldy     _x
	lda     #$78
	sta     _enemies_timer,y
;
; sfx_play(SFX_CANNON_FIRE, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; temp0 = enemies_x[x] + 3;
;
	ldy     _x
	lda     _enemies_x,y
	clc
	adc     #$03
	sta     _temp0
;
; temp1 = enemies_actual_y[x] + 3;
;
	ldy     _x
	lda     _enemies_actual_y,y
	clc
	adc     #$03
	sta     _temp1
;
; temp2 = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp2
;
; enemies_x[temp_x] = temp0;
;
	ldy     _temp_x
	lda     _temp0
	sta     _enemies_x,y
;
; enemies_actual_y[temp_x] = temp1;
;
	ldy     _temp_x
	lda     _temp1
	sta     _enemies_actual_y,y
;
; enemies_nt[temp_x] = temp2;
;
	ldy     _temp_x
	lda     _temp2
	sta     _enemies_nt,y
;
; enemies_type[temp_x] = ENEMY_CANNONBALL;
;
	ldy     _temp_x
	lda     #$09
	sta     _enemies_type,y
;
; }
;
L3F25:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cannonball_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cannonball_ai: near

.segment	"CODE"

;
; temp_x = x-1;
;
	lda     _x
	sec
	sbc     #$01
	sta     _temp_x
;
; temp1 = enemies_extra[temp_x];
;
	ldy     _temp_x
	lda     _enemies_extra,y
	sta     _temp1
;
; cannonball_ai_sub();
;
	jsr     _cannonball_ai_sub
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L3F99
;
; enemies_type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies_type,y
;
; enemies_flags[x] = 0;
;
	ldy     _x
	sta     _enemies_flags,y
;
; }
;
L3F99:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cannonball_ai_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cannonball_ai_sub: near

.segment	"CODE"

;
; temp2 = cos_lookup(temp1);
;
	lda     _temp1
	jsr     _cos_lookup
	sta     _temp2
;
; temp3 = sin_lookup(temp1);
;
	lda     _temp1
	jsr     _sin_lookup
	sta     _temp3
;
; high_byte(temp5) = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies_extra[x];
;
	ldy     _x
	lda     _enemies_extra,y
	sta     _temp5
;
; if (CANNONBALL_X_DIRECTION(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$40
	beq     L4299
;
; temp5 += temp2;
;
	lda     _temp2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = high_byte(temp5) + 7;
;
	clc
	adc     #$07
;
; } else {
;
	jmp     L4296
;
; temp5 -= temp2;
;
L4299:	lda     _temp2
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = high_byte(temp5) + 0xff;
;
	clc
	adc     #$FF
L4296:	sta     _temp1
;
; enemies_x[x] = high_byte(temp5);
;
	ldy     _x
	lda     _temp5+1
	sta     _enemies_x,y
;
; enemies_extra[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies_extra,y
;
; high_byte(temp6) = enemies_actual_y[x];
;
	ldy     _x
	lda     _enemies_actual_y,y
	sta     _temp6+1
;
; low_byte(temp6) = enemies_extra2[x];
;
	ldy     _x
	lda     _enemies_extra2,y
	sta     _temp6
;
; if (CANNONBALL_Y_DIRECTION(x)) {
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$20
	beq     L429A
;
; temp6 += temp3;
;
	lda     _temp3
	clc
	adc     _temp6
	sta     _temp6
	lda     #$00
	adc     _temp6+1
	sta     _temp6+1
;
; enemies_extra2[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies_extra2,y
;
; low_byte(temp6) = high_byte(temp6);
;
	lda     _temp6+1
	sta     _temp6
;
; high_byte(temp6) = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp6+1
;
; add_scroll_y(temp6, 0x00, temp6);
;
	lda     _temp6
	sta     _TEMP
	lda     _temp6+1
	sta     _TEMP+1
	lda     #$00
	jsr     _add_scroll_y_fast_sub
	sta     _temp6
	stx     _temp6+1
;
; enemies_nt[x] = high_byte(temp6);
;
	ldy     _x
	lda     _temp6+1
	sta     _enemies_nt,y
;
; enemies_actual_y[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies_actual_y,y
;
; add_scroll_y(temp5, 7, temp6);
;
	lda     _temp6
	sta     _TEMP
	lda     _temp6+1
	sta     _TEMP+1
	lda     #$07
;
; } else {
;
	jmp     L429E
;
; temp6 -= temp3;
;
L429A:	lda     _temp3
	eor     #$FF
	sec
	adc     _temp6
	sta     _temp6
	lda     #$FF
	adc     _temp6+1
	sta     _temp6+1
;
; enemies_extra2[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies_extra2,y
;
; low_byte(temp6) = high_byte(temp6);
;
	lda     _temp6+1
	sta     _temp6
;
; high_byte(temp6) = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp6+1
;
; if (!low_byte(temp6)) {
;
	lda     _temp6
	bne     L4037
;
; temp6 = sub_scroll_y(0x01, temp6);
;
	lda     #$01
;
; } else {
;
	jmp     L42A2
;
; temp6 = sub_scroll_y(0x00, temp6);
;
L4037:	lda     #$00
L42A2:	jsr     pusha
	lda     _temp6
	ldx     _temp6+1
	jsr     _sub_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; enemies_nt[x] = high_byte(temp6);
;
	ldy     _x
	lda     _temp6+1
	sta     _enemies_nt,y
;
; enemies_actual_y[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies_actual_y,y
;
; add_scroll_y(temp5, 1, temp6);
;
	lda     _temp6
	sta     _TEMP
	lda     _temp6+1
	sta     _TEMP+1
	lda     #$01
L429E:	jsr     _add_scroll_y_fast_sub
	sta     _temp5
	stx     _temp5+1
;
; coordinates = (temp1 >> 4) + (low_byte(temp5) & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp5
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp4 = high_byte(temp5);
;
	lda     _temp5+1
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ acid_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_acid_ai: near

.segment	"CODE"

;
; if (enemies_extra2[x]) {
;
	ldy     _x
	lda     _enemies_extra2,y
	beq     L42A4
;
; __asm__("ldx %v", x);
;
	ldx     _x
;
; __asm__("ldy %v, %s", enemies_extra2, X);
;
	ldy     _enemies_extra2,x
;
; __asm__("dey");
;
	dey
;
; __asm__("tya");
;
	tya
;
; __asm__("sta %v, %s", enemies_extra2, X);
;
	sta     _enemies_extra2,x
;
; temp_x = x + 1;
;
L42A4:	lda     _x
	clc
	adc     #$01
	sta     _temp_x
;
; if (IS_ENEMY_ACTIVE(temp_x)) { return; }
;
	ldy     _temp_x
	lda     _enemies_flags,y
	and     #$80
	beq     L42A5
;
; }
;
	rts
;
; __asm__("ldx %v", x); // register x = x (the in-memory variable);
;
L42A5:	ldx     _x
;
; __asm__("ldy %v, %s", enemies_timer, X);
;
	ldy     _enemies_timer,x
;
; __asm__("dey");
;
	dey
;
; __asm__("tya");
;
	tya
;
; __asm__("sta %v, %s", enemies_timer, X);
;
	sta     _enemies_timer,x
;
; __asm__("sta %v", temp0);
;
	sta     _temp0
;
; if (temp0 == 0) {
;
	lda     _temp0
	bne     L4097
;
; temp0 = enemies_extra[x];
;
	ldy     _x
	lda     _enemies_extra,y
	sta     _temp0
;
; enemies_timer[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies_timer,y
;
; temp0 = rand8() & 0b111; // Bottom 3 bits, 0 - 7
;
	jsr     _rand8
	and     #$07
	sta     _temp0
;
; temp1 = enemies_x[x] + temp0; 
;
	ldy     _x
	lda     _enemies_x,y
	clc
	adc     _temp0
	sta     _temp1
;
; temp2 = enemies_actual_y[x];
;
	ldy     _x
	lda     _enemies_actual_y,y
	sta     _temp2
;
; temp3 = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp3
;
; enemies_x[temp_x] = temp1;
;
	ldy     _temp_x
	lda     _temp1
	sta     _enemies_x,y
;
; enemies_actual_y[temp_x] = temp2;
;
	ldy     _temp_x
	lda     _temp2
	sta     _enemies_actual_y,y
;
; enemies_nt[temp_x] = temp3;
;
	ldy     _temp_x
	lda     _temp3
	sta     _enemies_nt,y
;
; enemies_type[temp_x] = ENEMY_ACIDDROP;
;
	ldy     _temp_x
	lda     #$0A
	sta     _enemies_type,y
;
; enemies_extra2[x] = 12; // ACIDBLOB_ANIMATION_FRAME_COUNT
;
	ldy     _x
	lda     #$0C
	sta     _enemies_extra2,y
;
; sfx_play(SFX_ACID_DROP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jmp     _sfx_play
;
; }
;
L4097:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ acid_drop_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_acid_drop_ai: near

.segment	"CODE"

;
; high_byte(temp5) = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies_actual_y[x];
;
	ldy     _x
	lda     _enemies_actual_y,y
	sta     _temp5
;
; add_scroll_y(temp5, 1, temp5);
;
	sta     _TEMP
	lda     _temp5+1
	sta     _TEMP+1
	lda     #$01
	jsr     _add_scroll_y_fast_sub
	sta     _temp5
	stx     _temp5+1
;
; add_scroll_y(temp6, 6, temp5); // 8 being the cosmetic projectile height
;
	lda     _temp5
	sta     _TEMP
	lda     _temp5+1
	sta     _TEMP+1
	lda     #$06
	jsr     _add_scroll_y_fast_sub
	sta     _temp6
	stx     _temp6+1
;
; coordinates = (enemies_x[x] >> 4) + (low_byte(temp6) & 0xf0);
;
	ldy     _x
	lda     _enemies_x,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp6
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = high_byte(temp6);
;
	lda     _temp6+1
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp0);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L3EAB
;
; enemies_type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies_type,y
;
; enemies_flags[x] = 0;
;
	ldy     _x
	sta     _enemies_flags,y
;
; } else {
;
	rts
;
; enemies_nt[x] = high_byte(temp5);
;
L3EAB:	ldy     _x
	lda     _temp5+1
	sta     _enemies_nt,y
;
; enemies_actual_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies_actual_y,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ splyke_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_splyke_ai: near

.segment	"CODE"

;
; temp0 = rand8() & 0x0f; // random from 0 to 15
;
	jsr     _rand8
	and     #$0F
	sta     _temp0
;
; temp1 = SPLYKE_IS_MOVING_AROUND(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$20
	sta     _temp1
;
; temp2 = (enemies_extra2[x] + 1) & 7; // Bitmask the animation counter to 7. (this will get >> 1'd in draw_sprites)
;
	ldy     _x
	lda     _enemies_extra2,y
	clc
	adc     #$01
	and     #$07
	sta     _temp2
;
; enemies_extra2[x] = temp2;
;
	ldy     _x
	lda     _temp2
	sta     _enemies_extra2,y
;
; if (temp0 == 0 && temp1 == 0) {
;
	lda     _temp0
	bne     L40D8
	lda     _temp1
	bne     L40D8
;
; SPLYKE_SET_MOVING_AROUND(x); // Start moving.
;
	ldy     _x
	lda     _enemies_flags,y
	ora     #$20
	sta     _enemies_flags,y
;
; } else if (temp1){
;
	rts
L40D8:	lda     _temp1
	bne     L42B4
;
; }
;
	rts
;
; if (temp0 == 0) {
;
L42B4:	lda     _temp0
	bne     L40E7
;
; SPLYKE_SET_STANDING_STILL(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$DF
	sta     _enemies_flags,y
;
; temp3 = ENEMY_DIRECTION(x);
;
L40E7:	ldy     _x
	lda     _enemies_flags,y
	and     #$01
	sta     _temp3
;
; temp1 = enemies_x[x];
;
	ldy     _x
	lda     _enemies_x,y
	sta     _temp1
;
; temp1 += leftright_movement_offset_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_offset_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp1 += leftright_movement_moving_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp2 = enemies_actual_y[x] + 18; // Y beneath us
;
	ldy     _x
	lda     _enemies_actual_y,y
	clc
	adc     #$12
	sta     _temp2
;
; if (temp2 >= 0xf0) {
;
	cmp     #$F0
	bcc     L4107
;
; temp4 = enemies_nt[x] + 1;
;
	ldy     _x
	lda     _enemies_nt,y
	clc
	adc     #$01
	sta     _temp4
;
; temp2 = 0;
;
	lda     #$00
	sta     _temp2
;
; } else {
;
	jmp     L42AB
;
; temp4 = enemies_nt[x];
;
L4107:	ldy     _x
	lda     _enemies_nt,y
	sta     _temp4
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
L42AB:	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (!METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
;
; } else { // Don't flip twice.
;
	beq     L42B3
;
; temp2 = enemies_actual_y[x] + 6; // center y
;
	ldy     _x
	lda     _enemies_actual_y,y
	clc
	adc     #$06
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp4 = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L413C
;
; ENEMY_FLIP_DIRECTION(x);
;
L42B3:	ldy     _x
	lda     _enemies_flags,y
	eor     #$01
	sta     _enemies_flags,y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp1 = leftright_movement_moving_lookup_table[temp3];
;
L413C:	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	sta     _temp1
;
; temp1 += temp1;
;
	clc
	adc     _temp1
	sta     _temp1
;
; temp0 = enemies_x[x] + temp1;
;
	ldy     _x
	lda     _enemies_x,y
	clc
	adc     _temp1
	sta     _temp0
;
; enemies_x[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies_x,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sun_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sun_ai: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x);
;
	ldy     _x
	lda     _enemies_flags,y
	and     #$01
	sta     _temp3
;
; high_byte(temp5) = enemies_nt[x];
;
	ldy     _x
	lda     _enemies_nt,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies_actual_y[x];
;
	ldy     _x
	lda     _enemies_actual_y,y
	sta     _temp5
;
; temp1 = enemies_x[x] + 6; 
;
	ldy     _x
	lda     _enemies_x,y
	clc
	adc     #$06
	sta     _temp1
;
; if (temp3 == UP) { // subtracting from y
;
	lda     _temp3
	bne     L3E12
;
; temp5 = sub_scroll_y(1, temp5);
;
	lda     #$01
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _sub_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp2 = low_byte(temp5); // Y of tile of interest
;
	lda     _temp5
	sta     _temp2
;
; temp4 = high_byte(temp5); // NT of tile of interest
;
	lda     _temp5+1
;
; } else { // DOWN (adding to y)
;
	jmp     L42B5
;
; add_scroll_y(temp5, 1, temp5);
;
L3E12:	lda     _temp5
	sta     _TEMP
	lda     _temp5+1
	sta     _TEMP+1
	lda     #$01
	jsr     _add_scroll_y_fast_sub
	sta     _temp5
	stx     _temp5+1
;
; add_scroll_y(temp6, 15, temp5); // 15 being the cosmetic size of an enemy
;
	lda     _temp5
	sta     _TEMP
	lda     _temp5+1
	sta     _TEMP+1
	lda     #$0F
	jsr     _add_scroll_y_fast_sub
	sta     _temp6
	stx     _temp6+1
;
; temp2 = low_byte(temp6); // Y of tile of interest
;
	lda     _temp6
	sta     _temp2
;
; temp4 = high_byte(temp6); // NT of tile of interest
;
	lda     _temp6+1
L42B5:	sta     _temp4
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L3E53
;
; ENEMY_FLIP_DIRECTION(x);
;
	ldy     _x
	lda     _enemies_flags,y
	eor     #$01
	sta     _enemies_flags,y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; enemies_nt[x] = high_byte(temp5);
;
L3E53:	ldy     _x
	lda     _temp5+1
	sta     _enemies_nt,y
;
; enemies_actual_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies_actual_y,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai: near

.segment	"CODE"

;
; if (enemies_x[x] < high_byte(valrigard.x) ) {
;
	ldy     _x
	lda     _enemies_x,y
	cmp     _valrigard+1
	bcs     L4182
;
; ENEMY_SET_DIRECTION_RIGHT(x);
;
	ldy     _x
	lda     _enemies_flags,y
	ora     #$01
;
; } else {
;
	jmp     L42B7
;
; ENEMY_SET_DIRECTION_LEFT(x);
;
L4182:	ldy     _x
	lda     _enemies_flags,y
	and     #$FE
L42B7:	sta     _enemies_flags,y
;
; __asm__("ldx %v", x);
;
	ldx     _x
;
; __asm__("ldy %v, %s", enemies_extra2, X);
;
	ldy     _enemies_extra2,x
;
; __asm__("iny");
;
	iny
;
; __asm__("tya");
;
	tya
;
; __asm__("sta %v, %s", enemies_extra2, X);
;
	sta     _enemies_extra2,x
;
; __asm__("ldy %v, %s", enemies_timer, X);
;
	ldy     _enemies_timer,x
;
; __asm__("iny");
;
	iny
;
; __asm__("tya");
;
	tya
;
; __asm__("sta %v, %s", enemies_timer, X);
;
	sta     _enemies_timer,x
;
; __asm__("sta %v", temp0);
;
	sta     _temp0
;
; AsmCallFunctionAtPtrOffsetByIndexVar(boss_ai_functions, boss_state);
;
	lda     _boss_state
	asl     a
	tay
	lda     _boss_ai_functions,y
	ldx     _boss_ai_functions+1,y
	jmp     callax

.endproc

; ---------------------------------------------------------------
; void __near__ boss_fireball_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_fireball_ai: near

.segment	"CODE"

;
; temp1 = enemies_timer[x];
;
	ldy     _x
	lda     _enemies_timer,y
	sta     _temp1
;
; cannonball_ai_sub();
;
	jsr     _cannonball_ai_sub
;
; if (METATILE_IS_SOLID(collision) || boss_state == 5 /*BOSS_STATE_DYING*/) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	bne     L42B8
	lda     _boss_state
	cmp     #$05
	beq     L42B8
	rts
;
; enemies_type[x] = ENEMY_NONE;
;
L42B8:	ldy     _x
	lda     #$00
	sta     _enemies_type,y
;
; enemies_flags[x] = 0;
;
	ldy     _x
	sta     _enemies_flags,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ death_effect_timer_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_death_effect_timer_ai: near

.segment	"CODE"

;
; __asm__("ldx %v", x);
;
	ldx     _x
;
; __asm__("ldy %v, %s", enemies_timer, X);
;
	ldy     _enemies_timer,x
;
; __asm__("dey");
;
	dey
;
; __asm__("tya");
;
	tya
;
; __asm__("sta %v, %s", enemies_timer, X);
;
	sta     _enemies_timer,x
;
; __asm__("sta %v", temp0);
;
	sta     _temp0
;
; if (temp0 == 0){
;
	lda     _temp0
	bne     L41C5
;
; enemies_type[x] = ENEMY_NONE;
;
	ldy     _x
	sta     _enemies_type,y
;
; enemies_flags[x] = 0;
;
	ldy     _x
	sta     _enemies_flags,y
;
; }
;
L41C5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fire_at_target (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fire_at_target: near

.segment	"CODE"

;
; temp4 = 0;
;
	lda     #$00
	sta     _temp4
;
; if (temp0 < temp2) {
;
	lda     _temp0
	cmp     _temp2
	bcs     L3F51
;
; CANNONBALL_SET_NEG_X(temp_x);
;
	ldy     _temp_x
	lda     _enemies_flags,y
	and     #$BF
	sta     _enemies_flags,y
;
; } else {
;
	jmp     L42BA
;
; CANNONBALL_SET_POS_X(temp_x);
;
L3F51:	ldy     _temp_x
	lda     _enemies_flags,y
	ora     #$40
	sta     _enemies_flags,y
;
; ++temp4;
;
	inc     _temp4
;
; if (temp1 < temp3) {
;
L42BA:	lda     _temp1
	cmp     _temp3
	bcs     L3F65
;
; CANNONBALL_SET_NEG_Y(temp_x);
;
	ldy     _temp_x
	lda     _enemies_flags,y
	and     #$DF
	sta     _enemies_flags,y
;
; } else {
;
	jmp     L3F6F
;
; CANNONBALL_SET_POS_Y(temp_x);
;
L3F65:	ldy     _temp_x
	lda     _enemies_flags,y
	ora     #$20
	sta     _enemies_flags,y
;
; temp4 += 0b10;
;
	lda     #$02
	clc
	adc     _temp4
	sta     _temp4
;
; temp0 = abs_subtract(temp0, temp2);
;
L3F6F:	lda     _temp0
	jsr     pusha
	lda     _temp2
	jsr     _abs_subtract
	sta     _temp0
;
; if ((temp0 & 0x0f) > 8) { temp0 += 0x10; } // Round metatile x up.
;
	and     #$0F
	cmp     #$09
	bcc     L3F7E
	lda     #$10
	clc
	adc     _temp0
	sta     _temp0
;
; temp1 = abs_subtract(temp1, temp3);
;
L3F7E:	lda     _temp1
	jsr     pusha
	lda     _temp3
	jsr     _abs_subtract
	sta     _temp1
;
; coordinates = (temp1 & 0xf0) + (temp0 >> 4);
;
	and     #$F0
	sta     ptr1
	lda     _temp0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = brads_lookup(coordinates);
;
	ldy     _coordinates
	lda     _brads_table,y
	sta     _temp0
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ switch_menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_switch_menu: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear();
;
	jsr     _oam_clear
;
; game_mode = MODE_MENU; // Ensure the correct game mode is active.
;
	lda     #$00
	sta     _game_mode
;
; menu_selection = 0; // Just to make sure we don't accidentally point to an invalid menu item somehow.
;
	sta     _menu_selection
;
; set_prg_bank(MENU_DATA_BANK);
;
	lda     #$05
	jsr     _set_prg_bank
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, menu_compressed_data, menu);
;
	lda     _menu
	asl     a
	tay
	lda     _menu_compressed_data,y
	sta     _temppointer
	lda     _menu_compressed_data+1,y
	sta     _temppointer+1
;
; LZG_decode(temppointer, cmap);
;
	lda     _temppointer
	ldx     _temppointer+1
	jsr     pushax
	lda     #<(_cmap)
	ldx     #>(_cmap)
	jsr     _LZG_decode
;
; vram_write(cmap, (32*30));
;
	lda     #<(_cmap)
	ldx     #>(_cmap)
	jsr     pushax
	ldx     #$03
	lda     #$C0
	jsr     _vram_write
;
; AsmCallFunctionAtPtrOffsetByIndexVar(menu_load_functions, menu);
;
	lda     _menu
	asl     a
	tay
	lda     _menu_load_functions,y
	ldx     _menu_load_functions+1,y
	jsr     callax
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ menu_level_select (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu_level_select: near

.segment	"CODE"

;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_A) {
;
	and     #$80
	beq     L42BC
;
; sfx_play(SFX_MENU_BEEP, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; score = 0; // Reset the score...
;
	lda     #$00
	sta     _score
	sta     _score+1
;
; previous_score = 0; // and the previous score.
;
	sta     _previous_score
	sta     _previous_score+1
;
; begin_level();
;
	jmp     _begin_level
;
; if (pad1_new & PAD_LEFT) {
;
L42BC:	lda     _pad1_new
	and     #$02
	beq     L42BE
;
; if (level_index != 0) {
;
	lda     _level_index
	beq     L42BD
;
; --level_index;
;
	dec     _level_index
;
; } else {
;
	jmp     L42BF
;
; level_index = NUMBER_OF_LEVELS - 1;
;
L42BD:	lda     #$1C
;
; } else if (pad1_new & PAD_RIGHT) {
;
	jmp     L42BB
L42BE:	lda     _pad1_new
	and     #$01
	beq     L42BF
;
; ++level_index;
;
	inc     _level_index
;
; if (level_index == NUMBER_OF_LEVELS) {
;
	lda     _level_index
	cmp     #$1D
	bne     L42BF
;
; level_index = 0;
;
	lda     #$00
L42BB:	sta     _level_index
;
; if (pad1_new & (PAD_LEFT | PAD_RIGHT)) {
;
L42BF:	lda     _pad1_new
	and     #$03
	jeq     L42C2
;
; sfx_play(SFX_MENU_BEEP, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for (temp0 = 0; temp0 < 28; ++temp0) { cmap[temp0] = ' '; }
;
	lda     #$00
	sta     _temp0
L42C0:	lda     _temp0
	cmp     #$1C
	bcs     L2FFC
	ldy     _temp0
	lda     #$20
	sta     _cmap,y
	inc     _temp0
	jmp     L42C0
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, level_names, level_index);
;
L2FFC:	lda     _level_index
	asl     a
	tay
	lda     _level_names,y
	sta     _temppointer
	lda     _level_names+1,y
	sta     _temppointer+1
;
; temp0 = strlen(temppointer);
;
	lda     _temppointer
	ldx     _temppointer+1
	jsr     _strlen
	sta     _temp0
;
; for (temp1 = 0; temp1 < temp0; ++temp1) {
;
	lda     #$00
	sta     _temp1
	tax
L42C1:	lda     _temp1
	cmp     _temp0
	txa
	sbc     #$00
	bcs     L3019
;
; AsmSet1ByteFromZpPtrAtIndexVar(temp2, temppointer, temp1);
;
	ldy     _temp1
	lda     (_temppointer),y
	sta     _temp2
;
; cmap[temp1] = temp2;
;
	ldy     _temp1
	lda     _temp2
	sta     _cmap,y
;
; for (temp1 = 0; temp1 < temp0; ++temp1) {
;
	inc     _temp1
	jmp     L42C1
;
; multi_vram_buffer_horz(cmap, 28, NTADR_A(3, 12));
;
L3019:	jsr     decsp3
	lda     #<(_cmap)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_cmap)
	sta     (sp),y
	lda     #$1C
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$83
	jsr     _multi_vram_buffer_horz
;
; AsmSet2ByteFromPtrAtIndexVar(temp5, level_high_scores, level_index);
;
	lda     _level_index
	asl     a
	tay
	lda     _level_high_scores,y
	sta     _temp5
	lda     _level_high_scores+1,y
	sta     _temp5+1
;
; convert_to_decimal(temp5);
;
	lda     _temp5
	ldx     _temp5+1
	jsr     _convert_to_decimal
;
; prepare_score_string();
;
	jsr     _prepare_score_string
;
; multi_vram_buffer_horz(score_string, 5, NTADR_A(14, 14));
;
	jsr     decsp3
	lda     #<(_score_string)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_score_string)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$CE
	jsr     _multi_vram_buffer_horz
;
; if (pad1_new & PAD_B) {
;
L42C2:	lda     _pad1_new
	and     #$40
	beq     L304D
;
; menu = MENU_GAME_SELECT;
;
	lda     #$00
	sta     _menu
;
; switch_menu();
;
	jmp     _switch_menu
;
; }
;
L304D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ menu_game_type_select (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu_game_type_select: near

.segment	"CODE"

;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_DOWN) {
;
	and     #$04
	beq     L42C3
;
; ++menu_selection;
;
	inc     _menu_selection
;
; if (menu_selection == GAME_TYPE_MENU_OPTIONS) {  // Wrap around
;
	lda     _menu_selection
	cmp     #$04
	bne     L42C3
;
; menu_selection = 0;
;
	lda     #$00
	sta     _menu_selection
;
; if (pad1_new & PAD_UP) {
;
L42C3:	lda     _pad1_new
	and     #$08
	beq     L42C5
;
; if (menu_selection != 0) {
;
	lda     _menu_selection
	beq     L42C4
;
; --menu_selection;
;
	dec     _menu_selection
;
; } else {
;
	jmp     L42C5
;
; menu_selection = GAME_TYPE_MENU_OPTIONS - 1;
;
L42C4:	lda     #$03
	sta     _menu_selection
;
; if (pad1_new & PAD_A) {
;
L42C5:	lda     _pad1_new
	and     #$80
	beq     L42C6
;
; switch (menu_selection) {
;
	lda     _menu_selection
;
; }
;
	bne     L3082
;
; level_index = 0;
;
	sta     _level_index
;
; score = 0;
;
	sta     _score
	sta     _score+1
;
; game_level_advance_behavior = LEVEL_UP_BEHAVIOR_CONTINUE;
;
	lda     #$01
	sta     _game_level_advance_behavior
;
; begin_level();
;
	jmp     _begin_level
;
; menu = game_type_select_menu_links[menu_selection];
;
L3082:	ldy     _menu_selection
	lda     _game_type_select_menu_links,y
	sta     _menu
;
; game_level_advance_behavior = LEVEL_UP_BEHAVIOR_EXIT;
;
	lda     #$00
	sta     _game_level_advance_behavior
;
; switch_menu();
;
	jmp     _switch_menu
;
; if (pad1_new & (PAD_UP | PAD_DOWN | PAD_A)) {
;
L42C6:	lda     _pad1_new
	and     #$8C
	beq     L308A
;
; sfx_play(SFX_MENU_BEEP, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; oam_spr(game_type_select_menu_selector_x[menu_selection], game_type_select_menu_selector_y[menu_selection], 0x10, 0);
;
L308A:	ldy     _menu_selection
	lda     _game_type_select_menu_selector_x,y
	sta     _TEMP
	ldy     _menu_selection
	lda     _game_type_select_menu_selector_y,y
	sta     _TEMP+1
	lda     #$10
	sta     _TEMP+2
	lda     #$00
	jmp     _oam_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ menu_about_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu_about_screen: near

.segment	"CODE"

;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new) {
;
	lda     _pad1_new
	beq     L30BD
;
; sfx_play(SFX_MENU_BEEP, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; menu = MENU_GAME_SELECT;
;
	lda     #$00
	sta     _menu
;
; switch_menu();
;
	jmp     _switch_menu
;
; }
;
L30BD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ menu_game_complete_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu_game_complete_screen: near

.segment	"CODE"

;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new) { // TODO: Make this only activate on a B button press?
;
	lda     _pad1_new
	beq     L30D0
;
; menu = 0;
;
	lda     #$00
	sta     _menu
;
; switch_menu();
;
	jsr     _switch_menu
;
; music_play(MENU_SONG);
;
	lda     #$00
	jmp     _music_play
;
; oam_meta_spr(123, 146, valrigard_idle_right);
;
L30D0:	lda     #$7B
	sta     _TEMP+5
	lda     #$92
	sta     _TEMP+6
	lda     #<(_valrigard_idle_right)
	ldx     #>(_valrigard_idle_right)
	jmp     _oam_meta_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ menu_settings (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu_settings: near

.segment	"RODATA"

L313F:
	.word	$0000

.segment	"CODE"

;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & (PAD_UP | PAD_DOWN | PAD_A | PAD_B)) {
;
	and     #$CC
	beq     L42C7
;
; sfx_play(SFX_MENU_BEEP, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (pad1_new & PAD_DOWN) {
;
L42C7:	lda     _pad1_new
	and     #$04
	beq     L42C8
;
; ++menu_selection;
;
	inc     _menu_selection
;
; if (menu_selection == SETTINGS_OPTIONS) {  // Wrap around
;
	lda     _menu_selection
	cmp     #$02
	bne     L42C8
;
; menu_selection = 0;
;
	lda     #$00
	sta     _menu_selection
;
; if (pad1_new & PAD_UP) {
;
L42C8:	lda     _pad1_new
	and     #$08
	beq     L42CA
;
; if (menu_selection != 0) {
;
	lda     _menu_selection
	beq     L42C9
;
; --menu_selection;
;
	dec     _menu_selection
;
; } else {
;
	jmp     L42CA
;
; menu_selection = SETTINGS_OPTIONS - 1;
;
L42C9:	lda     #$01
	sta     _menu_selection
;
; if (pad1_new & PAD_A) {
;
L42CA:	lda     _pad1_new
	and     #$80
	beq     L42CC
;
; switch (menu_selection) {
;
	lda     _menu_selection
;
; }
;
	beq     L42CB
	cmp     #$01
	bne     L3141
;
; clear_saved_data();
;
	jsr     _clear_saved_data
;
; menu = MENU_GAME_SELECT;
;
	lda     #$00
	sta     _menu
;
; switch_menu();
;
	jmp     _switch_menu
;
; SETTINGS_TOGGLE_DOWN_TO_REVIVE(); // This will save an unnecessary ldx/stx 
;
L42CB:	lda     _settings_memory
	eor     #$01
	sta     _settings_memory
;
; temp0 = SETTINGS_IS_DOWN_TO_REVIVE_ENABLED; // These aren't all located in the same bit, so...
;
	and     #$01
	sta     _temp0
;
; temp5 = NTADR_A(settings_menu_toggle_text_x, settings_menu_text_y[menu_selection]);
;
L3141:	ldy     _menu_selection
	ldx     #$00
	lda     _settings_menu_text_y,y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _settings_menu_toggle_text_x
	ora     ptr1
	sta     _temp5
	lda     tmp1
	ora     #$20
	sta     _temp5+1
;
; temppointer = temp0 ? string_on : string_off;
;
	lda     _temp0
	beq     L314D
	lda     _string_on
	ldx     _string_on+1
	jmp     L314F
L314D:	lda     _string_off
	ldx     _string_off+1
L314F:	sta     _temppointer
	stx     _temppointer+1
;
; multi_vram_buffer_horz(temppointer, 3, temp5);
;
	jsr     decsp3
	lda     _temppointer
	ldy     #$01
	sta     (sp),y
	iny
	lda     _temppointer+1
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	lda     _temp5
	ldx     _temp5+1
	jsr     _multi_vram_buffer_horz
;
; if (pad1_new & PAD_B) { // Back to main menu
;
L42CC:	lda     _pad1_new
	and     #$40
	beq     L42CD
;
; menu = MENU_GAME_SELECT;
;
	lda     #$00
	sta     _menu
;
; switch_menu();
;
	jmp     _switch_menu
;
; oam_spr(settings_menu_selector_x, settings_menu_selector_y[menu_selection], 0x10, 0);
;
L42CD:	lda     _settings_menu_selector_x
	sta     _TEMP
	ldy     _menu_selection
	lda     _settings_menu_selector_y,y
	sta     _TEMP+1
	lda     #$10
	sta     _TEMP+2
	lda     #$00
	jmp     _oam_spr_fast_sub

.endproc

; ---------------------------------------------------------------
; void __near__ load_level_selector (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level_selector: near

.segment	"CODE"

;
; set_prg_bank(LEVEL_METADATA_BANK);
;
	lda     #$00
	jsr     _set_prg_bank
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, level_names, level_index);
;
	lda     _level_index
	asl     a
	tay
	lda     _level_names,y
	sta     _temppointer
	lda     _level_names+1,y
	sta     _temppointer+1
;
; put_str(NTADR_A(3, 12), temppointer);
;
	ldx     #$21
	lda     #$83
	sta     _address
	stx     _address+1
	lda     _temppointer+1
	sta     _temppointer+1
	lda     _temppointer
	sta     _temppointer
	jsr     _put_str_sub
;
; AsmSet2ByteFromPtrAtIndexVar(temp5, level_high_scores, level_index);
;
	lda     _level_index
	asl     a
	tay
	lda     _level_high_scores,y
	sta     _temp5
	lda     _level_high_scores+1,y
	sta     _temp5+1
;
; convert_to_decimal(temp5);
;
	lda     _temp5
	ldx     _temp5+1
	jsr     _convert_to_decimal
;
; prepare_score_string();
;
	jsr     _prepare_score_string
;
; multi_vram_buffer_horz(score_string, 5, NTADR_A(14, 14));
;
	jsr     decsp3
	lda     #<(_score_string)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_score_string)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$CE
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ load_about_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_about_screen: near

.segment	"CODE"

;
; put_str(NTADR_A(6, 6), __DATE__);
;
	ldx     #$20
	lda     #$C6
	sta     _address
	stx     _address+1
	lda     #>(L30A8)
	sta     _temppointer+1
	lda     #<(L30A8)
	sta     _temppointer
	jsr     _put_str_sub
;
; put_str(NTADR_A(18, 6), __TIME__);
;
	ldx     #$20
	lda     #$D2
	sta     _address
	stx     _address+1
	lda     #>(L30B3)
	sta     _temppointer+1
	lda     #<(L30B3)
	sta     _temppointer
	jmp     _put_str_sub

.endproc

; ---------------------------------------------------------------
; void __near__ load_game_complete_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_game_complete_screen: near

.segment	"CODE"

;
; game_mode = MODE_MENU;
;
	lda     #$00
	sta     _game_mode
;
; music_stop();
;
	jmp     _music_stop

.endproc

; ---------------------------------------------------------------
; void __near__ load_settings_menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_settings_menu: near

.segment	"CODE"

;
; for (temp0 = 0; temp0 < SETTINGS_OPTIONS - 1; ++temp0) {
;
	lda     #$00
	sta     _temp0
L42CE:	lda     _temp0
	beq     L42CF
;
; }
;
	rts
;
; temp1 = temp0 & 0b111; // Index for bitmask
;
L42CF:	and     #$07
	sta     _temp1
;
; temp1 = settings_bitmask_lookup_table[temp1]; // bitmask for settings bit
;
	ldy     _temp1
	lda     _settings_bitmask_lookup_table,y
	sta     _temp1
;
; temp2 = settings_memory[temp0 >> 3] & temp1; // 
;
	ldx     #$00
	lda     _temp0
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	txa
	clc
	adc     #>(_settings_memory)
	sta     ptr1+1
	ldy     #<(_settings_memory)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp1
	and     ptr1
	sta     _temp2
;
; temp5 = NTADR_A(settings_menu_toggle_text_x, settings_menu_text_y[temp0]);
;
	ldy     _temp0
	lda     _settings_menu_text_y,y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _settings_menu_toggle_text_x
	ora     ptr1
	sta     _temp5
	lda     tmp1
	ora     #$20
	sta     _temp5+1
;
; temppointer = temp2 ? string_on : string_off;
;
	lda     _temp2
	beq     L3104
	lda     _string_on
	ldx     _string_on+1
	jmp     L3106
L3104:	lda     _string_off
	ldx     _string_off+1
L3106:	sta     _temppointer
	stx     _temppointer+1
;
; put_str(temp5, temppointer);
;
	lda     _temp5+1
	sta     _address+1
	lda     _temp5
	sta     _address
	lda     _temppointer+1
	sta     _temppointer+1
	lda     _temppointer
	sta     _temppointer
	jsr     _put_str_sub
;
; for (temp0 = 0; temp0 < SETTINGS_OPTIONS - 1; ++temp0) {
;
	inc     _temp0
	jmp     L42CE

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; set_chr_bank_0(0);
;
	lda     #$00
	jsr     _set_chr_bank_0
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; check_checksum();
;
	jsr     _check_checksum
;
; set_prg_bank(4);
;
	lda     #$04
	jsr     _set_prg_bank
;
; show_title_screen();
;
	jsr     _show_title_screen
;
; level_index = 0;
;
	lda     #$00
	sta     _level_index
;
; level_index_backup = 0xff; // Set the level index backup to a null value.
;
	lda     #$FF
	sta     _level_index_backup
;
; switch_menu();
;
	jsr     _switch_menu
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; music_play(MENU_SONG);
;
	lda     #$00
	jsr     _music_play
;
; set_music_speed(5);
;
	lda     #$05
	jsr     _set_music_speed
;
; while (game_mode == MODE_MENU) { 
;
	jmp     L42D7
;
; ppu_wait_nmi();
;
L2E53:	jsr     _ppu_wait_nmi
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear(); // ...and the OAM, in case we use a sprite.
;
	jsr     _oam_clear
;
; AsmCallFunctionAtPtrOffsetByIndexVar(menu_logic_functions, menu);
;
	lda     _menu
	asl     a
	tay
	lda     _menu_logic_functions,y
	ldx     _menu_logic_functions+1,y
	jsr     callax
;
; while (game_mode == MODE_MENU) { 
;
L42D7:	lda     _game_mode
	beq     L2E53
;
; while (game_mode == MODE_GAME) {
;
	jmp     L42E7
;
; conveyor_delta = 0;
;
L42D8:	lda     #$00
	sta     _conveyor_delta
;
; did_headbonk = 0;
;
	sta     _did_headbonk
;
; RESET_TOUCHING_YELLOW_DOOR();
;
	lda     _player_flags
	and     #$EF
	sta     _player_flags
;
; RESET_TOUCHING_SPIKES();
;
	and     #$DF
	sta     _player_flags
;
; RESET_SCORE_CHANGED_THIS_FRAME();
;
	and     #$F7
	sta     _player_flags
;
; RESET_IS_WALKING();
;
	and     #$BF
	sta     _player_flags
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); 
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; movement();
;
	jsr     _movement
;
; check_spr_objects();
;
	jsr     _check_spr_objects
;
; if (!STATUS_DEAD) { 
;
	lda     _player_flags
	and     #$02
	bne     L2E84
;
; swing_sword();
;
	jsr     _swing_sword
;
; sprite_collisions();
;
	jsr     _sprite_collisions
;
; enemy_movement();
;
L2E84:	jsr     _enemy_movement
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; if (SCORE_CHANGED_THIS_FRAME) { convert_to_decimal(score); }
;
	lda     _player_flags
	and     #$08
	beq     L2E8C
	lda     _score
	ldx     _score+1
	jsr     _convert_to_decimal
;
; draw_sprites();
;
L2E8C:	jsr     _draw_sprites
;
; if (valrigard.velocity_y >= 0) { // If this is true, draw down. Otherwise, draw up.
;
	ldx     _valrigard+6+1
	bmi     L2E92
;
; add_scroll_y(pseudo_scroll_y, 0x20, scroll_y);
;
	lda     _scroll_y
	sta     _TEMP
	lda     _scroll_y+1
	sta     _TEMP+1
	lda     #$20
	jsr     _add_scroll_y_fast_sub
	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; pseudo_scroll_y += 0xef; 
;
	lda     #$EF
	clc
	adc     _pseudo_scroll_y
	sta     _pseudo_scroll_y
	bcc     L2EA2
	inc     _pseudo_scroll_y+1
;
; }  else {
;
	jmp     L2EA2
;
; pseudo_scroll_y = sub_scroll_y(0x20, scroll_y);
;
L2E92:	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; temp1 = high_byte(pseudo_scroll_y);
;
L2EA2:	lda     _pseudo_scroll_y+1
	sta     _temp1
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp1);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; set_data_pointer(temppointer); // Should this value be clamped to the number of cmaps?
;
	lda     _temppointer
	ldx     _temppointer+1
	jsr     _set_data_pointer
;
; draw_screen_sub();
;
	jsr     _draw_screen_sub
;
; handle_tile_clear_queue();
;
	jsr     _handle_tile_clear_queue
;
; if (game_mode == MODE_LEVEL_COMPLETE) {
;
	lda     _game_mode
	cmp     #$04
	jne     L42DE
;
; advanced_conditional = level_index >= NUMBER_OF_LEVELS - NUMBER_OF_BONUS_LEVELS;
;
	lda     _level_index
	cmp     #$1B
	lda     #$00
	rol     a
	sta     _advanced_conditional
;
; AsmSet2ByteFromPtrAtIndexVar(temp5, level_high_scores, level_index);
;
	lda     _level_index
	asl     a
	tay
	lda     _level_high_scores,y
	sta     _temp5
	lda     _level_high_scores+1,y
	sta     _temp5+1
;
; temp6 = score - previous_score;
;
	lda     _score
	sec
	sbc     _previous_score
	sta     _temp6
	lda     _score+1
	sbc     _previous_score+1
	sta     _temp6+1
;
; if (temp5 < temp6) {
;
	lda     _temp5
	cmp     _temp6
	lda     _temp5+1
	sbc     _temp6+1
	bcs     L2ED0
;
; if (advanced_conditional && level_index_backup != 0xff) {
;
	lda     _advanced_conditional
	beq     L2ED4
	lda     _level_index_backup
	cmp     #$FF
	bne     L42D9
L2ED4:	ldx     #$00
	jmp     L42DA
;
; level_high_scores[level_index_backup] = temp6;
;
L42D9:	ldx     #$00
	lda     _level_index_backup
;
; } else {
;
	jmp     L42F6
;
; level_high_scores[level_index] = temp6;
;
L42DA:	lda     _level_index
L42F6:	asl     a
	bcc     L42D6
	inx
	clc
L42D6:	adc     #<(_level_high_scores)
	sta     ptr1
	txa
	adc     #>(_level_high_scores)
	sta     ptr1+1
	lda     _temp6
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     _temp6+1
	sta     (ptr1),y
;
; update_checksum();
;
	jsr     _update_checksum
;
; if (SHOULD_GO_TO_BONUS_LEVEL) {
;
L2ED0:	lda     _player_flags
	and     #$80
	beq     L2EDE
;
; level_index_backup = level_index;
;
	lda     _level_index
	sta     _level_index_backup
;
; level_index = NUMBER_OF_LEVELS - 1;
;
	lda     #$1C
	sta     _level_index
;
; level_index -= level_index_backup & 0x1; // Bitmask; change this if we add more bonus levels
;
	lda     _level_index_backup
	and     #$01
	eor     #$FF
	sec
	adc     _level_index
	sta     _level_index
;
; previous_score = score;
;
	lda     _score+1
	sta     _previous_score+1
	lda     _score
	sta     _previous_score
;
; } else {
;
	jmp     L42D4
;
; if (advanced_conditional) {
;
L2EDE:	lda     _advanced_conditional
	beq     L42DB
;
; level_index = level_index_backup;
;
	lda     _level_index_backup
	sta     _level_index
;
; level_index_backup = 0xff;
;
	lda     #$FF
	sta     _level_index_backup
;
; if (game_level_advance_behavior == LEVEL_UP_BEHAVIOR_EXIT || level_index == NUMBER_OF_LEVELS - 1) {
;
L42DB:	lda     _game_level_advance_behavior
	beq     L42DC
	lda     _level_index
	cmp     #$1C
	bne     L42DD
;
; menu = MENU_COMPLETE_SCREEN;
;
L42DC:	lda     #$03
	sta     _menu
;
; switch_menu();
;
	jsr     _switch_menu
;
; } else { // == LEVEL_UP_BEHAVIOR_CONTINUE and there are levels left
;
	jmp     L42E3
;
; level_index += 1;
;
L42DD:	inc     _level_index
;
; previous_score = score; // Bank the score
;
	lda     _score+1
	sta     _previous_score+1
	lda     _score
	sta     _previous_score
;
; else if (STATUS_DEAD && high_byte(valrigard.y) == high_byte(old_y)) {
;
	jmp     L42D4
L42DE:	lda     _player_flags
	and     #$02
	beq     L42E3
	lda     _old_y+1
	cmp     _valrigard+3
	bne     L42E3
;
; if (player_death_timer == 0) { music_play(DEATH_SONG); }
;
	lda     _player_death_timer
	bne     L2F05
	lda     #$04
	jsr     _music_play
;
; if (get_frame_count() & 1) { ++player_death_timer; }
;
L2F05:	jsr     _get_frame_count
	and     #$01
	beq     L42E2
	inc     _player_death_timer
;
; if (player_death_timer == 150) {
;
L42E2:	lda     _player_death_timer
	cmp     #$96
	bne     L42E3
;
; score = previous_score; // Revert score to pre-death value
;
	lda     _previous_score+1
	sta     _score+1
	lda     _previous_score
	sta     _score
;
; begin_level(); // Restart this level.    
;
L42D4:	jsr     _begin_level
;
; if (pad1 & PAD_DOWN && STATUS_DEAD && SETTINGS_IS_DOWN_TO_REVIVE_ENABLED) {
;
L42E3:	lda     _pad1
	and     #$04
	beq     L42E7
	lda     _player_flags
	and     #$02
	beq     L42E7
	lda     _settings_memory
	and     #$01
	beq     L42E7
;
; SET_STATUS_ALIVE();
;
	lda     _player_flags
	and     #$FD
	sta     _player_flags
;
; player_death_timer = 0;
;
	lda     #$00
	sta     _player_death_timer
;
; music_play(LEVEL_SONG_0);
;
	lda     #$01
	jsr     _music_play
;
; while (game_mode == MODE_GAME) {
;
L42E7:	lda     _game_mode
	cmp     #$01
	jeq     L42D8
;
; while (game_mode == MODE_GAME_SHOWING_TEXT) {
;
	jmp     L42E8
;
; ppu_wait_nmi(); 
;
L2F1F:	jsr     _ppu_wait_nmi
;
; set_chr_bank_0(0);
;
	lda     #$00
	jsr     _set_chr_bank_0
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); 
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; dialog_box_handler();
;
	jsr     _dialog_box_handler
;
; while (game_mode == MODE_GAME_SHOWING_TEXT) {
;
L42E8:	lda     _game_mode
	cmp     #$05
	beq     L2F1F
;
; while (1){
;
	jmp     L42D7

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_score_string (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_score_string: near

.segment	"CODE"

;
; temp0 = score_string[0];
;
	lda     _score_string
	sta     _temp0
;
; score_string[0] = score_string[4];
;
	lda     _score_string+4
	sta     _score_string
;
; score_string[4] = temp0;
;
	lda     _temp0
	sta     _score_string+4
;
; temp0 = score_string[1];
;
	lda     _score_string+1
	sta     _temp0
;
; score_string[1] = score_string[3];
;
	lda     _score_string+3
	sta     _score_string+1
;
; score_string[3] = temp0;
;
	lda     _temp0
	sta     _score_string+3
;
; temp1 = 0;
;
	lda     #$00
	sta     _temp1
;
; for (temp0 = 0; temp0 < 5; ++temp0) {
;
	sta     _temp0
L42F7:	lda     _temp0
	cmp     #$05
	bcs     L2F8D
;
; temp1 |= score_string[temp0];
;
	ldy     _temp0
	lda     _score_string,y
	ora     _temp1
	sta     _temp1
;
; if (temp1 || temp0 == 4) { // Don't display trailing zeroes
;
	lda     _temp1
	bne     L42F8
	lda     _temp0
	cmp     #$04
	bne     L42F9
;
; score_string[temp0] += '0';    
;
L42F8:	lda     #<(_score_string)
	ldx     #>(_score_string)
	clc
	adc     _temp0
	bcc     L2F9D
	inx
L2F9D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$30
	sta     (ptr1),y
;
; for (temp0 = 0; temp0 < 5; ++temp0) {
;
L42F9:	inc     _temp0
	jmp     L42F7
;
; }
;
L2F8D:	rts

.endproc

