;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_memcpy
	.import		_memfill
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_check_collision
	.import		_set_scroll_y
	.import		_add_scroll_y
	.import		_sub_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_1_mt
	.import		_buffer_4_mt
	.import		_flush_vram_update_nmi
	.import		_seed_rng
	.export		_bankLevel
	.export		_bankBuffer
	.import		_set_prg_bank
	.import		_set_chr_bank_0
	.export		_valrigardIdleLeft
	.export		_valrigardIdleRight
	.export		_spikeball
	.export		_korbat_left
	.export		_korbat_right
	.export		_sun0
	.export		_sun1
	.export		_cannon_up
	.export		_cannon_up_left
	.export		_cannon_left
	.export		_cannon_down_left
	.export		_cannon_down
	.export		_cannon_down_right
	.export		_cannon_right
	.export		_cannon_up_right
	.export		_grarrl_left
	.export		_grarrl_right
	.export		_metatiles
	.export		_metatile_property_lookup_table
	.export		_level10_0
	.export		_level10_1
	.export		_level10_2
	.export		_level10_enemy
	.export		_level_starting_nt
	.export		_valrigard_starting_nt
	.export		_valrigard_inital_coords
	.export		_level_nametables
	.export		_level_names
	.export		_level_enemy_data
	.import		_score_string
	.import		_convert_to_decimal
	.import		_sin_lookup
	.import		_cos_lookup
	.import		_brads_lookup
	.import		_abs_subtract
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp0
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_temppointer
	.export		_temp_mutablepointer
	.export		_temp_funcpointer
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_player_flags
	.export		_game_mode
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_nt
	.export		_scroll_x
	.export		_pseudo_scroll_y
	.export		_scroll_y
	.export		_min_scroll_y
	.export		_max_scroll_y
	.export		_initial_scroll
	.export		_scroll_count
	.export		_L_R_switch
	.export		_old_x
	.export		_old_y
	.export		_temp_x
	.export		_temp_y
	.export		_level_index
	.export		_energy
	.export		_score
	.export		_stars
	.export		_timer
	.export		_song
	.export		_nt_min
	.export		_nt_max
	.export		_nt_current
	.export		_valrigard
	.export		_hitbox
	.export		_hitbox2
	.export		_debug_tile_x
	.export		_debug_tile_y
	.export		_palette_bg
	.export		_palette_sp
	.export		_shuffle_array
	.export		_enemies
	.export		_cmap0
	.export		_cmap1
	.export		_cmap2
	.export		_cmap3
	.export		_cmap4
	.export		_cmap5
	.export		_cmaps
	.export		_draw_sprites
	.export		_movement
	.export		_begin_level
	.export		_load_level_new
	.export		_load_room_new
	.export		_bg_collision
	.export		_bg_collision_sub
	.export		_draw_screen_U
	.export		_draw_screen_D
	.export		_draw_screen_sub
	.export		_check_spr_objects
	.export		_sprite_collisions
	.export		_enemy_movement
	.export		_korbat_ai
	.export		_spikeball_ai
	.export		_cannon_ai
	.export		_cannonball_ai
	.export		_acid_ai
	.export		_acid_drop_ai
	.export		_splyke_ai
	.export		_sun_ai
	.export		_boss_ai
	.export		_load_title_screen
	.export		_load_game_over_screen
	.export		_clear_screen
	.export		_draw_screen_sub_lookup_addr_0
	.export		_draw_screen_sub_lookup_index_offset_0
	.export		_draw_screen_sub_lookup_addr_1
	.export		_draw_screen_sub_lookup_index_offset_1
	.export		_leftright_movement_offset_lookup_table
	.export		_leftright_movement_moving_lookup_table
	.export		_updown_movement_offset_lookup_table
	.export		_korbat_sprite_lookup_table
	.export		_grarrl_sprite_lookup_table
	.export		_cannon_sprite_lookup_table
	.export		_cannon_ul_sprite_lookup_table
	.export		_cannon_ur_sprite_lookup_table
	.export		_cannon_dr_sprite_lookup_table
	.export		_cannon_dl_sprite_lookup_table
	.export		_cannon_sprite_quadrant_lookup_table
	.export		_main
	.export		_title_string
	.export		_author_string
	.export		_instruction_string
	.export		_game_over_string
	.export		_ai_pointers

.segment	"DATA"

_score:
	.word	$0000
_ai_pointers:
	.addr	_korbat_ai
	.addr	_korbat_ai
	.addr	_spikeball_ai
	.addr	_splyke_ai
	.addr	_cannon_ai
	.addr	_acid_ai
	.addr	_spikeball_ai
	.addr	_sun_ai
	.addr	_boss_ai
	.addr	_cannonball_ai
	.addr	_acid_drop_ai

.segment	"RODATA"

_valrigardIdleLeft:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F1
	.byte	$01
	.byte	$80
_valrigardIdleRight:
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F1
	.byte	$41
	.byte	$80
_spikeball:
	.byte	$FF
	.byte	$FF
	.byte	$12
	.byte	$03
	.byte	$07
	.byte	$FF
	.byte	$12
	.byte	$43
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$83
	.byte	$07
	.byte	$07
	.byte	$12
	.byte	$C3
	.byte	$80
_korbat_left:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$21
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$31
	.byte	$02
	.byte	$80
_korbat_right:
	.byte	$07
	.byte	$FF
	.byte	$20
	.byte	$42
	.byte	$FF
	.byte	$FF
	.byte	$21
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$30
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$31
	.byte	$42
	.byte	$80
_sun0:
	.byte	$FF
	.byte	$FF
	.byte	$13
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$13
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$14
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$14
	.byte	$40
	.byte	$80
_sun1:
	.byte	$FF
	.byte	$FF
	.byte	$15
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$15
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$16
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$16
	.byte	$40
	.byte	$80
_cannon_up:
	.byte	$FF
	.byte	$FF
	.byte	$1A
	.byte	$80
	.byte	$07
	.byte	$FF
	.byte	$1A
	.byte	$C0
	.byte	$FF
	.byte	$07
	.byte	$19
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$19
	.byte	$C0
	.byte	$80
_cannon_up_left:
	.byte	$FF
	.byte	$FF
	.byte	$1E
	.byte	$C0
	.byte	$FF
	.byte	$07
	.byte	$1D
	.byte	$C0
	.byte	$07
	.byte	$FF
	.byte	$1C
	.byte	$C0
	.byte	$07
	.byte	$07
	.byte	$1B
	.byte	$C0
	.byte	$80
_cannon_left:
	.byte	$FF
	.byte	$FF
	.byte	$2F
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$1F
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$2F
	.byte	$C0
	.byte	$07
	.byte	$07
	.byte	$1F
	.byte	$C0
	.byte	$80
_cannon_down_left:
	.byte	$FF
	.byte	$FF
	.byte	$1D
	.byte	$40
	.byte	$07
	.byte	$FF
	.byte	$1B
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$1E
	.byte	$40
	.byte	$07
	.byte	$07
	.byte	$1C
	.byte	$40
	.byte	$80
_cannon_down:
	.byte	$FF
	.byte	$FF
	.byte	$19
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$19
	.byte	$40
	.byte	$FF
	.byte	$07
	.byte	$1A
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$1A
	.byte	$40
	.byte	$80
_cannon_down_right:
	.byte	$FF
	.byte	$FF
	.byte	$1B
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$1D
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$1C
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$1E
	.byte	$00
	.byte	$80
_cannon_right:
	.byte	$FF
	.byte	$FF
	.byte	$1F
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$2F
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$1F
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$2F
	.byte	$80
	.byte	$80
_cannon_up_right:
	.byte	$FF
	.byte	$FF
	.byte	$1C
	.byte	$80
	.byte	$07
	.byte	$FF
	.byte	$1E
	.byte	$80
	.byte	$FF
	.byte	$07
	.byte	$1B
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$1D
	.byte	$80
	.byte	$80
_grarrl_left:
	.byte	$FF
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$41
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$50
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$51
	.byte	$02
	.byte	$80
_grarrl_right:
	.byte	$07
	.byte	$FF
	.byte	$40
	.byte	$42
	.byte	$FF
	.byte	$FF
	.byte	$41
	.byte	$42
	.byte	$07
	.byte	$07
	.byte	$50
	.byte	$42
	.byte	$FF
	.byte	$07
	.byte	$51
	.byte	$42
	.byte	$80
_metatiles:
	.byte	$A0
	.byte	$A0
	.byte	$B0
	.byte	$B0
	.byte	$00
	.byte	$A1
	.byte	$A1
	.byte	$B1
	.byte	$B1
	.byte	$00
	.byte	$A2
	.byte	$A3
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$B2
	.byte	$B3
	.byte	$B2
	.byte	$B3
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$E6
	.byte	$E3
	.byte	$F6
	.byte	$F3
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$94
	.byte	$F5
	.byte	$00
	.byte	$E2
	.byte	$E7
	.byte	$F2
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$8D
	.byte	$F6
	.byte	$F3
	.byte	$00
	.byte	$E6
	.byte	$E3
	.byte	$94
	.byte	$9D
	.byte	$00
	.byte	$E2
	.byte	$E7
	.byte	$F0
	.byte	$F5
	.byte	$00
	.byte	$E0
	.byte	$E5
	.byte	$F2
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$E5
	.byte	$94
	.byte	$F5
	.byte	$00
	.byte	$E2
	.byte	$E3
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$E0
	.byte	$8D
	.byte	$F0
	.byte	$9D
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$85
	.byte	$94
	.byte	$95
	.byte	$00
	.byte	$86
	.byte	$81
	.byte	$96
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$89
	.byte	$94
	.byte	$99
	.byte	$00
	.byte	$8A
	.byte	$81
	.byte	$9A
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$8D
	.byte	$94
	.byte	$9D
	.byte	$00
	.byte	$EC
	.byte	$ED
	.byte	$FC
	.byte	$FD
	.byte	$03
	.byte	$A4
	.byte	$A5
	.byte	$B4
	.byte	$B5
	.byte	$03
	.byte	$A6
	.byte	$A5
	.byte	$B6
	.byte	$B5
	.byte	$03
	.byte	$A6
	.byte	$A9
	.byte	$B6
	.byte	$B9
	.byte	$03
	.byte	$AA
	.byte	$AB
	.byte	$BA
	.byte	$BB
	.byte	$02
	.byte	$8E
	.byte	$8F
	.byte	$9E
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$AD
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$AE
	.byte	$AF
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$BC
	.byte	$CD
	.byte	$BC
	.byte	$DD
	.byte	$00
	.byte	$CE
	.byte	$BF
	.byte	$DE
	.byte	$BF
	.byte	$00
	.byte	$C4
	.byte	$C5
	.byte	$D4
	.byte	$D5
	.byte	$00
	.byte	$C6
	.byte	$C7
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$D8
	.byte	$D9
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$DA
	.byte	$DB
	.byte	$00
	.byte	$C2
	.byte	$C3
	.byte	$D2
	.byte	$D3
	.byte	$03
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$03
	.byte	$EA
	.byte	$EB
	.byte	$FA
	.byte	$FB
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_metatile_property_lookup_table:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$09
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
_level10_0:
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$17
	.byte	$19
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$18
	.byte	$18
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$01
	.byte	$01
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level10_1:
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$0D
	.byte	$11
	.byte	$2C
	.byte	$10
	.byte	$11
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$16
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$29
	.byte	$2C
	.byte	$29
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$11
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$16
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level10_2:
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$16
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$10
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$07
	.byte	$07
	.byte	$0A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$28
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$22
	.byte	$23
	.byte	$2C
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$2C
	.byte	$1A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level10_enemy:
	.byte	$49
	.byte	$02
	.byte	$04
	.byte	$59
	.byte	$02
	.byte	$07
	.byte	$69
	.byte	$02
	.byte	$04
	.byte	$24
	.byte	$02
	.byte	$06
	.byte	$71
	.byte	$02
	.byte	$06
	.byte	$91
	.byte	$02
	.byte	$02
	.byte	$2A
	.byte	$01
	.byte	$06
	.byte	$9C
	.byte	$00
	.byte	$01
	.byte	$FF
_level_starting_nt:
	.byte	$00
	.byte	$03
_valrigard_starting_nt:
	.byte	$02
_valrigard_inital_coords:
	.byte	$4D
_level_nametables:
	.addr	_level10_0
	.addr	_level10_1
	.addr	_level10_2
_level_names:
	.addr	L052A
	.addr	L052C
_level_enemy_data:
	.addr	_level10_enemy
.segment	"RODATA"
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$11
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$38
_palette_sp:
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$32
	.byte	$0F
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$0F
	.byte	$30
	.byte	$16
	.byte	$00
_shuffle_array:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$1F
	.byte	$1E
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$17
	.byte	$16
	.byte	$15
	.byte	$14
	.byte	$13
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$0F
	.byte	$0E
	.byte	$0D
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0C
	.byte	$0E
	.byte	$10
	.byte	$12
	.byte	$14
	.byte	$16
	.byte	$18
	.byte	$1A
	.byte	$1C
	.byte	$1E
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$07
	.byte	$09
	.byte	$0B
	.byte	$0D
	.byte	$0F
	.byte	$11
	.byte	$13
	.byte	$15
	.byte	$17
	.byte	$19
	.byte	$1B
	.byte	$1D
	.byte	$1F
	.byte	$1F
	.byte	$1D
	.byte	$1B
	.byte	$19
	.byte	$17
	.byte	$15
	.byte	$13
	.byte	$11
	.byte	$0F
	.byte	$0D
	.byte	$0B
	.byte	$09
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$1E
	.byte	$1C
	.byte	$1A
	.byte	$18
	.byte	$16
	.byte	$14
	.byte	$12
	.byte	$10
	.byte	$0E
	.byte	$0C
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$00
_cmaps:
	.addr	_cmap0
	.addr	_cmap1
	.addr	_cmap2
	.addr	_cmap3
	.addr	_cmap4
	.addr	_cmap5
_draw_screen_sub_lookup_addr_0:
	.byte	$00
	.byte	$40
	.byte	$80
	.byte	$C0
_draw_screen_sub_lookup_index_offset_0:
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0C
_draw_screen_sub_lookup_addr_1:
	.byte	$20
	.byte	$60
	.byte	$A0
	.byte	$E0
_draw_screen_sub_lookup_index_offset_1:
	.byte	$02
	.byte	$06
	.byte	$0A
	.byte	$0E
_leftright_movement_offset_lookup_table:
	.byte	$FF
	.byte	$0F
_leftright_movement_moving_lookup_table:
	.byte	$FF
	.byte	$01
_updown_movement_offset_lookup_table:
	.byte	$FF
	.byte	$0F
_korbat_sprite_lookup_table:
	.addr	_korbat_left
	.addr	_korbat_right
_grarrl_sprite_lookup_table:
	.addr	_grarrl_left
	.addr	_grarrl_right
_cannon_sprite_lookup_table:
	.addr	_cannon_up
	.addr	_cannon_up_left
	.addr	_cannon_left
	.addr	_cannon_down_left
	.addr	_cannon_down
	.addr	_cannon_down_right
	.addr	_cannon_right
	.addr	_cannon_up_right
_cannon_ul_sprite_lookup_table:
	.byte	$06
	.byte	$07
	.byte	$00
_cannon_ur_sprite_lookup_table:
	.byte	$02
	.byte	$01
	.byte	$00
_cannon_dr_sprite_lookup_table:
	.byte	$02
	.byte	$03
	.byte	$04
_cannon_dl_sprite_lookup_table:
	.byte	$06
	.byte	$05
	.byte	$04
_cannon_sprite_quadrant_lookup_table:
	.addr	_cannon_ul_sprite_lookup_table
	.addr	_cannon_ur_sprite_lookup_table
	.addr	_cannon_dl_sprite_lookup_table
	.addr	_cannon_dr_sprite_lookup_table
_title_string:
	.byte	$43,$61,$73,$74,$6C,$65,$20,$45,$73,$63,$61,$70,$65,$20,$41,$6C
	.byte	$70,$68,$61,$00
_author_string:
	.byte	$42,$79,$20,$6D,$61,$63,$6F,$73,$74,$65,$6E,$00
_instruction_string:
	.byte	$50,$72,$65,$73,$73,$20,$55,$70,$20,$74,$6F,$20,$73,$74,$61,$72
	.byte	$74,$00
_game_over_string:
	.byte	$44,$65,$6D,$6F,$20,$4F,$76,$65,$72,$21,$20,$44,$6F,$77,$6E,$20
	.byte	$74,$6F,$20,$72,$65,$73,$74,$61,$72,$74,$2E,$00
L052A:
	.byte	$4D,$6F,$63,$6B,$75,$70,$20,$4C,$65,$76,$65,$6C,$20,$31,$30,$00
L052C:
	.byte	$4E,$75,$6C,$6C,$00

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_temppointer:
	.res	2,$00
_temp_mutablepointer:
	.res	2,$00
_temp_funcpointer:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_player_flags:
	.res	1,$00
_game_mode:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_nt:
	.res	1,$00
_scroll_x:
	.res	2,$00
_pseudo_scroll_y:
	.res	2,$00
_scroll_y:
	.res	2,$00
_min_scroll_y:
	.res	2,$00
_max_scroll_y:
	.res	2,$00
_initial_scroll:
	.res	2,$00
_scroll_count:
	.res	1,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_level_index:
	.res	1,$00
_energy:
	.res	1,$00
_stars:
	.res	1,$00
_timer:
	.res	1,$00
_song:
	.res	1,$00
_nt_min:
	.res	1,$00
_nt_max:
	.res	1,$00
_nt_current:
	.res	1,$00
_valrigard:
	.res	8,$00
_hitbox:
	.res	4,$00
_hitbox2:
	.res	4,$00
_debug_tile_x:
	.res	1,$00
_debug_tile_y:
	.res	1,$00
.segment	"BSS"
_enemies:
	.res	289,$00
.segment	"XRAM"
_cmap0:
	.res	240,$00
_cmap1:
	.res	240,$00
_cmap2:
	.res	240,$00
_cmap3:
	.res	240,$00
_cmap4:
	.res	240,$00
_cmap5:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp1 = valrigard.x >> 8;
;
	lda     _valrigard+1
	sta     _temp1
;
; temp2 = valrigard.y >> 8;
;
	lda     _valrigard+3
	sta     _temp2
;
; if (DIRECTION == LEFT) {
;
	lda     _player_flags
	and     #$01
	bne     L07EC
;
; oam_meta_spr(temp1, temp2, valrigardIdleLeft);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #<(_valrigardIdleLeft)
	ldx     #>(_valrigardIdleLeft)
;
; } else {
;
	jmp     L0D44
;
; oam_meta_spr(temp1, temp2, valrigardIdleRight);
;
L07EC:	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #<(_valrigardIdleRight)
	ldx     #>(_valrigardIdleRight)
L0D44:	jsr     _oam_meta_spr
;
; temp1 = get_frame_count() & 3;
;
	jsr     _get_frame_count
	and     #$03
	sta     _temp1
;
; temp1 = temp1 << 8; // * 32, since that's the size of our shuffle array.
;
	lda     #$00
	sta     _temp1
;
; for (x = 0; x < enemies.count; ++x) {
;
	sta     _x
	tax
L0D4A:	lda     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	jcs     L0D4D
;
; y = shuffle_array[temp1];
;
	ldy     _temp1
	lda     _shuffle_array,y
	sta     _y
;
; ++temp1;
;
	inc     _temp1
;
; temp2 = enemies.flags[y];
;
	ldy     _y
	lda     _enemies+128,y
	sta     _temp2
;
; if (!IS_ENEMY_ACTIVE(y)) continue;
;
	ldy     _y
	lda     _enemies+128,y
	and     #$80
	jeq     L0D4C
;
; temp_x = enemies.x[y];
;
	ldy     _y
	lda     _enemies,y
	sta     _temp_x
;
; if (temp_x == 0) ++temp_x; // Basing this off NESDoug's report of problems with temp_x = 0.
;
	lda     _temp_x
	bne     L0D4B
	inc     _temp_x
;
; if (temp_x > 0xf0) continue;
;
L0D4B:	lda     _temp_x
	cmp     #$F1
	jcs     L0D4C
;
; temp_y = enemies.y[y];
;
	ldy     _y
	lda     _enemies+32,y
	sta     _temp_y
;
; if (temp_y < 0xf0) {
;
	cmp     #$F0
	jcs     L0D4C
;
; switch (GET_ENEMY_TYPE(y)) {
;
	ldy     _x
	lda     _enemies+160,y
;
; }
;
	cmp     #$01
	beq     L0829
	cmp     #$02
	beq     L0835
	cmp     #$04
	jeq     L0841
	cmp     #$06
	jeq     L0865
	cmp     #$07
	jeq     L0852
	cmp     #$09
	jeq     L0858
	cmp     #$0A
	jeq     L085F
	jmp     L0865
;
; temp3 = ENEMY_DIRECTION(y) >> 6;
;
L0829:	ldy     _y
	lda     _enemies+128,y
	and     #$40
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     shrax2
	sta     _temp3
;
; oam_meta_spr(temp_x, temp_y, korbat_sprite_lookup_table[temp3]);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	ldx     #$00
	lda     _temp3
	asl     a
	bcc     L0D47
	inx
	clc
L0D47:	adc     #<(_korbat_sprite_lookup_table)
	sta     ptr1
	txa
	adc     #>(_korbat_sprite_lookup_table)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
;
; break;
;
	jmp     L0D45
;
; temp3 = ENEMY_DIRECTION(y) >> 6;
;
L0835:	ldy     _y
	lda     _enemies+128,y
	and     #$40
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     shrax2
	sta     _temp3
;
; oam_meta_spr(temp_x, temp_y, grarrl_sprite_lookup_table[temp3]);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	ldx     #$00
	lda     _temp3
	asl     a
	bcc     L0D48
	inx
	clc
L0D48:	adc     #<(_grarrl_sprite_lookup_table)
	sta     ptr1
	txa
	adc     #>(_grarrl_sprite_lookup_table)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
;
; break;
;
	jmp     L0D45
;
; temp3 = enemies.extra2[y];
;
L0841:	ldy     _y
	lda     _enemies+224,y
	sta     _temp3
;
; oam_meta_spr(temp_x, temp_y, cannon_sprite_lookup_table[temp3]);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _temp3
	asl     a
	bcc     L0D49
	ldx     #$01
	clc
L0D49:	adc     #<(_cannon_sprite_lookup_table)
	sta     ptr1
	txa
	adc     #>(_cannon_sprite_lookup_table)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
;
; break;
;
	jmp     L0D45
;
; oam_meta_spr(temp_x, temp_y, sun0);
;
L0852:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_sun0)
	ldx     #>(_sun0)
;
; break;
;
	jmp     L0D45
;
; oam_spr(temp_x, temp_y, CANNONBALL_SPRITE_OFFSET, 1);
;
L0858:	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; break;
;
	jmp     L07FF
;
; oam_spr(temp_x, temp_y, ACIDDROP_SPRITE_OFFSET, 3);
;
L085F:	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; break;
;
	jmp     L07FF
;
; oam_meta_spr(temp_x, temp_y, spikeball);
;
L0865:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_spikeball)
	ldx     #>(_spikeball)
L0D45:	jsr     _oam_meta_spr
;
; for (x = 0; x < enemies.count; ++x) {
;
L07FF:	ldx     #$00
L0D4C:	inc     _x
	jmp     L0D4A
;
; temp1 = energy >> 4; 
;
L0D4D:	lda     _energy
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(200, 28, temp1, 1);
;
	jsr     decsp3
	lda     #$C8
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = energy & 0x0f;
;
	lda     _energy
	and     #$0F
	sta     _temp1
;
; oam_spr(208, 28, temp1, 1);
;
	jsr     decsp3
	lda     #$D0
	ldy     #$02
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; y = 4;
;
	lda     #$04
	sta     _y
;
; for (x = 200; x <= 232; x+=8) {
;
	lda     #$C8
L0D46:	sta     _x
	cmp     #$E9
	bcs     L087B
;
; oam_spr(x, 20, score_string[y], 3);
;
	jsr     decsp3
	lda     _x
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	ldy     _y
	lda     _score_string,y
	ldy     #$00
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; --y;
;
	dec     _y
;
; for (x = 200; x <= 232; x+=8) {
;
	lda     #$08
	clc
	adc     _x
	jmp     L0D46
;
; oam_spr(232, 42, STATUS_DEAD, 2);
;
L087B:	jsr     decsp3
	lda     #$E8
	ldy     #$02
	sta     (sp),y
	lda     #$2A
	dey
	sta     (sp),y
	lda     _player_flags
	and     #$02
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(200, 50, debug_tile_x >> 4, 1);
;
	jsr     decsp3
	lda     #$C8
	ldy     #$02
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	lda     _debug_tile_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(208, 50, debug_tile_x & 0x0f, 1);
;
	jsr     decsp3
	lda     #$D0
	ldy     #$02
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	lda     _debug_tile_x
	and     #$0F
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(224, 50, debug_tile_y >> 4, 1);
;
	jsr     decsp3
	lda     #$E0
	ldy     #$02
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	lda     _debug_tile_y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(232, 50, debug_tile_y & 0x0f, 1);
;
	jsr     decsp3
	lda     #$E8
	ldy     #$02
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	lda     _debug_tile_y
	and     #$0F
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = valrigard.x;
;
	lda     _valrigard+1
	sta     _old_x+1
	lda     _valrigard
	sta     _old_x
;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L0D58
;
; SET_DIRECTION_LEFT();
;
	lda     _player_flags
	and     #$FE
	sta     _player_flags
;
; if (valrigard.x <= 0x0200) { // Changed by 1 from nesdoug's example because Valrigard's hitbox is narrower by 1 pixel on both sides
;
	lda     _valrigard+1
	cmp     #$02
	bne     L08AF
	lda     _valrigard
	cmp     #$01
L08AF:	bcs     L08AD
;
; valrigard.velocity_x = 0;
;
	lda     #$00
	sta     _valrigard+4
	sta     _valrigard+4+1
;
; valrigard.x = 0x200;
;
	ldx     #$02
	sta     _valrigard
	stx     _valrigard+1
;
; } else if (valrigard.x < 0x0600) { // Don't allow us to wrap to the other side
;
	jmp     L08D0
L08AD:	ldx     _valrigard+1
	cpx     #$06
	bcs     L08B5
;
; valrigard.velocity_x = -0x100;
;
	ldx     #$FF
	lda     #$00
;
; } else {
;
	jmp     L0D5A
;
; valrigard.velocity_x = -SPEED;
;
L08B5:	ldx     #$FE
	lda     #$B0
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0D5A
L0D58:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L0D5A
;
; SET_DIRECTION_RIGHT();
;
	lda     _player_flags
	ora     #$01
	sta     _player_flags
;
; if (valrigard.x >= 0xf000) {  // Also changed by 1 from nesdoug's example because Valrigard's hitbox is narrower by 1 pixel on both sides
;
	lda     _valrigard
	cmp     #$00
	lda     _valrigard+1
	sbc     #$F0
	bcc     L08C2
;
; valrigard.velocity_x = 0;
;
	txa
	sta     _valrigard+4
	sta     _valrigard+4+1
;
; valrigard.x = 0xf000; // ...and we'd add 0x100 to this constant here (and the 0x200 in the PAD_LEFT block would be a 0x100)
;
	ldx     #$F0
	sta     _valrigard
	stx     _valrigard+1
;
; } else if (valrigard.x > 0xec00) { // Don't allow us to wrap to the other side
;
	jmp     L08D0
L08C2:	lda     _valrigard
	cmp     #$01
	lda     _valrigard+1
	sbc     #$EC
	bcc     L08C9
;
; valrigard.velocity_x = 0x100;
;
	inx
	lda     #$00
;
; } else {
;
	jmp     L0D5A
;
; valrigard.velocity_x = SPEED;
;
L08C9:	inx
	lda     #$50
;
; valrigard.velocity_x = 0;
;
L0D5A:	sta     _valrigard+4
	stx     _valrigard+4+1
;
; valrigard.x += valrigard.velocity_x;
;
L08D0:	lda     _valrigard+4
	clc
	adc     _valrigard
	sta     _valrigard
	lda     _valrigard+4+1
	adc     _valrigard+1
	sta     _valrigard+1
;
; if((valrigard.x < 0x100)||(valrigard.x > 0xf800)) { // make sure no wrap around to the other side
;
	ldx     _valrigard+1
	cpx     #$01
	bcc     L0D5B
	lda     _valrigard
	cmp     #$01
	lda     _valrigard+1
	sbc     #$F8
	bcc     L0D5C
;
; valrigard.x = 0x100;
;
L0D5B:	ldx     #$01
	lda     #$00
	sta     _valrigard
	stx     _valrigard+1
;
; L_R_switch = 1; // Shrinks the Y values in bg_coll. This makes head/foot collisions less problematic (examine this)
;
L0D5C:	lda     #$01
	sta     _L_R_switch
;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; hitbox.width = VALRIGARD_WIDTH;
;
	lda     #$0B
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_HEIGHT;
;
	lda     #$0D
	sta     _hitbox+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if (collision_L && collision_R) { // Half-stuck in a wall, I'm guessing?
;
	lda     _collision_L
	beq     L08E9
	lda     _collision_R
	beq     L08E9
;
; valrigard.x = old_x;
;
	lda     _old_x+1
	sta     _valrigard+1
	lda     _old_x
	sta     _valrigard
;
; else if (collision_L) {
;
	jmp     L08F6
L08E9:	lda     _collision_L
	beq     L08F0
;
; valrigard.x -= (eject_L << 8);
;
	lda     #$FF
	sec
	adc     _valrigard
	sta     _valrigard
	lda     _eject_L
;
; else if (collision_R) {
;
	jmp     L0D67
L08F0:	lda     _collision_R
	beq     L08F6
;
; valrigard.x -= (eject_R << 8);
;
	lda     #$FF
	sec
	adc     _valrigard
	sta     _valrigard
	lda     _eject_R
L0D67:	eor     #$FF
	adc     _valrigard+1
	sta     _valrigard+1
;
; old_y = valrigard.y;
;
L08F6:	lda     _valrigard+2+1
	sta     _old_y+1
	lda     _valrigard+2
	sta     _old_y
;
; if (pad1 & PAD_UP && energy > 0) { // If we're holding up on the DPad...
;
	lda     _pad1
	and     #$08
	beq     L08FD
	lda     _energy
	beq     L08FD
;
; valrigard.velocity_y -= GRAVITY;
;
	lda     _valrigard+6
	sec
	sbc     #$30
	sta     _valrigard+6
	bcs     L0903
	dec     _valrigard+6+1
;
; if (valrigard.velocity_y < -SPEED) valrigard.velocity_y = -SPEED;
;
L0903:	lda     _valrigard+6
	cmp     #$B0
	lda     _valrigard+6+1
	sbc     #$FE
	bvc     L0906
	eor     #$80
L0906:	bpl     L0D60
	ldx     #$FE
	lda     #$B0
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; energy -= 1;
;
L0D60:	dec     _energy
;
; } else {
;
	jmp     L090F
;
; valrigard.velocity_y += GRAVITY;
;
L08FD:	lda     #$30
	clc
	adc     _valrigard+6
	sta     _valrigard+6
	bcc     L090E
	inc     _valrigard+6+1
;
; if (valrigard.velocity_y > MAX_FALL) valrigard.velocity_y = MAX_FALL;
;
L090E:	lda     _valrigard+6
	cmp     #$51
	lda     _valrigard+6+1
	sbc     #$01
	bvs     L0911
	eor     #$80
L0911:	bpl     L090F
	ldx     #$01
	lda     #$50
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; valrigard.y += valrigard.velocity_y;
;
L090F:	lda     _valrigard+6
	clc
	adc     _valrigard+2
	sta     _valrigard+2
	lda     _valrigard+6+1
	adc     _valrigard+2+1
	sta     _valrigard+2+1
;
; if (valrigard.y < 0x100)  valrigard.y = 0x100;
;
	ldx     _valrigard+2+1
	cpx     #$01
	bcs     L0916
	ldx     #$01
	lda     #$00
	sta     _valrigard+2
	stx     _valrigard+2+1
;
; if (valrigard.y > 0xf000) valrigard.y = 0xf000;
;
L0916:	lda     _valrigard+2
	cmp     #$01
	lda     _valrigard+2+1
	sbc     #$F0
	lda     #$00
	bcc     L0D62
	ldx     #$F0
	sta     _valrigard+2
	stx     _valrigard+2+1
;
; L_R_switch = 0;
;
L0D62:	sta     _L_R_switch
;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U) {
;
	lda     _collision_U
	beq     L0927
;
; high_byte(valrigard.y) -= eject_U;
;
	lda     _eject_U
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; else if (collision_D) {
;
	jmp     L0934
L0927:	lda     _collision_D
	beq     L0934
;
; high_byte(valrigard.y) -= eject_D;
;
	lda     _eject_D
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; energy += 4;
;
	lda     #$04
	clc
	adc     _energy
	sta     _energy
;
; if (energy > MAX_ENERGY) energy = MAX_ENERGY;
;
	cmp     #$71
	bcc     L0934
	lda     #$70
	sta     _energy
;
; temp5 = valrigard.y;
;
L0934:	lda     _valrigard+2+1
	sta     _temp5+1
	lda     _valrigard+2
	sta     _temp5
;
; if (valrigard.y < MAX_UP && scroll_y > min_scroll_y) {
;
	ldx     _valrigard+2+1
	cpx     #$40
	bcs     L093A
	lda     _scroll_y
	sec
	sbc     _min_scroll_y
	sta     tmp1
	lda     _scroll_y+1
	sbc     _min_scroll_y+1
	ora     tmp1
	beq     L093A
	bcc     L093A
;
; temp1 = (MAX_UP - valrigard.y + 0x80) >> 8; // "the numbers work better with +80 (like 0.5)". I'll take his word for it.
;
	lda     #$00
	sec
	sbc     _valrigard+2
	pha
	lda     #$40
	sbc     _valrigard+2+1
	tax
	pla
	clc
	adc     #$80
	bcc     L0941
	inx
L0941:	txa
	sta     _temp1
;
; scroll_y = sub_scroll_y(temp1, scroll_y);
;
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; valrigard.y += (temp1 << 8);
;
	lda     #$00
	clc
	adc     _valrigard+2
	sta     _valrigard+2
	lda     _temp1
	adc     _valrigard+2+1
	sta     _valrigard+2+1
;
; if (valrigard.y > MIN_DOWN && scroll_y < max_scroll_y) {
;
L093A:	lda     _valrigard+2
	cmp     #$01
	lda     _valrigard+2+1
	sbc     #$80
	bcc     L0D64
	lda     _scroll_y
	cmp     _max_scroll_y
	lda     _scroll_y+1
	sbc     _max_scroll_y+1
	bcc     L094A
L0D64:	rts
;
; temp1 = (MIN_DOWN + valrigard.y + 0x80) >> 8;
;
L094A:	lda     _valrigard+2
	pha
	lda     _valrigard+2+1
	clc
	adc     #$80
	tax
	pla
	clc
	adc     #$80
	bcc     L0950
	inx
L0950:	txa
	sta     _temp1
;
; scroll_y = add_scroll_y(temp1, scroll_y);
;
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; valrigard.y -= (temp1 << 8);
;
	lda     #$FF
	sec
	adc     _valrigard+2
	sta     _valrigard+2
	lda     _temp1
	eor     #$FF
	adc     _valrigard+2+1
	sta     _valrigard+2+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ begin_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_begin_level: near

.segment	"CODE"

;
; ppu_off(); // We're going to make big changes to VRAM so we need to turn it off.
;
	jsr     _ppu_off
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; SET_STATUS_ALIVE();
;
	lda     _player_flags
	and     #$FD
	sta     _player_flags
;
; load_level_new();
;
	jsr     _load_level_new
;
; seed_rng();
;
	jsr     _seed_rng
;
; energy = MAX_ENERGY;
;
	lda     #$70
	sta     _energy
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ load_level_new (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level_new: near

.segment	"CODE"

;
; player_flags = 0; 
;
	lda     #$00
	sta     _player_flags
;
; scroll_count = 0; 
;
	sta     _scroll_count
;
; nt_max = level_starting_nt[level_index+1];
;
	tax
	lda     _level_index
	clc
	adc     #$01
	bcc     L06E9
	inx
L06E9:	sta     ptr1
	txa
	clc
	adc     #>(_level_starting_nt)
	sta     ptr1+1
	ldy     #<(_level_starting_nt)
	lda     (ptr1),y
	sta     _nt_max
;
; nt_current = valrigard_starting_nt[level_index];
;
	ldy     _level_index
	lda     _valrigard_starting_nt,y
	sta     _nt_current
;
; high_byte(scroll_y) = nt_current; // The high byte of scroll_y is the nametable we're currently in (0-255).
;
	sta     _scroll_y+1
;
; low_byte(scroll_y) = 2;
;
	lda     #$02
	sta     _scroll_y
;
; high_byte(max_scroll_y) = nt_max - 1; // bottom of this level
;
	lda     _nt_max
	sec
	sbc     #$01
	sta     _max_scroll_y+1
;
; low_byte(max_scroll_y) = 0xef;
;
	lda     #$EF
	sta     _max_scroll_y
;
; high_byte(min_scroll_y) = 0; // Min Scroll
;
	lda     #$00
	sta     _min_scroll_y+1
;
; low_byte(min_scroll_y) = 0x02;
;
	lda     #$02
	sta     _min_scroll_y
;
; initial_scroll = ((nt_current * 0x100) - 0x11);
;
	ldx     _nt_current
	lda     #$00
	sec
	sbc     #$11
	bcs     L0705
	dex
L0705:	sta     _initial_scroll
	stx     _initial_scroll+1
;
; temp4 = valrigard_inital_coords[level_index];
;
	ldy     _level_index
	lda     _valrigard_inital_coords,y
	sta     _temp4
;
; valrigard.x = (temp4 & 0xf0) << 8;
;
	and     #$F0
	sta     _valrigard+1
	lda     #$00
	sta     _valrigard
;
; valrigard.y = ((temp4 & 0x0f) * 16) << 8;
;
	lda     _temp4
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _valrigard+2+1
	lda     #$00
	sta     _valrigard+2
;
; for (x = 0; x < nt_max; ++x) {
;
	sta     _x
	tax
L0D76:	lda     _x
	cmp     _nt_max
	bcs     L0D77
;
; load_room_new();
;
	jsr     _load_room_new
;
; for (x = 0; x < nt_max; ++x) {
;
	ldx     #$00
	inc     _x
	jmp     L0D76
;
; set_data_pointer(cmaps[nt_current]);
;
L0D77:	lda     _nt_current
	asl     a
	bcc     L0D74
	inx
	clc
L0D74:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; temp1 = (initial_scroll >> 8) + 1;
;
	lda     _initial_scroll+1
	clc
	adc     #$01
	sta     _temp1
;
; temp1 = (temp1 & 1) << 1;
;
	and     #$01
	asl     a
	sta     _temp1
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L0D70:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0D6F:	sta     _x
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(temp1, x, y);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L0D78
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0D6F
;
; if (y == 0xe0) break;
;
L0D78:	lda     _y
	cmp     #$E0
	beq     L0D79
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L0D70
;
; temp1 = temp1 ^ 2; // flip that 0000 0010 bit
;
L0D79:	lda     _temp1
	eor     #$02
	sta     _temp1
;
; set_data_pointer(cmaps[nt_current-1]); // NOTE: Don't call if nt_current = 0, or who really knows what will happen
;
	ldx     #$00
	lda     _nt_current
	sec
	sbc     #$01
	bcs     L074D
	dex
L074D:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_cmaps)
	sta     ptr1
	lda     tmp1
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L0D71:	sta     _x
;
; y = 0xe0;
;
	lda     #$E0
	sta     _y
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(temp1, x, y);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L074F
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L0D71
;
; clear_vram_buffer();
;
L074F:	jsr     _clear_vram_buffer
;
; max_scroll_y = scroll_y;
;
	lda     _scroll_y+1
	sta     _max_scroll_y+1
	lda     _scroll_y
	sta     _max_scroll_y
;
; memfill(&enemies, 0, sizeof(enemies));
;
	jsr     decsp3
	lda     #<(_enemies)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_enemies)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	ldx     #$01
	lda     #$21
	jsr     _memfill
;
; temppointer = level_enemy_data[level_index];
;
	ldx     #$00
	lda     _level_index
	asl     a
	bcc     L0D75
	inx
	clc
L0D75:	adc     #<(_level_enemy_data)
	sta     ptr1
	txa
	adc     #>(_level_enemy_data)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temppointer+1
	dey
	lda     (ptr1),y
	sta     _temppointer
;
; for (x = 0, y = 0; x < MAX_ENEMIES; ++x){
;
	tya
	sta     _x
	sta     _y
L0D7A:	lda     _x
	cmp     #$20
	jcs     L0D7D
;
; enemies.y[x] = 0;
;
	ldy     _x
	lda     #$00
	sta     _enemies+32,y
;
; temp1 = temppointer[y]; // Get a byte of data - the bitpacked coords.
;
	lda     _temppointer
	ldx     _temppointer+1
	ldy     _y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; if (temp1 == 0xff) break; // 0xff terminates the enemy data.
;
	cmp     #$FF
	jeq     L0D7D
;
; enemies.x[x] = temp1 & 0xf0;
;
	lda     #<(_enemies)
	ldx     #>(_enemies)
	clc
	adc     _x
	bcc     L0788
	inx
L0788:	sta     ptr1
	stx     ptr1+1
	lda     _temp1
	and     #$F0
	ldy     #$00
	sta     (ptr1),y
;
; enemies.actual_y[x] = (temp1 & 0x0f) << 4;
;
	lda     #<(_enemies+64)
	ldx     #>(_enemies+64)
	clc
	adc     _x
	bcc     L078C
	inx
L078C:	sta     ptr1
	stx     ptr1+1
	lda     _temp1
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; ++y; // Next byte:
;
	inc     _y
;
; temp1 = temppointer[y]; // the namtetable byte.
;
	lda     _temppointer
	ldx     _temppointer+1
	ldy     _y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemies.nt[x] = temp1;
;
	ldy     _x
	lda     _temp1
	sta     _enemies+96,y
;
; ++y; // Next byte:
;
	inc     _y
;
; temp1 = temppointer[y]; // the type byte.
;
	lda     _temppointer
	ldx     _temppointer+1
	ldy     _y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemies.type[x] = temp1; 
;
	ldy     _x
	lda     _temp1
	sta     _enemies+160,y
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; if (temp1 == 4) { // ENEMY_CANNON
;
	cmp     #$04
	bne     L0D7B
;
; ++x;
;
	inc     _x
;
; enemies.type[x] = ENEMY_CANNONBALL;
;
	ldy     _x
	lda     #$09
;
; } else if (temp1 == 5) { // ENEMY_ACIDPOOL
;
	jmp     L0D72
L0D7B:	lda     _temp1
	cmp     #$05
	bne     L0D7C
;
; ++x;
;
	inc     _x
;
; enemies.type[x] = ENEMY_ACIDDROP;
;
	ldy     _x
	lda     #$0A
L0D72:	sta     _enemies+160,y
;
; ++y; // Next byte.
;
L0D7C:	inc     _y
;
; for (x = 0, y = 0; x < MAX_ENEMIES; ++x){
;
	inc     _x
	jmp     L0D7A
;
; enemies.count = x+1;
;
L0D7D:	lda     _x
	clc
	adc     #$01
	sta     _enemies+288
;
; for(++x; x < MAX_ENEMIES; ++x) {
;
L0D81:	inc     _x
	lda     _x
	cmp     #$20
	bcs     L0D7E
;
; enemies.type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies+160,y
;
; for(++x; x < MAX_ENEMIES; ++x) {
;
	jmp     L0D81
;
; for (x = 0; x < enemies.count; ++x) {
;
L0D7E:	lda     #$00
	sta     _x
	tax
L0D7F:	lda     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	bcs     L07C3
;
; switch (GET_ENEMY_TYPE(x)) {
;
	ldy     _x
	lda     _enemies+160,y
;
; }
;
	cmp     #$04
	beq     L07D7
	cmp     #$05
	bne     L0D80
;
; enemies.timer[x] = 0b10000000;
;
	ldy     _x
	lda     #$80
	sta     _enemies+256,y
;
; enemies.timer[x] += rand8() & 0b01111111;
;
L07D7:	lda     #<(_enemies+256)
	ldx     #>(_enemies+256)
	clc
	adc     _x
	bcc     L07DA
	inx
L07DA:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$7F
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; for (x = 0; x < enemies.count; ++x) {
;
	ldx     #$00
L0D80:	inc     _x
	jmp     L0D7F
;
; }
;
L07C3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_room_new (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room_new: near

.segment	"CODE"

;
; temppointer = level_nametables[x];
;
	ldx     #$00
	lda     _x
	asl     a
	bcc     L0D84
	inx
	clc
L0D84:	adc     #<(_level_nametables)
	sta     ptr1
	txa
	adc     #>(_level_nametables)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temppointer+1
	dey
	lda     (ptr1),y
	sta     _temppointer
;
; memcpy(cmaps[x], temppointer, 240);
;
	ldx     #$00
	lda     _x
	asl     a
	bcc     L0D85
	inx
	clc
L0D85:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     _temppointer
	ldx     _temppointer+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; temp3 = hitbox.y;
;
	lda     _hitbox+1
	sta     _temp3
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L0D87
	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; if(temp3 >= 0xf0) return;
;
L0D87:	lda     _temp3
	cmp     #$F0
	bcc     L0D88
;
; }
;
	rts
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
L0D88:	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp3 = temp5 & 0xff; // low byte y
;
	sta     _temp3
;
; temp1 = hitbox.x; // x left
;
	lda     _hitbox
	sta     _temp1
;
; eject_L = temp1 | 0xf0;
;
	ora     #$F0
	sta     _eject_L
;
; eject_U = temp3 | 0xf0;
;
	lda     _temp3
	ora     #$F0
	sta     _eject_U
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L0976
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; temp1 += hitbox.width; // x right
;
L0976:	lda     _hitbox+2
	clc
	adc     _temp1
	sta     _temp1
;
; eject_R = (temp1 + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L0981
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; temp3 = hitbox.y + hitbox.height; // y bottom
;
L0981:	lda     _hitbox+1
	clc
	adc     _hitbox+3
	sta     _temp3
;
; if(L_R_switch) temp3 -= 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	beq     L0987
	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
L0987:	lda     _temp3
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp3 = temp5 & 0xff; // low byte y
;
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	lda     _temp3
	cmp     #$F0
	bcs     L099F
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L0998
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; temp1 = hitbox.x; // x left
;
L0998:	lda     _hitbox
	sta     _temp1
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	beq     L099F
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L099F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temppointer = cmaps[high_byte(temp5)];
;
	ldx     #$00
	lda     _temp5+1
	asl     a
	bcc     L0D8D
	inx
	clc
L0D8D:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _temppointer
	stx     _temppointer+1
;
; temp4 = temppointer[coordinates];
;
	ldy     _coordinates
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp4
;
; temp_mutablepointer = (char *)&(temppointer[coordinates]);
;
	lda     _temppointer
	ldx     _temppointer+1
	clc
	adc     _coordinates
	bcc     L0D8A
	inx
L0D8A:	sta     _temp_mutablepointer
	stx     _temp_mutablepointer+1
;
; temp0 = metatile_property_lookup_table[temp4];
;
	ldy     _temp4
	lda     _metatile_property_lookup_table,y
	sta     _temp0
;
; collision = METATILE_IS_SOLID(temp4); // 0x17 is the first non-solid tile, so if the tile is less than that, it's a collision
;
	ldy     _temp4
	lda     _metatile_property_lookup_table,y
	and     #$01
	sta     _collision
;
; if (temp0 == METATILE_NO_EFFECT || temp0 == METATILE_SOLID) { return; }
;
	lda     _temp0
	beq     L0D8F
	cmp     #$01
	bne     L0D90
L0D8F:	rts
;
; if (temp0 & METATILE_SPIKES) {
;
L0D90:	lda     _temp0
	and     #$02
	beq     L0D91
;
; SET_STATUS_DEAD();
;
	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; } else if (temp0 & METATILE_POWERUP) {
;
	rts
L0D91:	lda     _temp0
	and     #$40
	beq     L0D93
;
; *temp_mutablepointer = EMPTY_TILE;
;
	lda     _temp_mutablepointer+1
	sta     ptr1+1
	lda     _temp_mutablepointer
	sta     ptr1
	lda     #$2C
	ldy     #$00
	sta     (ptr1),y
;
; if (temp4 == STAR_TILE) { score += 1; }
;
	lda     _temp4
	cmp     #$2A
	bne     L0D92
	inc     _score
	bne     L09CF
	inc     _score+1
;
; else if (temp4 == ENERGY_REFILL_TILE) { energy = MAX_ENERGY; }
;
	jmp     L09CF
L0D92:	lda     _temp4
	cmp     #$2B
	bne     L09CF
	lda     #$70
	sta     _energy
;
; address = get_ppu_addr(nt, temp1, temp3 & 0xf0);
;
L09CF:	jsr     decsp2
	lda     _nt
	iny
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     _temp3
	and     #$F0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; buffer_1_mt(address, EMPTY_TILE);
;
	jsr     pushax
	lda     #$2C
	jmp     _buffer_1_mt
;
; } else if (temp0 & METATILE_CONVEYOR_LEFT) {
;
L0D93:	lda     _temp0
	and     #$04
	beq     L0D94
;
; valrigard.x -= 0x0080;
;
	lda     _valrigard
	sec
	sbc     #$80
	sta     _valrigard
	bcs     L09E0
	dec     _valrigard+1
;
; } else if (temp0 & METATILE_CONVEYOR_RIGHT) {
;
L09E0:	rts
L0D94:	lda     _temp0
	and     #$08
	beq     L0D95
;
; valrigard.x += 0x0080;
;
	lda     #$80
	clc
	adc     _valrigard
	sta     _valrigard
	bcc     L09E6
	inc     _valrigard+1
;
; } else if (temp0 & METATILE_YELLOW_DOOR) {
;
L09E6:	rts
L0D95:	lda     _temp0
	and     #$10
	beq     L0D96
;
; if (pad1 & PAD_UP) {
;
	lda     _pad1
	and     #$08
;
; } else if (temp0 & METATILE_RED_DOOR) {
;
	jmp     L0D99
L0D96:	lda     _temp0
	and     #$20
L0D99:	beq     L09EF
;
; game_mode = MODE_GAME_OVER;
;
	lda     #$04
	sta     _game_mode
;
; }
;
L09EF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_U: near

.segment	"CODE"

;
; pseudo_scroll_y = sub_scroll_y(0x20, scroll_y);
;
	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; draw_screen_sub();
;
	jmp     _draw_screen_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_D: near

.segment	"CODE"

;
; pseudo_scroll_y = add_scroll_y(0x20, scroll_y) + 0xef; 
;
	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	clc
	adc     #$EF
	bcc     L09FE
	inx
L09FE:	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; draw_screen_sub();
;
	jmp     _draw_screen_sub

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_sub: near

.segment	"CODE"

;
; temp1 = pseudo_scroll_y >> 8;
;
	lda     _pseudo_scroll_y+1
	sta     _temp1
;
; set_data_pointer(cmaps[temp1]); // TODO: clamp this value to 6.
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0D9D
	inx
	clc
L0D9D:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = (temp1 & 1) << 1; // 0 or 2
;
	lda     _temp1
	and     #$01
	asl     a
	sta     _nt
;
; y = pseudo_scroll_y & 0xff;
;
	lda     _pseudo_scroll_y
	sta     _y
;
; temp2 = draw_screen_sub_lookup_index_offset_0[scroll_count];
;
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_index_offset_0,y
	sta     _temp2
;
; temp4 = draw_screen_sub_lookup_index_offset_1[scroll_count];
;
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_index_offset_1,y
	sta     _temp4
;
; address = get_ppu_addr(nt, draw_screen_sub_lookup_addr_0[scroll_count], y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_addr_0,y
	ldy     #$00
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + temp2;
;
	lda     _y
	and     #$F0
	clc
	adc     _temp2
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, draw_screen_sub_lookup_addr_1[scroll_count], y);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	ldy     _scroll_count
	lda     _draw_screen_sub_lookup_addr_1,y
	ldy     #$00
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + temp4;
;
	lda     _y
	and     #$F0
	clc
	adc     _temp4
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; nt_current = high_byte(scroll_y);
;
	lda     _scroll_y+1
	sta     _nt_current
;
; for (x = 0; x < enemies.count; ++x) {
;
	lda     #$00
	sta     _x
	tax
L0DA1:	lda     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	bcc     L0DA3
;
; }
;
	rts
;
; if (GET_ENEMY_TYPE(x) == 0 /*ENEMY_NONE*/) continue; 
;
L0DA3:	ldy     _x
	lda     _enemies+160,y
	jeq     L0DA2
;
; temp5 = (enemies.nt[x] << 8) + enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     ptr1+1
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$00
	ldx     ptr1+1
	bcc     L0D9E
	inx
L0D9E:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= scroll_y;
;
	lda     _scroll_y
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_y+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; if (high_byte(temp5)) {
;
	lda     _temp5+1
	beq     L0A4A
;
; DEACTIVATE_ENEMY(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L0A50
	inx
L0A50:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
;
; continue;
;
	jmp     L0DA0
;
; ACTIVATE_ENEMY(x); // This enemy is active if it's on-screen.
;
L0A4A:	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L0A55
	inx
L0A55:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
;
; enemies.y[x] = temp5 & 0xff;
;
	lda     #<(_enemies+32)
	ldx     #>(_enemies+32)
	clc
	adc     _x
	bcc     L0A59
	inx
L0A59:	sta     ptr1
	stx     ptr1+1
	lda     _temp5
	sta     (ptr1),y
;
; if (nt_current != enemies.nt[x]) enemies.y[x] -= 16;
;
	ldy     _x
	ldx     #$00
	lda     _enemies+96,y
	cmp     _nt_current
	beq     L0DA2
	lda     #<(_enemies+32)
	ldx     #>(_enemies+32)
	clc
	adc     _x
	bcc     L0A61
	inx
L0A61:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$10
L0DA0:	sta     (ptr1),y
;
; for (x = 0; x < enemies.count; ++x) {
;
	ldx     #$00
L0DA2:	inc     _x
	jmp     L0DA1

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collisions: near

.segment	"CODE"

;
; hitbox.x = high_byte(valrigard.x);
;
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	lda     _valrigard+3
	sta     _hitbox+1
;
; hitbox.width = VALRIGARD_WIDTH;
;
	lda     #$0B
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_HEIGHT;
;
	lda     #$0D
	sta     _hitbox+3
;
; for (x = 0; x < enemies.count; ++x) {
;
	lda     #$00
	sta     _x
	tax
L0DA5:	lda     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	bcs     L0A6F
;
; if(IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L0DA7
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; if (temp1 <= 8 /*ENEMY_BOSS*/) { // It's an enemy
;
	cmp     #$09
	bcs     L0DA6
;
; hitbox2.width = ENEMY_WIDTH;
;
	lda     #$0D
;
; } else { // It's a projectile
;
	jmp     L0DA8
;
; hitbox2.width = PROJECTILE_WIDTH;
;
L0DA6:	lda     #$06
L0DA8:	sta     _hitbox2+2
;
; hitbox2.height = PROJECTILE_HEIGHT;
;
	sta     _hitbox2+3
;
; hitbox2.x = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _hitbox2
;
; hitbox2.y = enemies.y[x];
;
	ldy     _x
	lda     _enemies+32,y
	sta     _hitbox2+1
;
; if (check_collision(&hitbox, &hitbox2)) {
;
	lda     #<(_hitbox)
	ldx     #>(_hitbox)
	jsr     pushax
	lda     #<(_hitbox2)
	ldx     #>(_hitbox2)
	jsr     _check_collision
	tax
	beq     L0DA7
;
; SET_STATUS_DEAD();
;
	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; for (x = 0; x < enemies.count; ++x) {
;
	ldx     #$00
L0DA7:	inc     _x
	jmp     L0DA5
;
; }
;
L0A6F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_movement: near

.segment	"CODE"

;
; for (x = 0; x < enemies.count; ++x) {
;
	lda     #$00
	sta     _x
	tax
L0DA9:	lda     _x
	cmp     _enemies+288
	txa
	sbc     #$00
	bcs     L0AA7
;
; if (IS_ENEMY_ACTIVE(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$80
	beq     L0DAA
;
; temp1 = GET_ENEMY_TYPE(x);
;
	ldy     _x
	lda     _enemies+160,y
	sta     _temp1
;
; AsmSet2ByteFromPtrAtIndexVar(temp_funcpointer, ai_pointers, temp1);
;
	asl     a
	tay
	lda     _ai_pointers,y
	sta     _temp_funcpointer
	lda     _ai_pointers+1,y
	sta     _temp_funcpointer+1
;
; temp_funcpointer();
;
	lda     _temp_funcpointer
	ldx     _temp_funcpointer+1
	jsr     callax
;
; for (x = 0; x < enemies.count; ++x) {
;
	ldx     #$00
L0DAA:	inc     _x
	jmp     L0DA9
;
; }
;
L0AA7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ korbat_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_korbat_ai: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x) >> 6;
;
	ldy     _x
	lda     _enemies+128,y
	and     #$40
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp3
;
; temp1 = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp1
;
; temp1 += leftright_movement_offset_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_offset_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp2 = enemies.actual_y[x] + 6; // center y
;
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$06
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp0
;
; temppointer = cmaps[temp0];
;
	ldx     #$00
	lda     _temp0
	asl     a
	bcc     L0DAE
	inx
	clc
L0DAE:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _temppointer
	stx     _temppointer+1
;
; collision = temppointer[coordinates];
;
	ldy     _coordinates
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L0AE8
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L0AF0
	inx
L0AF0:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$40
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp1 = leftright_movement_moving_lookup_table[temp3];
;
L0AE8:	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	sta     _temp1
;
; enemies.x[x] += temp1;
;
	lda     #<(_enemies)
	ldx     #>(_enemies)
	clc
	adc     _x
	bcc     L0AFA
	inx
L0AFA:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp1
	jmp     staspidx

.endproc

; ---------------------------------------------------------------
; void __near__ spikeball_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spikeball_ai: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x) >> 6;
;
	ldy     _x
	lda     _enemies+128,y
	and     #$40
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp3
;
; temp1 = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp1
;
; temp1 += leftright_movement_offset_lookup_table[temp3];
;
	ldy     _temp3
	lda     _leftright_movement_offset_lookup_table,y
	clc
	adc     _temp1
	sta     _temp1
;
; temp2 = enemies.actual_y[x] + 18; // Y beneath us
;
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$12
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp4 = temp2 >> 4;
;
	lda     _temp2
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp4
;
; if (temp4 == 0xf) {
;
	cmp     #$0F
	bne     L0B15
;
; temp4 = enemies.nt[x] + 1;
;
	ldy     _x
	lda     _enemies+96,y
	clc
	adc     #$01
;
; } else {
;
	jmp     L0DB5
;
; temp4 = enemies.nt[x];
;
L0B15:	ldy     _x
	lda     _enemies+96,y
L0DB5:	sta     _temp4
;
; temppointer = cmaps[temp4];
;
	ldx     #$00
	lda     _temp4
	asl     a
	bcc     L0DB6
	inx
	clc
L0DB6:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _temppointer
	stx     _temppointer+1
;
; collision = temppointer[coordinates];
;
	ldy     _coordinates
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _collision
;
; if (!METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	bne     L0B27
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L0B2F
	inx
L0B2F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$40
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp2 = enemies.actual_y[x] + 6; // center y
;
L0B27:	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$06
	sta     _temp2
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp4 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp4
;
; temppointer = cmaps[temp4];
;
	ldx     #$00
	lda     _temp4
	asl     a
	bcc     L0DB7
	inx
	clc
L0DB7:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _temppointer
	stx     _temppointer+1
;
; collision = temppointer[coordinates];
;
	ldy     _coordinates
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L0B46
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L0B4E
	inx
L0B4E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$40
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; temp1 = leftright_movement_moving_lookup_table[temp3];
;
L0B46:	ldy     _temp3
	lda     _leftright_movement_moving_lookup_table,y
	sta     _temp1
;
; enemies.x[x] += temp1;
;
	lda     #<(_enemies)
	ldx     #>(_enemies)
	clc
	adc     _x
	bcc     L0B58
	inx
L0B58:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp1
	jmp     staspidx

.endproc

; ---------------------------------------------------------------
; void __near__ cannon_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cannon_ai: near

.segment	"CODE"

;
; if (IS_ENEMY_ACTIVE(x+1)) { return; }
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0BE5
	inx
L0BE5:	sta     ptr1
	txa
	clc
	adc     #>(_enemies+128)
	sta     ptr1+1
	ldy     #<(_enemies+128)
	lda     (ptr1),y
	and     #$80
	beq     L0DCB
;
; }
;
	rts
;
; if (--enemies.timer[x] == 20) { 
;
L0DCB:	lda     #<(_enemies+256)
	ldx     #>(_enemies+256)
	clc
	adc     _x
	bcc     L0BE9
	inx
L0BE9:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
	cmp     #$14
	jne     L0BE6
;
; if (!(enemies.extra2[x] & 0xf0)) {
;
	ldy     _x
	lda     _enemies+224,y
	and     #$F0
	jne     L0BE6
;
; temp0 = high_byte(valrigard.x) + (VALRIGARD_WIDTH/2);
;
	lda     _valrigard+1
	clc
	adc     #$05
	sta     _temp0
;
; temp1 = high_byte(valrigard.y) + 4; // Tweaked for maximum accuracy - may need to be tweaked more.
;
	lda     _valrigard+3
	clc
	adc     #$04
	sta     _temp1
;
; temp2 = enemies.x[x] + 6; // ENEMY_WIDTH/2
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$06
	sta     _temp2
;
; temp3 = enemies.y[x] + 6; // ENEMY_HEIGHT/2
;
	ldy     _x
	lda     _enemies+32,y
	clc
	adc     #$06
	sta     _temp3
;
; temp4 = 0;
;
	lda     #$00
	sta     _temp4
;
; if (temp0 < temp2) {
;
	tax
	lda     _temp0
	cmp     _temp2
	bcs     L0DC6
;
; CANNONBALL_SET_NEG_X(x+1);
;
	lda     _x
	clc
	adc     #$01
	bcc     L0DBD
	inx
	clc
L0DBD:	adc     #<(_enemies+128)
	sta     ptr1
	txa
	adc     #>(_enemies+128)
	sta     ptr1+1
	ldy     #$00
	ldx     #$00
	lda     (ptr1),y
	and     #$BF
	sta     (ptr1),y
;
; } else {
;
	jmp     L0DC7
;
; CANNONBALL_SET_POS_X(x+1);
;
L0DC6:	lda     _x
	clc
	adc     #$01
	bcc     L0DBE
	inx
	clc
L0DBE:	adc     #<(_enemies+128)
	sta     ptr1
	txa
	adc     #>(_enemies+128)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
;
; ++temp4;
;
	inc     _temp4
;
; if (temp1 < temp3) {
;
	ldx     #$00
L0DC7:	lda     _temp1
	cmp     _temp3
	bcs     L0DC8
;
; CANNONBALL_SET_NEG_Y(x+1);
;
	lda     _x
	clc
	adc     #$01
	bcc     L0DBF
	inx
	clc
L0DBF:	adc     #<(_enemies+128)
	sta     ptr1
	txa
	adc     #>(_enemies+128)
	sta     ptr1+1
	lda     (ptr1),y
	and     #$DF
	sta     (ptr1),y
;
; } else {
;
	jmp     L0C19
;
; CANNONBALL_SET_POS_Y(x+1);
;
L0DC8:	lda     _x
	clc
	adc     #$01
	bcc     L0DC0
	inx
	clc
L0DC0:	adc     #<(_enemies+128)
	sta     ptr1
	txa
	adc     #>(_enemies+128)
	sta     ptr1+1
	lda     (ptr1),y
	ora     #$20
	sta     (ptr1),y
;
; temp4 += 0b10;
;
	lda     #$02
	clc
	adc     _temp4
	sta     _temp4
;
; temp0 = abs_subtract(temp0, temp2);
;
L0C19:	lda     _temp0
	jsr     pusha
	lda     _temp2
	jsr     _abs_subtract
	sta     _temp0
;
; if ((temp0 & 0x0f) > 8) { temp0 += 0x10; } // Round metatile x up.
;
	and     #$0F
	cmp     #$09
	bcc     L0C25
	lda     #$10
	clc
	adc     _temp0
	sta     _temp0
;
; temp1 = abs_subtract(temp1, temp3);
;
L0C25:	lda     _temp1
	jsr     pusha
	lda     _temp3
	jsr     _abs_subtract
	sta     _temp1
;
; coordinates = (temp1 & 0xf0) + (temp0 >> 4);
;
	and     #$F0
	sta     ptr1
	lda     _temp0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _coordinates
;
; temp2 = brads_lookup(coordinates);
;
	jsr     _brads_lookup
	sta     _temp2
;
; enemies.extra[x] = temp2;
;
	ldy     _x
	lda     _temp2
	sta     _enemies+192,y
;
; temppointer = cannon_sprite_quadrant_lookup_table[temp4];
;
	ldx     #$00
	lda     _temp4
	asl     a
	bcc     L0DC1
	inx
	clc
L0DC1:	adc     #<(_cannon_sprite_quadrant_lookup_table)
	sta     ptr1
	txa
	adc     #>(_cannon_sprite_quadrant_lookup_table)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temppointer+1
	dey
	lda     (ptr1),y
	sta     _temppointer
;
; if (temp2 > 0x30) { // over 0x30 brads
;
	lda     _temp2
	cmp     #$31
	bcc     L0DC9
;
; temp3 = temppointer[2]; // y-axis aligned
;
	lda     _temppointer+1
	sta     ptr1+1
	lda     _temppointer
	sta     ptr1
	ldy     #$02
;
; } else if (temp2 > 0x10) { // over 0x10 brads
;
	jmp     L0DCA
L0DC9:	lda     _temp2
	cmp     #$11
	bcc     L0C42
;
; temp3 = temppointer[1]; // diagonal
;
	lda     _temppointer+1
	sta     ptr1+1
	lda     _temppointer
	sta     ptr1
	iny
;
; } else { // 0x10 or fewer brads
;
	jmp     L0DCA
;
; temp3 = temppointer[0]; // x-axis aligned
;
L0C42:	lda     _temppointer+1
	sta     ptr1+1
	lda     _temppointer
	sta     ptr1
L0DCA:	lda     (ptr1),y
	sta     _temp3
;
; enemies.extra2[x] = temp3;
;
	ldy     _x
	lda     _temp3
	sta     _enemies+224,y
;
; if (enemies.timer[x] == 0) {
;
L0BE6:	ldy     _x
	lda     _enemies+256,y
	beq     L0DCC
;
; }
;
	rts
;
; enemies.timer[x] = 120;
;
L0DCC:	ldy     _x
	lda     #$78
	sta     _enemies+256,y
;
; temp0 = enemies.x[x] + 3;
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$03
	sta     _temp0
;
; temp1 = enemies.actual_y[x] + 3;
;
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$03
	sta     _temp1
;
; temp2 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp2
;
; enemies.x[x+1] = temp0;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0DC2
	inx
	clc
L0DC2:	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     _temp0
	ldy     #$00
	sta     (ptr1),y
;
; enemies.actual_y[x+1] = temp1;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0DC3
	inx
	clc
L0DC3:	adc     #<(_enemies+64)
	sta     ptr1
	txa
	adc     #>(_enemies+64)
	sta     ptr1+1
	lda     _temp1
	sta     (ptr1),y
;
; enemies.nt[x+1] = temp2;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0DC4
	inx
	clc
L0DC4:	adc     #<(_enemies+96)
	sta     ptr1
	txa
	adc     #>(_enemies+96)
	sta     ptr1+1
	lda     _temp2
	sta     (ptr1),y
;
; enemies.type[x+1] = ENEMY_CANNONBALL;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0DC5
	inx
	clc
L0DC5:	adc     #<(_enemies+160)
	sta     ptr1
	txa
	adc     #>(_enemies+160)
	sta     ptr1+1
	lda     #$09
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cannonball_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cannonball_ai: near

.segment	"CODE"

;
; temp1 = enemies.extra[x - 1];
;
	ldx     #$00
	lda     _x
	sec
	sbc     #$01
	bcs     L0C79
	dex
L0C79:	sta     ptr1
	txa
	clc
	adc     #>(_enemies+192)
	sta     ptr1+1
	ldy     #<(_enemies+192)
	lda     (ptr1),y
	sta     _temp1
;
; temp2 = cos_lookup(temp1);
;
	jsr     _cos_lookup
	sta     _temp2
;
; temp3 = sin_lookup(temp1);
;
	lda     _temp1
	jsr     _sin_lookup
	sta     _temp3
;
; high_byte(temp5) = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.extra[x];
;
	ldy     _x
	lda     _enemies+192,y
	sta     _temp5
;
; if (CANNONBALL_X_DIRECTION(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$40
	beq     L0DD2
;
; temp5 += temp2;
;
	lda     _temp2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = high_byte(temp5) + 7;
;
	clc
	adc     #$07
;
; } else {
;
	jmp     L0DCF
;
; temp5 -= temp2;
;
L0DD2:	lda     _temp2
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp1 = high_byte(temp5) + 0xff;
;
	clc
	adc     #$FF
L0DCF:	sta     _temp1
;
; enemies.x[x] = high_byte(temp5);
;
	ldy     _x
	lda     _temp5+1
	sta     _enemies,y
;
; enemies.extra[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+192,y
;
; high_byte(temp6) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp6+1
;
; low_byte(temp6) = enemies.extra2[x];
;
	ldy     _x
	lda     _enemies+224,y
	sta     _temp6
;
; if (CANNONBALL_Y_DIRECTION(x)) {
;
	ldy     _x
	lda     _enemies+128,y
	and     #$20
	beq     L0DD3
;
; temp6 += temp3;
;
	lda     _temp3
	clc
	adc     _temp6
	sta     _temp6
	lda     #$00
	adc     _temp6+1
	sta     _temp6+1
;
; enemies.extra2[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+224,y
;
; low_byte(temp6) = high_byte(temp6);
;
	lda     _temp6+1
	sta     _temp6
;
; high_byte(temp6) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp6+1
;
; temp6 = add_scroll_y(0x00, temp6);
;
	lda     #$00
	jsr     pusha
	lda     _temp6
	ldx     _temp6+1
	jsr     _add_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; enemies.nt[x] = high_byte(temp6);
;
	ldy     _x
	lda     _temp6+1
	sta     _enemies+96,y
;
; enemies.actual_y[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+64,y
;
; temp5 = add_scroll_y(7, temp6);
;
	lda     #$07
;
; } else {
;
	jmp     L0DD9
;
; temp6 -= temp3;
;
L0DD3:	lda     _temp3
	eor     #$FF
	sec
	adc     _temp6
	sta     _temp6
	lda     #$FF
	adc     _temp6+1
	sta     _temp6+1
;
; enemies.extra2[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+224,y
;
; low_byte(temp6) = high_byte(temp6);
;
	lda     _temp6+1
	sta     _temp6
;
; high_byte(temp6) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp6+1
;
; temp6 = sub_scroll_y(0x00, temp6);
;
	lda     #$00
	jsr     pusha
	lda     _temp6
	ldx     _temp6+1
	jsr     _sub_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; enemies.nt[x] = high_byte(temp6);
;
	ldy     _x
	lda     _temp6+1
	sta     _enemies+96,y
;
; enemies.actual_y[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+64,y
;
; temp5 = add_scroll_y(1, temp6);
;
	lda     #$01
L0DD9:	jsr     pusha
	lda     _temp6
	ldx     _temp6+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; coordinates = (temp1 >> 4) + (low_byte(temp5) & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp5
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temppointer = cmaps[high_byte(temp5)];
;
	ldx     #$00
	lda     _temp5+1
	asl     a
	bcc     L0DD1
	inx
	clc
L0DD1:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _temppointer
	stx     _temppointer+1
;
; collision = temppointer[coordinates];
;
	ldy     _coordinates
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L0D06
;
; enemies.type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies+160,y
;
; enemies.flags[x] = 0; 
;
	ldy     _x
	sta     _enemies+128,y
;
; }
;
L0D06:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ acid_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_acid_ai: near

.segment	"CODE"

;
; if (IS_ENEMY_ACTIVE(x+1)) { return; }
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0D18
	inx
L0D18:	sta     ptr1
	txa
	clc
	adc     #>(_enemies+128)
	sta     ptr1+1
	ldy     #<(_enemies+128)
	lda     (ptr1),y
	and     #$80
	beq     L0DDE
;
; }
;
	rts
;
; if (--enemies.timer[x] == 0) {
;
L0DDE:	lda     #<(_enemies+256)
	ldx     #>(_enemies+256)
	clc
	adc     _x
	bcc     L0D1C
	inx
L0D1C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
	cmp     #$00
	beq     L0DDF
;
; }
;
	rts
;
; temp0 = enemies.extra[x];
;
L0DDF:	ldy     _x
	lda     _enemies+192,y
	sta     _temp0
;
; enemies.timer[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies+256,y
;
; temp0 = rand8() & 0b111; // Bottom 3 bits, 0 - 7
;
	jsr     _rand8
	and     #$07
	sta     _temp0
;
; temp1 = enemies.x[x] + temp0; 
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     _temp0
	sta     _temp1
;
; temp2 = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp2
;
; temp3 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp3
;
; enemies.x[x+1] = temp1;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0DDB
	inx
	clc
L0DDB:	adc     #<(_enemies)
	sta     ptr1
	txa
	adc     #>(_enemies)
	sta     ptr1+1
	lda     _temp1
	ldy     #$00
	sta     (ptr1),y
;
; enemies.actual_y[x+1] = temp2;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0DDC
	inx
	clc
L0DDC:	adc     #<(_enemies+64)
	sta     ptr1
	txa
	adc     #>(_enemies+64)
	sta     ptr1+1
	lda     _temp2
	sta     (ptr1),y
;
; enemies.nt[x+1] = temp3;
;
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0DDD
	inx
	clc
L0DDD:	adc     #<(_enemies+96)
	sta     ptr1
	txa
	adc     #>(_enemies+96)
	sta     ptr1+1
	lda     _temp3
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ acid_drop_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_acid_drop_ai: near

.segment	"CODE"

;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp5
;
; temp1 = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp1
;
; temp5 = add_scroll_y(1, temp5);
;
	lda     #$01
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp6 = add_scroll_y(6, temp5); // 8 being the cosmetic projectile height
;
	lda     #$06
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _add_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; coordinates = (temp1 >> 4) + (low_byte(temp6) & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp6
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temppointer = cmaps[high_byte(temp6)];
;
	ldx     #$00
	lda     _temp6+1
	asl     a
	bcc     L0DE2
	inx
	clc
L0DE2:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _temppointer
	stx     _temppointer+1
;
; collision = temppointer[coordinates];
;
	ldy     _coordinates
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L0BCD
;
; enemies.type[x] = ENEMY_NONE;
;
	ldy     _x
	lda     #$00
	sta     _enemies+160,y
;
; return;
;
	rts
;
; enemies.nt[x] = high_byte(temp5);
;
L0BCD:	ldy     _x
	lda     _temp5+1
	sta     _enemies+96,y
;
; enemies.actual_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+64,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ splyke_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_splyke_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sun_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sun_ai: near

.segment	"CODE"

;
; temp3 = ENEMY_DIRECTION(x) >> 6;
;
	ldy     _x
	lda     _enemies+128,y
	and     #$40
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp3
;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+96,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp5
;
; temp1 = enemies.x[x] + 6; 
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$06
	sta     _temp1
;
; if (temp3 == UP) { // subtracting from y
;
	lda     _temp3
	bne     L0B6F
;
; temp5 = sub_scroll_y(1, temp5);
;
	lda     #$01
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _sub_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp2 = low_byte(temp5); // Y of tile of interest
;
	lda     _temp5
	sta     _temp2
;
; temp4 = high_byte(temp5); // NT of tile of interest
;
	lda     _temp5+1
;
; } else { // DOWN (adding to y)
;
	jmp     L0DE6
;
; temp5 = add_scroll_y(1, temp5);
;
L0B6F:	lda     #$01
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp6 = add_scroll_y(15, temp5); // 15 being the cosmetic size of an enemy
;
	lda     #$0F
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _add_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; temp2 = low_byte(temp6); // Y of tile of interest
;
	lda     _temp6
	sta     _temp2
;
; temp4 = high_byte(temp6); // NT of tile of interest
;
	lda     _temp6+1
L0DE6:	sta     _temp4
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temppointer = cmaps[temp4];
;
	ldx     #$00
	lda     _temp4
	asl     a
	bcc     L0DE7
	inx
	clc
L0DE7:	adc     #<(_cmaps)
	sta     ptr1
	txa
	adc     #>(_cmaps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _temppointer
	stx     _temppointer+1
;
; collision = temppointer[coordinates];
;
	ldy     _coordinates
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L0B94
;
; ENEMY_FLIP_DIRECTION(x);
;
	lda     #<(_enemies+128)
	ldx     #>(_enemies+128)
	clc
	adc     _x
	bcc     L0B9C
	inx
L0B9C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	eor     #$40
	sta     (ptr1),y
;
; temp3 ^= 1;
;
	lda     _temp3
	eor     #$01
	sta     _temp3
;
; enemies.nt[x] = high_byte(temp5);
;
L0B94:	ldy     _x
	lda     _temp5+1
	sta     _enemies+96,y
;
; enemies.actual_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+64,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title_screen: near

.segment	"CODE"

;
; vram_adr(NTADR_A(3, 2));
;
	ldx     #$20
	lda     #$43
	jsr     _vram_adr
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; while(title_string[x]) {
;
	jmp     L0689
;
; vram_put(title_string[x]);
;
L0687:	ldy     _x
	lda     _title_string,y
	jsr     _vram_put
;
; ++x;
;
	inc     _x
;
; while(title_string[x]) {
;
L0689:	ldy     _x
	lda     _title_string,y
	bne     L0687
;
; vram_adr(NTADR_A(3, 4));
;
	ldx     #$20
	lda     #$83
	jsr     _vram_adr
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; while(author_string[x]) {
;
	jmp     L069D
;
; vram_put(author_string[x]);
;
L069B:	ldy     _x
	lda     _author_string,y
	jsr     _vram_put
;
; ++x;
;
	inc     _x
;
; while(author_string[x]) {
;
L069D:	ldy     _x
	lda     _author_string,y
	bne     L069B
;
; vram_adr(NTADR_A(3, 6));
;
	ldx     #$20
	lda     #$C3
	jsr     _vram_adr
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; while(instruction_string[x]) {
;
	jmp     L06B1
;
; vram_put(instruction_string[x]);
;
L06AF:	ldy     _x
	lda     _instruction_string,y
	jsr     _vram_put
;
; ++x;
;
	inc     _x
;
; while(instruction_string[x]) {
;
L06B1:	ldy     _x
	lda     _instruction_string,y
	bne     L06AF
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_game_over_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_game_over_screen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_screen();
;
	jsr     _clear_screen
;
; game_mode = MODE_GAME_OVER;
;
	lda     #$04
	sta     _game_mode
;
; vram_adr(NTADR_A(3, 6));
;
	ldx     #$20
	lda     #$C3
	jsr     _vram_adr
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; while (game_over_string[x]) {
;
	jmp     L06CB
;
; vram_put(game_over_string[x]);
;
L06C9:	ldy     _x
	lda     _game_over_string,y
	jsr     _vram_put
;
; ++x;
;
	inc     _x
;
; while (game_over_string[x]) {
;
L06CB:	ldy     _x
	lda     _game_over_string,y
	bne     L06C9
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ clear_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_screen: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; set_scroll_y(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_y
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_prg_bank(0);
;
	lda     #$00
	jsr     _set_prg_bank
;
; set_chr_bank_0(0);
;
	lda     #$00
	jsr     _set_chr_bank_0
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; level_index = 0;
;
	lda     #$00
	sta     _level_index
;
; load_title_screen();
;
	jsr     _load_title_screen
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while (game_mode == MODE_TITLE) { 
;
	jmp     L0DE9
;
; ppu_wait_nmi();
;
L062C:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_UP) {
;
	and     #$08
	beq     L0DE9
;
; level_index = 0;
;
	lda     #$00
	sta     _level_index
;
; begin_level();
;
	jsr     _begin_level
;
; while (game_mode == MODE_TITLE) { 
;
L0DE9:	lda     _game_mode
	beq     L062C
;
; while (game_mode == MODE_GAME) {
;
	jmp     L0DEB
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L063C:	jsr     _ppu_wait_nmi
;
; set_chr_bank_0(0);
;
	lda     #$00
	jsr     _set_chr_bank_0
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; movement();
;
	jsr     _movement
;
; check_spr_objects();
;
	jsr     _check_spr_objects
;
; sprite_collisions();
;
	jsr     _sprite_collisions
;
; enemy_movement();
;
	jsr     _enemy_movement
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; convert_to_decimal(score);
;
	lda     _score
	ldx     _score+1
	jsr     _convert_to_decimal
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if (valrigard.velocity_y >= 0) { // If this is true, draw down. Otherwise, draw up.
;
	ldx     _valrigard+6+1
	bmi     L0653
;
; draw_screen_D();
;
	jsr     _draw_screen_D
;
; }  else {
;
	jmp     L0656
;
; draw_screen_U();
;
L0653:	jsr     _draw_screen_U
;
; if (game_mode == MODE_GAME_OVER) {
;
L0656:	lda     _game_mode
	cmp     #$04
	bne     L0DEA
;
; load_game_over_screen();
;
	jsr     _load_game_over_screen
;
; if (pad1 & PAD_DOWN) {
;
L0DEA:	lda     _pad1
	and     #$04
	beq     L0DEB
;
; SET_STATUS_ALIVE();
;
	lda     _player_flags
	and     #$FD
	sta     _player_flags
;
; while (game_mode == MODE_GAME) {
;
L0DEB:	lda     _game_mode
	cmp     #$01
	beq     L063C
;
; while (game_mode == MODE_GAME_OVER) {
;
	jmp     L0DEC
;
; ppu_wait_nmi();
;
L0660:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_DOWN) {
;
	and     #$04
	beq     L0DEC
;
; level_index = 0;
;
	lda     #$00
	sta     _level_index
;
; begin_level();
;
	jsr     _begin_level
;
; while (game_mode == MODE_GAME_OVER) {
;
L0DEC:	lda     _game_mode
	cmp     #$04
	beq     L0660
;
; while (1){
;
	jmp     L0DE9

.endproc

