;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_set_scroll_y
	.import		_add_scroll_y
	.import		_sub_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_1_mt
	.import		_buffer_4_mt
	.import		_flush_vram_update_nmi
	.export		_valrigardIdleLeft
	.export		_valrigardIdleRight
	.export		_metatiles
	.export		_level10_0
	.export		_level10_1
	.export		_level10_2
	.export		_level_starting_nt
	.export		_valrigard_starting_nt
	.export		_valrigard_inital_coords
	.export		_level_nametables
	.export		_level_names
	.import		_clear_object_bitfield
	.import		_score_string
	.import		_convert_to_decimal
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_player_flags
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_pseudo_scroll_y
	.export		_scroll_y
	.export		_min_scroll_y
	.export		_max_scroll_y
	.export		_initial_scroll
	.export		_scroll_count
	.export		_scroll_count_2
	.export		_L_R_switch
	.export		_old_x
	.export		_old_y
	.export		_level_index
	.export		_energy
	.export		_timer
	.export		_song
	.export		_nt_min
	.export		_nt_max
	.export		_nt_current
	.export		_score
	.export		_c_map
	.export		_c_map2
	.export		_palette_bg
	.export		_palette_sp
	.export		_valrigard
	.export		_hitbox
	.export		_debug_tile_x
	.export		_debug_tile_y
	.export		_draw_sprites
	.export		_movement
	.export		_load_level
	.export		_load_room
	.export		_bg_collision
	.export		_bg_collision_sub
	.export		_draw_screen_U
	.export		_draw_screen_D
	.export		_draw_screen_sub
	.export		_collect_item
	.export		_new_cmap
	.export		_main

.segment	"DATA"

_valrigard:
	.word	$0014
	.word	$0028
	.res	4,$00

.segment	"RODATA"

_valrigardIdleLeft:
	.byte	$FE
	.byte	$FD
	.byte	$E0
	.byte	$01
	.byte	$06
	.byte	$FD
	.byte	$E1
	.byte	$01
	.byte	$FE
	.byte	$05
	.byte	$F0
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$F1
	.byte	$01
	.byte	$80
_valrigardIdleRight:
	.byte	$06
	.byte	$FD
	.byte	$E0
	.byte	$41
	.byte	$FE
	.byte	$FD
	.byte	$E1
	.byte	$41
	.byte	$06
	.byte	$05
	.byte	$F0
	.byte	$41
	.byte	$FE
	.byte	$05
	.byte	$F1
	.byte	$41
	.byte	$80
_metatiles:
	.byte	$A0
	.byte	$A0
	.byte	$B0
	.byte	$B0
	.byte	$00
	.byte	$A1
	.byte	$A1
	.byte	$B1
	.byte	$B1
	.byte	$00
	.byte	$A2
	.byte	$A3
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$B2
	.byte	$B3
	.byte	$B2
	.byte	$B3
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$E5
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$E6
	.byte	$E3
	.byte	$F6
	.byte	$F3
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$94
	.byte	$F5
	.byte	$00
	.byte	$E2
	.byte	$E7
	.byte	$F2
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$8D
	.byte	$F6
	.byte	$F3
	.byte	$00
	.byte	$E6
	.byte	$E3
	.byte	$94
	.byte	$9D
	.byte	$00
	.byte	$E2
	.byte	$E7
	.byte	$F0
	.byte	$F5
	.byte	$00
	.byte	$E0
	.byte	$E5
	.byte	$F2
	.byte	$F7
	.byte	$00
	.byte	$84
	.byte	$E5
	.byte	$94
	.byte	$F5
	.byte	$00
	.byte	$E2
	.byte	$E3
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$E0
	.byte	$8D
	.byte	$F0
	.byte	$9D
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$85
	.byte	$94
	.byte	$95
	.byte	$00
	.byte	$86
	.byte	$81
	.byte	$96
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$89
	.byte	$94
	.byte	$99
	.byte	$00
	.byte	$8A
	.byte	$81
	.byte	$9A
	.byte	$91
	.byte	$00
	.byte	$84
	.byte	$8D
	.byte	$94
	.byte	$9D
	.byte	$00
	.byte	$EC
	.byte	$ED
	.byte	$FC
	.byte	$FD
	.byte	$03
	.byte	$A4
	.byte	$A5
	.byte	$B4
	.byte	$B5
	.byte	$03
	.byte	$A6
	.byte	$A5
	.byte	$B6
	.byte	$B5
	.byte	$03
	.byte	$A6
	.byte	$A9
	.byte	$B6
	.byte	$B9
	.byte	$03
	.byte	$AA
	.byte	$AB
	.byte	$BA
	.byte	$BB
	.byte	$02
	.byte	$8E
	.byte	$8F
	.byte	$9E
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$AD
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$AE
	.byte	$AF
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$BC
	.byte	$CD
	.byte	$BC
	.byte	$DD
	.byte	$00
	.byte	$CE
	.byte	$BF
	.byte	$DE
	.byte	$BF
	.byte	$00
	.byte	$C4
	.byte	$C5
	.byte	$D4
	.byte	$D5
	.byte	$00
	.byte	$C6
	.byte	$C7
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$D8
	.byte	$D9
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$DA
	.byte	$DB
	.byte	$00
	.byte	$C2
	.byte	$C3
	.byte	$D2
	.byte	$D3
	.byte	$03
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$03
	.byte	$EA
	.byte	$EB
	.byte	$FA
	.byte	$FB
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_level10_0:
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$17
	.byte	$19
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$18
	.byte	$18
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$01
	.byte	$01
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level10_1:
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$0D
	.byte	$11
	.byte	$2C
	.byte	$10
	.byte	$11
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$16
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$29
	.byte	$2C
	.byte	$29
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$0D
	.byte	$0D
	.byte	$11
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$16
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level10_2:
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$16
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$10
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$28
	.byte	$1C
	.byte	$1D
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$1E
	.byte	$1F
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0E
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$07
	.byte	$07
	.byte	$0A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$28
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$06
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$2C
	.byte	$1A
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$2C
	.byte	$2C
	.byte	$2C
	.byte	$2C
_level_starting_nt:
	.byte	$00
	.byte	$03
_valrigard_starting_nt:
	.byte	$02
_valrigard_inital_coords:
	.byte	$4D
_level_nametables:
	.addr	_level10_0
	.addr	_level10_1
	.addr	_level10_2
	.addr	_level10_0
_level_names:
	.addr	L03DC
	.addr	L03DE
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$11
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$38
_palette_sp:
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$01
	.byte	$0F
	.byte	$32
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$30
	.byte	$16
	.byte	$00
L03DC:
	.byte	$4D,$6F,$63,$6B,$75,$70,$20,$4C,$65,$76,$65,$6C,$20,$31,$30,$00
L03DE:
	.byte	$4E,$75,$6C,$6C,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_player_flags:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_pseudo_scroll_y:
	.res	2,$00
_scroll_y:
	.res	2,$00
_min_scroll_y:
	.res	2,$00
_max_scroll_y:
	.res	2,$00
_initial_scroll:
	.res	2,$00
_scroll_count:
	.res	1,$00
_scroll_count_2:
	.res	1,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_level_index:
	.res	1,$00
_energy:
	.res	1,$00
_timer:
	.res	1,$00
_song:
	.res	1,$00
_nt_min:
	.res	1,$00
_nt_max:
	.res	1,$00
_nt_current:
	.res	1,$00
.segment	"BSS"
_score:
	.res	2,$00
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_hitbox:
	.res	4,$00
_debug_tile_x:
	.res	1,$00
_debug_tile_y:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp1 = valrigard.x >> 8;
;
	ldx     #$00
	lda     _valrigard+1
	ldx     #$00
	sta     _temp1
;
; temp2 = valrigard.y >> 8;
;
	ldx     #$00
	lda     _valrigard+3
	ldx     #$00
	sta     _temp2
;
; oam_spr(232, 34, DIRECTION, 3);
;
	lda     #$E8
	jsr     pusha
	lda     #$22
	jsr     pusha
	ldx     #$00
	lda     _player_flags
	ldx     #$00
	and     #$01
	ldx     #$00
	jsr     pusha
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(232, 42, STATUS_DEAD, 2);
;
	lda     #$E8
	jsr     pusha
	lda     #$2A
	jsr     pusha
	ldx     #$00
	lda     _player_flags
	ldx     #$00
	and     #$02
	ldx     #$00
	jsr     pusha
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(200, 50, debug_tile_x >> 4, 1);
;
	lda     #$C8
	jsr     pusha
	lda     #$32
	jsr     pusha
	ldx     #$00
	lda     _debug_tile_x
	jsr     asrax4
	ldx     #$00
	jsr     pusha
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(208, 50, debug_tile_x & 0x0f, 1);
;
	lda     #$D0
	jsr     pusha
	lda     #$32
	jsr     pusha
	ldx     #$00
	lda     _debug_tile_x
	ldx     #$00
	and     #$0F
	ldx     #$00
	jsr     pusha
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(224, 50, debug_tile_y >> 4, 1);
;
	lda     #$E0
	jsr     pusha
	lda     #$32
	jsr     pusha
	ldx     #$00
	lda     _debug_tile_y
	jsr     asrax4
	ldx     #$00
	jsr     pusha
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(232, 50, debug_tile_y & 0x0f, 1);
;
	lda     #$E8
	jsr     pusha
	lda     #$32
	jsr     pusha
	ldx     #$00
	lda     _debug_tile_y
	ldx     #$00
	and     #$0F
	ldx     #$00
	jsr     pusha
	lda     #$01
	jsr     _oam_spr
;
; if (DIRECTION == LEFT) {
;
	ldx     #$00
	lda     _player_flags
	ldx     #$00
	and     #$01
	cpx     #$00
	bne     L04E3
	cmp     #$00
L04E3:	jsr     booleq
	jeq     L04E0
;
; oam_meta_spr(temp1, temp2, valrigardIdleLeft);
;
	lda     _temp1
	jsr     pusha
	lda     _temp2
	jsr     pusha
	lda     #<(_valrigardIdleLeft)
	ldx     #>(_valrigardIdleLeft)
	jsr     _oam_meta_spr
;
; } else {
;
	jmp     L04E8
;
; oam_meta_spr(temp1, temp2, valrigardIdleRight);
;
L04E0:	lda     _temp1
	jsr     pusha
	lda     _temp2
	jsr     pusha
	lda     #<(_valrigardIdleRight)
	ldx     #>(_valrigardIdleRight)
	jsr     _oam_meta_spr
;
; temp1 = energy >> 4; // Unfortunately this is ASCII so ABCDEF are not directly after 789
;
L04E8:	ldx     #$00
	lda     _energy
	jsr     asrax4
	ldx     #$00
	sta     _temp1
;
; oam_spr(200, 28, temp1, 1);
;
	lda     #$C8
	jsr     pusha
	lda     #$1C
	jsr     pusha
	lda     _temp1
	jsr     pusha
	lda     #$01
	jsr     _oam_spr
;
; temp1 = energy & 0x0f;
;
	ldx     #$00
	lda     _energy
	ldx     #$00
	and     #$0F
	ldx     #$00
	sta     _temp1
;
; oam_spr(208, 28, temp1, 1);
;
	lda     #$D0
	jsr     pusha
	lda     #$1C
	jsr     pusha
	lda     _temp1
	jsr     pusha
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(200, 20, score_string[4], 3);
;
	lda     #$C8
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     _score_string+4
	jsr     pusha
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(208, 20, score_string[3], 3);
;
	lda     #$D0
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     _score_string+3
	jsr     pusha
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(216, 20, score_string[2], 3);
;
	lda     #$D8
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     _score_string+2
	jsr     pusha
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(224, 20, score_string[1], 3);
;
	lda     #$E0
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     _score_string+1
	jsr     pusha
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(232, 20, score_string[0], 3);
;
	lda     #$E8
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     _score_string
	jsr     pusha
	lda     #$03
	jsr     _oam_spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = valrigard.x;
;
	lda     _valrigard
	ldx     _valrigard+1
	sta     _old_x
	stx     _old_x+1
;
; if (pad1 & PAD_LEFT) {
;
	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$02
	stx     tmp1
	ora     tmp1
	jeq     L051C
;
; SET_DIRECTION_LEFT();
;
	ldx     #$00
	lda     _player_flags
	and     #$FE
	sta     _player_flags
;
; if (valrigard.x <= 0x0200) { // Changed by 1 from nesdoug's example because Valrigard's hitbox is narrower by 1 pixel on both sides
;
	lda     _valrigard
	ldx     _valrigard+1
	cpx     #$02
	bne     L0523
	cmp     #$01
L0523:	jsr     boolult
	jeq     L0521
;
; valrigard.velocity_x = 0;
;
	ldx     #$00
	lda     #$00
	sta     _valrigard+4
	stx     _valrigard+4+1
;
; valrigard.x = 0x200;
;
	ldx     #$02
	lda     #$00
	sta     _valrigard
	stx     _valrigard+1
;
; } else if (valrigard.x < 0x0600) { // Don't allow us to wrap to the other side
;
	jmp     L052D
L0521:	lda     _valrigard
	ldx     _valrigard+1
	cpx     #$06
	jsr     boolult
	jeq     L0529
;
; valrigard.velocity_x = -0x100;
;
	ldx     #$FF
	lda     #$00
	sta     _valrigard+4
	stx     _valrigard+4+1
;
; } else {
;
	jmp     L052D
;
; valrigard.velocity_x = -SPEED;
;
L0529:	ldx     #$FE
	lda     #$B0
	sta     _valrigard+4
	stx     _valrigard+4+1
;
; else if (pad1 & PAD_RIGHT){
;
L052D:	jmp     L0544
L051C:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$01
	stx     tmp1
	ora     tmp1
	jeq     L0531
;
; SET_DIRECTION_RIGHT();
;
	ldx     #$00
	lda     _player_flags
	ora     #$01
	sta     _player_flags
;
; if (valrigard.x >= 0xf000) {  // Also changed by 1 from nesdoug's example because Valrigard's hitbox is narrower by 1 pixel on both sides
;
	lda     _valrigard
	ldx     _valrigard+1
	cmp     #$00
	txa
	sbc     #$F0
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0536
;
; valrigard.velocity_x = 0;
;
	ldx     #$00
	lda     #$00
	sta     _valrigard+4
	stx     _valrigard+4+1
;
; valrigard.x = 0xf000; // ...and we'd add 0x100 to this constant here (and the 0x200 in the PAD_LEFT block would be a 0x100)
;
	ldx     #$F0
	lda     #$00
	sta     _valrigard
	stx     _valrigard+1
;
; } else if (valrigard.x > 0xec00) { // Don't allow us to wrap to the other side
;
	jmp     L0541
L0536:	lda     _valrigard
	ldx     _valrigard+1
	cmp     #$01
	txa
	sbc     #$EC
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L053D
;
; valrigard.velocity_x = 0x100;
;
	ldx     #$01
	lda     #$00
	sta     _valrigard+4
	stx     _valrigard+4+1
;
; } else {
;
	jmp     L0541
;
; valrigard.velocity_x = SPEED;
;
L053D:	ldx     #$01
	lda     #$50
	sta     _valrigard+4
	stx     _valrigard+4+1
;
; else {
;
L0541:	jmp     L0544
;
; valrigard.velocity_x = 0;
;
L0531:	ldx     #$00
	lda     #$00
	sta     _valrigard+4
	stx     _valrigard+4+1
;
; valrigard.x += valrigard.velocity_x;
;
L0544:	lda     _valrigard+4
	ldx     _valrigard+4+1
	clc
	adc     _valrigard
	sta     _valrigard
	txa
	adc     _valrigard+1
	sta     _valrigard+1
	tax
	lda     _valrigard
;
; if((valrigard.x < 0x100)||(valrigard.x > 0xf800)) { // make sure no wrap around to the other side
;
	lda     _valrigard
	ldx     _valrigard+1
	cpx     #$01
	jsr     boolult
	jne     L054A
	lda     _valrigard
	ldx     _valrigard+1
	cmp     #$01
	txa
	sbc     #$F8
	lda     #$00
	ldx     #$00
	rol     a
	jne     L054A
	ldx     #$00
	lda     #$00
	jeq     L054D
L054A:	ldx     #$00
	lda     #$01
L054D:	jeq     L0549
;
; valrigard.x = 0x100;
;
	ldx     #$01
	lda     #$00
	sta     _valrigard
	stx     _valrigard+1
;
; L_R_switch = 1; // Shrinks the Y values in bg_coll. This makes head/foot collisions less problematic (examine this)
;
L0549:	ldx     #$00
	lda     #$01
	sta     _L_R_switch
;
; hitbox.x = high_byte(valrigard.x);
;
	ldx     #$00
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	ldx     #$00
	lda     _valrigard+3
	sta     _hitbox+1
;
; hitbox.width = VALRIGARD_WIDTH;
;
	ldx     #$00
	lda     #$0B
	sta     _hitbox+2
;
; hitbox.height = VALRIGARD_HEIGHT;
;
	ldx     #$00
	lda     #$0D
	sta     _hitbox+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if (collision_L && collision_R) { // Half-stuck in a wall, I'm guessing?
;
	lda     _collision_L
	jeq     L055F
	lda     _collision_R
	jne     L055E
L055F:	ldx     #$00
	lda     #$00
	jeq     L0560
L055E:	ldx     #$00
	lda     #$01
L0560:	jeq     L055D
;
; valrigard.x = old_x;
;
	lda     _old_x
	ldx     _old_x+1
	sta     _valrigard
	stx     _valrigard+1
;
; else if (collision_L) {
;
	jmp     L056A
L055D:	lda     _collision_L
	jeq     L0564
;
; valrigard.x -= (eject_L << 8);
;
	ldx     #$00
	lda     _eject_L
	tax
	lda     #$00
	eor     #$FF
	sec
	adc     _valrigard
	sta     _valrigard
	txa
	eor     #$FF
	adc     _valrigard+1
	sta     _valrigard+1
	tax
	lda     _valrigard
;
; else if (collision_R) {
;
	jmp     L056A
L0564:	lda     _collision_R
	jeq     L056A
;
; valrigard.x -= (eject_R << 8);
;
	ldx     #$00
	lda     _eject_R
	tax
	lda     #$00
	eor     #$FF
	sec
	adc     _valrigard
	sta     _valrigard
	txa
	eor     #$FF
	adc     _valrigard+1
	sta     _valrigard+1
	tax
	lda     _valrigard
;
; old_y = valrigard.y;
;
L056A:	lda     _valrigard+2
	ldx     _valrigard+2+1
	sta     _old_y
	stx     _old_y+1
;
; if (pad1 & PAD_UP && energy > 0) { // If we're holding up on the DPad...
;
	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$08
	stx     tmp1
	ora     tmp1
	jeq     L0573
	ldx     #$00
	lda     _energy
	cmp     #$00
	jsr     boolne
	jne     L0572
L0573:	ldx     #$00
	lda     #$00
	jeq     L0574
L0572:	ldx     #$00
	lda     #$01
L0574:	jeq     L0571
;
; valrigard.velocity_y -= GRAVITY;
;
	lda     _valrigard+6
	sec
	sbc     #$30
	sta     _valrigard+6
	bcs     L0577
	dec     _valrigard+6+1
L0577:	ldx     _valrigard+6+1
;
; if (valrigard.velocity_y < -SPEED) valrigard.velocity_y = -SPEED;
;
	lda     _valrigard+6
	ldx     _valrigard+6+1
	cmp     #$B0
	txa
	sbc     #$FE
	bvc     L057A
	eor     #$80
L057A:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0578
	ldx     #$FE
	lda     #$B0
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; energy -= 1;
;
L0578:	ldx     #$00
	dec     _energy
	lda     _energy
;
; } else {
;
	jmp     L0583
;
; valrigard.velocity_y += GRAVITY;
;
L0571:	lda     #$30
	clc
	adc     _valrigard+6
	sta     _valrigard+6
	bcc     L0582
	inc     _valrigard+6+1
L0582:	ldx     _valrigard+6+1
;
; if (valrigard.velocity_y > MAX_FALL) valrigard.velocity_y = MAX_FALL;
;
	lda     _valrigard+6
	ldx     _valrigard+6+1
	cmp     #$51
	txa
	sbc     #$01
	bvs     L0585
	eor     #$80
L0585:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0583
	ldx     #$01
	lda     #$50
	sta     _valrigard+6
	stx     _valrigard+6+1
;
; valrigard.y += valrigard.velocity_y;
;
L0583:	lda     _valrigard+6
	ldx     _valrigard+6+1
	clc
	adc     _valrigard+2
	sta     _valrigard+2
	txa
	adc     _valrigard+2+1
	sta     _valrigard+2+1
	tax
	lda     _valrigard+2
;
; if (valrigard.y < 0x100)  valrigard.y = 0x100;
;
	lda     _valrigard+2
	ldx     _valrigard+2+1
	cpx     #$01
	jsr     boolult
	jeq     L058A
	ldx     #$01
	lda     #$00
	sta     _valrigard+2
	stx     _valrigard+2+1
;
; if (valrigard.y > 0xf000) valrigard.y = 0xf000;
;
L058A:	lda     _valrigard+2
	ldx     _valrigard+2+1
	cmp     #$01
	txa
	sbc     #$F0
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L058E
	ldx     #$F0
	lda     #$00
	sta     _valrigard+2
	stx     _valrigard+2+1
;
; L_R_switch = 0;
;
L058E:	ldx     #$00
	lda     #$00
	sta     _L_R_switch
;
; hitbox.x = high_byte(valrigard.x);
;
	ldx     #$00
	lda     _valrigard+1
	sta     _hitbox
;
; hitbox.y = high_byte(valrigard.y);
;
	ldx     #$00
	lda     _valrigard+3
	sta     _hitbox+1
;
; bg_collision();
;
	jsr     _bg_collision
;
; if(collision_U) {
;
	lda     _collision_U
	jeq     L059B
;
; high_byte(valrigard.y) -= eject_U;
;
	ldx     #$00
	lda     _eject_U
	ldx     #$00
	ldx     #$00
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; else if (collision_D) {
;
	jmp     L05A8
L059B:	lda     _collision_D
	jeq     L05A8
;
; high_byte(valrigard.y) -= eject_D;
;
	ldx     #$00
	lda     _eject_D
	ldx     #$00
	ldx     #$00
	eor     #$FF
	sec
	adc     _valrigard+3
	sta     _valrigard+3
;
; energy += 4;
;
	ldx     #$00
	lda     #$04
	clc
	adc     _energy
	sta     _energy
;
; if (energy > MAX_ENERGY) energy = MAX_ENERGY;
;
	ldx     #$00
	lda     _energy
	cmp     #$71
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L05A8
	ldx     #$00
	lda     #$70
	sta     _energy
;
; temp5 = valrigard.y;
;
L05A8:	lda     _valrigard+2
	ldx     _valrigard+2+1
	sta     _temp5
	stx     _temp5+1
;
; if (valrigard.y < MAX_UP && scroll_y > min_scroll_y) {
;
	lda     _valrigard+2
	ldx     _valrigard+2+1
	cpx     #$40
	jsr     boolult
	jeq     L05B0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     pushax
	lda     _min_scroll_y
	ldx     _min_scroll_y+1
	jsr     tosugtax
	jne     L05AF
L05B0:	ldx     #$00
	lda     #$00
	jeq     L05B1
L05AF:	ldx     #$00
	lda     #$01
L05B1:	jeq     L05AE
;
; temp1 = (MAX_UP - valrigard.y + 0x80) >> 8; // "the numbers work better with +80 (like 0.5)". I'll take his word for it.
;
	ldx     #$40
	lda     #$00
	jsr     pushax
	lda     _valrigard+2
	ldx     _valrigard+2+1
	jsr     tossubax
	ldy     #$80
	jsr     incaxy
	txa
	ldx     #$00
	ldx     #$00
	sta     _temp1
;
; scroll_y = sub_scroll_y(temp1, scroll_y);
;
	lda     _temp1
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; valrigard.y += (temp1 << 8);
;
	ldx     #$00
	lda     _temp1
	tax
	lda     #$00
	clc
	adc     _valrigard+2
	sta     _valrigard+2
	txa
	adc     _valrigard+2+1
	sta     _valrigard+2+1
	tax
	lda     _valrigard+2
;
; if (valrigard.y > MIN_DOWN && scroll_y < max_scroll_y) {
;
L05AE:	lda     _valrigard+2
	ldx     _valrigard+2+1
	cmp     #$01
	txa
	sbc     #$80
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L05BE
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     pushax
	lda     _max_scroll_y
	ldx     _max_scroll_y+1
	jsr     tosultax
	jne     L05BD
L05BE:	ldx     #$00
	lda     #$00
	jeq     L05BF
L05BD:	ldx     #$00
	lda     #$01
L05BF:	jeq     L05BC
;
; temp1 = (MIN_DOWN + valrigard.y + 0x80) >> 8;
;
	lda     _valrigard+2
	ldx     _valrigard+2+1
	jsr     pushax
	ldx     #$80
	lda     #$00
	jsr     tosaddax
	ldy     #$80
	jsr     incaxy
	txa
	ldx     #$00
	ldx     #$00
	sta     _temp1
;
; scroll_y = add_scroll_y(temp1, scroll_y);
;
	lda     _temp1
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; valrigard.y -= (temp1 << 8);
;
	ldx     #$00
	lda     _temp1
	tax
	lda     #$00
	eor     #$FF
	sec
	adc     _valrigard+2
	sta     _valrigard+2
	txa
	eor     #$FF
	adc     _valrigard+2+1
	sta     _valrigard+2+1
	tax
	lda     _valrigard+2
;
; if (valrigard.velocity_y <= 0) {
;
L05BC:	lda     _valrigard+6
	ldx     _valrigard+6+1
	cmp     #$01
	txa
	sbc     #$00
	bvc     L05CC
	eor     #$80
L05CC:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L05CA
;
; if ((scroll_y & 0xff) >= 0xec) {
;
	lda     _scroll_y
	ldx     _scroll_y+1
	ldx     #$00
	cmp     #$EC
	txa
	sbc     #$00
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L05CD
;
; nt_current = (scroll_y >> 8);
;
	ldx     #$00
	lda     _scroll_y+1
	ldx     #$00
	sta     _nt_current
;
; new_cmap();
;
	jsr     _new_cmap
;
; } else {
;
L05CD:	jmp     L05D5
;
; if ((scroll_y & 0xff) <= 0x02) {
;
L05CA:	lda     _scroll_y
	ldx     _scroll_y+1
	ldx     #$00
	cpx     #$00
	bne     L05D8
	cmp     #$03
L05D8:	jsr     boolult
	jeq     L05D5
;
; nt_current = (scroll_y >> 8) + 1;
;
	ldx     #$00
	lda     _scroll_y+1
	jsr     incax1
	ldx     #$00
	sta     _nt_current
;
; new_cmap();
;
	jsr     _new_cmap
;
; }
;
L05D5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level: near

.segment	"CODE"

;
; clear_object_bitfield(); // Clear all object destruction flags
;
	jsr     _clear_object_bitfield
;
; player_flags = 0; // Clear the player flags
;
	ldx     #$00
	lda     #$00
	sta     _player_flags
;
; nt_max = level_starting_nt[level_index+1];
;
	ldx     #$00
	lda     _level_index
	jsr     incax1
	clc
	adc     #<(_level_starting_nt)
	tay
	txa
	adc     #>(_level_starting_nt)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	sta     _nt_max
;
; nt_current = valrigard_starting_nt[level_index];
;
	lda     #<(_valrigard_starting_nt)
	ldx     #>(_valrigard_starting_nt)
	clc
	adc     _level_index
	bcc     L043E
	inx
L043E:	ldy     #$00
	jsr     ldauidx
	sta     _nt_current
;
; high_byte(scroll_y) = nt_current; // The high byte of scroll_y is the nametable we're currently in (0-255).
;
	ldx     #$00
	lda     _nt_current
	sta     _scroll_y+1
;
; low_byte(scroll_y) = 2;
;
	ldx     #$00
	lda     #$02
	sta     _scroll_y
;
; high_byte(max_scroll_y) = nt_max - 1; // bottom of this level
;
	ldx     #$00
	lda     _nt_max
	jsr     decax1
	ldx     #$00
	sta     _max_scroll_y+1
;
; low_byte(max_scroll_y) = 0xef;
;
	ldx     #$00
	lda     #$EF
	sta     _max_scroll_y
;
; high_byte(min_scroll_y) = level_starting_nt[level_index]; // Min Scroll
;
	lda     #<(_level_starting_nt)
	ldx     #>(_level_starting_nt)
	clc
	adc     _level_index
	bcc     L044F
	inx
L044F:	ldy     #$00
	jsr     ldauidx
	sta     _min_scroll_y+1
;
; low_byte(min_scroll_y) = 0x02;
;
	ldx     #$00
	lda     #$02
	sta     _min_scroll_y
;
; scroll_count = 0;
;
	ldx     #$00
	lda     #$00
	sta     _scroll_count
;
; initial_scroll = ((nt_current * 0x100) - 0x11);
;
	ldx     #$00
	lda     _nt_current
	tax
	lda     #$00
	ldy     #$11
	jsr     decaxy
	sta     _initial_scroll
	stx     _initial_scroll+1
;
; temp4 = valrigard_inital_coords[level_index];
;
	lda     #<(_valrigard_inital_coords)
	ldx     #>(_valrigard_inital_coords)
	clc
	adc     _level_index
	bcc     L045C
	inx
L045C:	ldy     #$00
	jsr     ldauidx
	sta     _temp4
;
; valrigard.x = ((temp4 >> 4) * 16) << 8;
;
	ldx     #$00
	lda     _temp4
	jsr     asrax4
	jsr     aslax4
	tax
	lda     #$00
	sta     _valrigard
	stx     _valrigard+1
;
; valrigard.y = ((temp4 & 0x0f) * 16) << 8;
;
	ldx     #$00
	lda     _temp4
	ldx     #$00
	and     #$0F
	jsr     shlax4
	tax
	lda     #$00
	sta     _valrigard+2
	stx     _valrigard+2+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; set_data_pointer(level_nametables[nt_current]);
;
	ldx     #$00
	lda     _nt_current
	jsr     aslax1
	clc
	adc     #<(_level_nametables)
	tay
	txa
	adc     #>(_level_nametables)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; temp1 = (initial_scroll >> 8) + 1;
;
	ldx     #$00
	lda     _initial_scroll+1
	jsr     incax1
	ldx     #$00
	sta     _temp1
;
; temp1 = (temp1 & 1) << 1;
;
	ldx     #$00
	lda     _temp1
	ldx     #$00
	and     #$01
	jsr     shlax1
	ldx     #$00
	sta     _temp1
;
; for(y=0; ;y+=0x20){
;
	ldx     #$00
	lda     #$00
	sta     _y
L0471:	jmp     L0474
;
; for(x=0; ;x+=0x20){
;
L0474:	ldx     #$00
	lda     #$00
	sta     _x
L0479:	jmp     L047C
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
L047C:	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(temp1, x, y);
;
	lda     _temp1
	jsr     pusha
	lda     _x
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	jsr     pushax
	ldx     #$00
	lda     _x
	jsr     asrax4
	jsr     tosaddax
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	ldx     #$00
	lda     _x
	cmp     #$E0
	jsr     booleq
	jeq     L047B
	jmp     L047A
;
; for(x=0; ;x+=0x20){
;
L047B:	ldx     #$00
	lda     #$20
	clc
	adc     _x
	sta     _x
	jmp     L0479
;
; if (y == 0xe0) break;
;
L047A:	ldx     #$00
	lda     _y
	cmp     #$E0
	jsr     booleq
	jeq     L0473
	jmp     L0472
;
; for(y=0; ;y+=0x20){
;
L0473:	ldx     #$00
	lda     #$20
	clc
	adc     _y
	sta     _y
	jmp     L0471
;
; temp1 = temp1 ^ 2; // flip that 0000 0010 bit
;
L0472:	ldx     #$00
	lda     _temp1
	eor     #$02
	ldx     #$00
	sta     _temp1
;
; set_data_pointer(level_nametables[(char)nt_current-1]); // NOTE: Don't call if nt_current = 0, or who really knows what will happen
;
	ldx     #$00
	lda     _nt_current
	jsr     decax1
	jsr     aslax1
	clc
	adc     #<(_level_nametables)
	tay
	txa
	adc     #>(_level_nametables)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _set_data_pointer
;
; for(x=0; ;x+=0x20){
;
	ldx     #$00
	lda     #$00
	sta     _x
L0498:	jmp     L049B
;
; y = 0xe0;
;
L049B:	ldx     #$00
	lda     #$E0
	sta     _y
;
; clear_vram_buffer(); // do each frame, and before putting anything in the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(temp1, x, y);
;
	lda     _temp1
	jsr     pusha
	lda     _x
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	jsr     pushax
	ldx     #$00
	lda     _x
	jsr     asrax4
	jsr     tosaddax
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == 0xe0) break;
;
	ldx     #$00
	lda     _x
	cmp     #$E0
	jsr     booleq
	jeq     L049A
	jmp     L0499
;
; for(x=0; ;x+=0x20){
;
L049A:	ldx     #$00
	lda     #$20
	clc
	adc     _x
	sta     _x
	jmp     L0498
;
; clear_vram_buffer();
;
L0499:	jsr     _clear_vram_buffer
;
; memcpy(c_map, level_nametables[nt_current], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _nt_current
	jsr     aslax1
	clc
	adc     #<(_level_nametables)
	tay
	txa
	adc     #>(_level_nametables)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; max_scroll_y = scroll_y;
;
	lda     _scroll_y
	ldx     _scroll_y+1
	sta     _max_scroll_y
	stx     _max_scroll_y+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	ldx     #$00
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	ldx     #$00
	lda     #$00
	sta     _collision_R
;
; collision_U = 0;
;
	ldx     #$00
	lda     #$00
	sta     _collision_U
;
; collision_D = 0;
;
	ldx     #$00
	lda     #$00
	sta     _collision_D
;
; temp3 = hitbox.y;
;
	ldx     #$00
	lda     _hitbox+1
	sta     _temp3
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	jeq     L05E8
	ldx     #$00
	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; if(temp3 >= 0xf0) return;
;
L05E8:	ldx     #$00
	lda     _temp3
	cmp     #$F0
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L05EC
	jmp     L0626
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
L05EC:	lda     _temp3
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp2 = temp5 >> 8; // high byte y
;
	ldx     #$00
	lda     _temp5+1
	ldx     #$00
	sta     _temp2
;
; temp3 = temp5 & 0xff; // low byte y
;
	lda     _temp5
	ldx     _temp5+1
	ldx     #$00
	ldx     #$00
	sta     _temp3
;
; temp1 = hitbox.x; // x left
;
	ldx     #$00
	lda     _hitbox
	sta     _temp1
;
; eject_L = temp1 | 0xf0;
;
	ldx     #$00
	lda     _temp1
	ora     #$F0
	ldx     #$00
	sta     _eject_L
;
; eject_U = temp3 | 0xf0;
;
	ldx     #$00
	lda     _temp3
	ora     #$F0
	ldx     #$00
	sta     _eject_U
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	jeq     L05FD
;
; ++collision_L;
;
	ldx     #$00
	inc     _collision_L
	lda     _collision_L
;
; ++collision_U;
;
	ldx     #$00
	inc     _collision_U
	lda     _collision_U
;
; temp1 += hitbox.width; // x right
;
L05FD:	ldx     #$00
	lda     _hitbox+2
	ldx     #$00
	ldx     #$00
	clc
	adc     _temp1
	sta     _temp1
;
; eject_R = (temp1 + 1) & 0x0f;
;
	ldx     #$00
	lda     _temp1
	jsr     incax1
	ldx     #$00
	and     #$0F
	ldx     #$00
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	jeq     L0607
;
; ++collision_R;
;
	ldx     #$00
	inc     _collision_R
	lda     _collision_R
;
; ++collision_U;
;
	ldx     #$00
	inc     _collision_U
	lda     _collision_U
;
; temp3 = hitbox.y + hitbox.height; // y bottom
;
L0607:	ldx     #$00
	lda     _hitbox+1
	jsr     pushax
	ldx     #$00
	lda     _hitbox+3
	jsr     tosaddax
	ldx     #$00
	sta     _temp3
;
; if(L_R_switch) temp3 -= 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	jeq     L060D
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
L060D:	lda     _temp3
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp2 = temp5 >> 8; // high byte y
;
	ldx     #$00
	lda     _temp5+1
	ldx     #$00
	sta     _temp2
;
; temp3 = temp5 & 0xff; // low byte y
;
	lda     _temp5
	ldx     _temp5+1
	ldx     #$00
	ldx     #$00
	sta     _temp3
;
; eject_D = (temp3 + 1) & 0x0f;
;
	ldx     #$00
	lda     _temp3
	jsr     incax1
	ldx     #$00
	and     #$0F
	ldx     #$00
	sta     _eject_D
;
; if(temp3 >= 0xf0) return;
;
	ldx     #$00
	lda     _temp3
	cmp     #$F0
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L061C
	jmp     L0626
;
; bg_collision_sub();
;
L061C:	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	jeq     L061F
;
; ++collision_R;
;
	ldx     #$00
	inc     _collision_R
	lda     _collision_R
;
; ++collision_D;
;
	ldx     #$00
	inc     _collision_D
	lda     _collision_D
;
; temp1 = hitbox.x; // x left
;
L061F:	ldx     #$00
	lda     _hitbox
	sta     _temp1
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if(collision){ // find a corner in the collision map
;
	lda     _collision
	jeq     L0626
;
; ++collision_L;
;
	ldx     #$00
	inc     _collision_L
	lda     _collision_L
;
; ++collision_D;
;
	ldx     #$00
	inc     _collision_D
	lda     _collision_D
;
; }
;
L0626:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0); // upper left
;
	ldx     #$00
	lda     _temp1
	jsr     asrax4
	jsr     pushax
	ldx     #$00
	lda     _temp3
	ldx     #$00
	and     #$F0
	jsr     tosaddax
	ldx     #$00
	sta     _coordinates
;
; map = temp2&1;
;
	ldx     #$00
	lda     _temp2
	ldx     #$00
	and     #$01
	ldx     #$00
	sta     _map
;
; if (!map) {
;
	ldx     #$00
	lda     _map
	jsr     bnega
	jeq     L0631
;
; temp4 = c_map[coordinates];
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	clc
	adc     _coordinates
	bcc     L0636
	inx
L0636:	ldy     #$00
	jsr     ldauidx
	sta     _temp4
;
; else {
;
	jmp     L0637
;
; temp4 = c_map2[coordinates];
;
L0631:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	clc
	adc     _coordinates
	bcc     L063B
	inx
L063B:	ldy     #$00
	jsr     ldauidx
	sta     _temp4
;
; collision = (temp4 < 0x17 && temp4 > 0x03); // 0x17 is the first non-solid tile, so if the tile is less than that, it's a collision
;
L0637:	ldx     #$00
	lda     _temp4
	cmp     #$17
	jsr     boolult
	jeq     L063F
	ldx     #$00
	lda     _temp4
	cmp     #$04
	lda     #$00
	ldx     #$00
	rol     a
	jne     L063E
L063F:	ldx     #$00
	lda     #$00
	jeq     L0640
L063E:	ldx     #$00
	lda     #$01
L0640:	ldx     #$00
	sta     _collision
;
; switch (temp4) {
;
	ldx     #$00
	lda     _temp4
	jmp     L0642
;
; }
;
L0642:	cmp     #$00
	jeq     L0645
	cmp     #$01
	jeq     L0645
	cmp     #$02
	jeq     L0645
	cmp     #$03
	jeq     L0645
	cmp     #$2A
	jeq     L0650
	jmp     L066B
;
; SET_STATUS_DEAD();
;
L0645:	ldx     #$00
	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; break;
;
	jmp     L0643
;
; if (!map) {
;
L0650:	ldx     #$00
	lda     _map
	jsr     bnega
	jeq     L0651
;
; c_map[coordinates] = EMPTY_TILE;
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	clc
	adc     _coordinates
	bcc     L0655
	inx
L0655:	jsr     pushax
	ldx     #$00
	lda     #$2C
	ldy     #$00
	jsr     staspidx
;
; else {
;
	jmp     L0657
;
; c_map2[coordinates] = EMPTY_TILE;
;
L0651:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	clc
	adc     _coordinates
	bcc     L065A
	inx
L065A:	jsr     pushax
	ldx     #$00
	lda     #$2C
	ldy     #$00
	jsr     staspidx
;
; score += 1;
;
L0657:	inc     _score
	bne     L065E
	inc     _score+1
L065E:	lda     _score
	ldx     _score+1
;
; address = get_ppu_addr(nt, temp1, temp3);
;
	lda     _nt
	jsr     pusha
	lda     _temp1
	jsr     pusha
	lda     _temp3
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; buffer_1_mt(address, EMPTY_TILE);
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     #$2C
	jsr     _buffer_1_mt
;
; debug_tile_x = temp1 >> 4;
;
	ldx     #$00
	lda     _temp1
	jsr     asrax4
	ldx     #$00
	sta     _debug_tile_x
;
; debug_tile_y = temp3 >> 4;
;
	ldx     #$00
	lda     _temp3
	jsr     asrax4
	ldx     #$00
	sta     _debug_tile_y
;
; break;
;
	jmp     L0643
;
; break;
;
L066B:	jmp     L0643
;
; }
;
L0643:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_U: near

.segment	"CODE"

;
; pseudo_scroll_y = sub_scroll_y(0x20, scroll_y);
;
	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; draw_screen_sub();
;
	jsr     _draw_screen_sub
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_D: near

.segment	"CODE"

;
; pseudo_scroll_y = add_scroll_y(0x20, scroll_y) + 0xef; 
;
	lda     #$20
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	ldy     #$EF
	jsr     incaxy
	sta     _pseudo_scroll_y
	stx     _pseudo_scroll_y+1
;
; draw_screen_sub();
;
	jsr     _draw_screen_sub
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_sub: near

.segment	"CODE"

;
; temp1 = pseudo_scroll_y >> 8;
;
	ldx     #$00
	lda     _pseudo_scroll_y+1
	ldx     #$00
	sta     _temp1
;
; set_data_pointer(level_nametables[temp1]);
;
	ldx     #$00
	lda     _temp1
	jsr     aslax1
	clc
	adc     #<(_level_nametables)
	tay
	txa
	adc     #>(_level_nametables)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _set_data_pointer
;
; nt = (temp1 & 1) << 1; // 0 or 2
;
	ldx     #$00
	lda     _temp1
	ldx     #$00
	and     #$01
	jsr     shlax1
	ldx     #$00
	sta     _nt
;
; y = pseudo_scroll_y & 0xff;
;
	lda     _pseudo_scroll_y
	ldx     _pseudo_scroll_y+1
	ldx     #$00
	ldx     #$00
	sta     _y
;
; switch(scroll_count){
;
	ldx     #$00
	lda     _scroll_count
	jmp     L0684
;
; }
;
L0684:	cmp     #$00
	jeq     L0687
	cmp     #$01
	jeq     L069F
	cmp     #$02
	jeq     L06B7
	jmp     L06CE
;
; address = get_ppu_addr(nt, 0, y);
;
L0687:	lda     _nt
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 0;
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0x20, y);
;
	lda     _nt
	jsr     pusha
	lda     #$20
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 2;
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	jsr     incax2
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; break;
;
	jmp     L0685
;
; address = get_ppu_addr(nt, 0x40, y);
;
L069F:	lda     _nt
	jsr     pusha
	lda     #$40
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 4;
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	jsr     incax4
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0x60, y);
;
	lda     _nt
	jsr     pusha
	lda     #$60
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 6;
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	jsr     incax6
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; break;
;
	jmp     L0685
;
; address = get_ppu_addr(nt, 0x80, y);
;
L06B7:	lda     _nt
	jsr     pusha
	lda     #$80
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 8;
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	jsr     incax8
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0xa0, y);
;
	lda     _nt
	jsr     pusha
	lda     #$A0
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 10;
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	ldy     #$0A
	jsr     incaxy
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; break;
;
	jmp     L0685
;
; address = get_ppu_addr(nt, 0xc0, y);
;
L06CE:	lda     _nt
	jsr     pusha
	lda     #$C0
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 12;
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	ldy     #$0C
	jsr     incaxy
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, 0xe0, y);
;
	lda     _nt
	jsr     pusha
	lda     #$E0
	jsr     pusha
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + 14;
;
	ldx     #$00
	lda     _y
	ldx     #$00
	and     #$F0
	ldy     #$0E
	jsr     incaxy
	ldx     #$00
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; }
;
	jmp     L0685
;
; ++scroll_count;
;
L0685:	ldx     #$00
	inc     _scroll_count
	lda     _scroll_count
;
; scroll_count &= 3; //mask off top bits, keep it 0-3
;
	ldx     #$00
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collect_item (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collect_item: near

.segment	"CODE"

;
; return;
;
	jmp     L06F8
;
; temp1 = hitbox.x + 0x05; // Center of Valrigard
;
	ldx     #$00
	lda     _hitbox
	jsr     incax5
	ldx     #$00
	sta     _temp1
;
; temp3 = hitbox.y;
;
	ldx     #$00
	lda     _hitbox+1
	sta     _temp3
;
; if(L_R_switch) temp3 += 2; // fix bug, walking through walls
;
	lda     _L_R_switch
	jeq     L06FD
	ldx     #$00
	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; temp5 = add_scroll_y(temp3, scroll_y); // upper left
;
L06FD:	lda     _temp3
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _temp5
	stx     _temp5+1
;
; temp3 = temp5 & 0xff; // low byte y
;
	lda     _temp5
	ldx     _temp5+1
	ldx     #$00
	ldx     #$00
	sta     _temp3
;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0);
;
	ldx     #$00
	lda     _temp1
	jsr     asrax4
	jsr     pushax
	ldx     #$00
	lda     _temp3
	ldx     #$00
	and     #$F0
	jsr     tosaddax
	ldx     #$00
	sta     _coordinates
;
; debug_tile_x = temp1 >> 4;
;
	ldx     #$00
	lda     _temp1
	jsr     asrax4
	ldx     #$00
	sta     _debug_tile_x
;
; debug_tile_y = temp3 >> 4;
;
	ldx     #$00
	lda     _temp3
	jsr     asrax4
	ldx     #$00
	sta     _debug_tile_y
;
; map = nt_current & 1; //even or odd?
;
	ldx     #$00
	lda     _nt_current
	ldx     #$00
	and     #$01
	ldx     #$00
	sta     _map
;
; if (!map) {
;
	ldx     #$00
	lda     _map
	jsr     bnega
	jeq     L0711
;
; temp4 = c_map[coordinates];
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	clc
	adc     _coordinates
	bcc     L0716
	inx
L0716:	ldy     #$00
	jsr     ldauidx
	sta     _temp4
;
; else {
;
	jmp     L0717
;
; temp4 = c_map2[coordinates];
;
L0711:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	clc
	adc     _coordinates
	bcc     L071B
	inx
L071B:	ldy     #$00
	jsr     ldauidx
	sta     _temp4
;
; switch (temp4) {
;
L0717:	ldx     #$00
	lda     _temp4
	jmp     L071D
;
; }
;
L071D:	cmp     #$2A
	jeq     L0720
	cmp     #$2B
	jeq     L0725
	jmp     L0728
;
; score += 1;
;
L0720:	inc     _score
	bne     L0723
	inc     _score+1
L0723:	lda     _score
	ldx     _score+1
;
; break;
;
	jmp     L071E
;
; energy = MAX_ENERGY;
;
L0725:	ldx     #$00
	lda     #$70
	sta     _energy
;
; break;
;
	jmp     L071E
;
; return;
;
L0728:	jmp     L06F8
;
; if (!map) {
;
L071E:	ldx     #$00
	lda     _map
	jsr     bnega
	jeq     L0729
;
; c_map[coordinates] = EMPTY_TILE;
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	clc
	adc     _coordinates
	bcc     L072D
	inx
L072D:	jsr     pushax
	ldx     #$00
	lda     #$2C
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L072F
;
; c_map2[coordinates] = EMPTY_TILE;
;
L0729:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	clc
	adc     _coordinates
	bcc     L0732
	inx
L0732:	jsr     pushax
	ldx     #$00
	lda     #$2C
	ldy     #$00
	jsr     staspidx
;
; temp2 = pseudo_scroll_y >> 8;
;
L072F:	ldx     #$00
	lda     _pseudo_scroll_y+1
	ldx     #$00
	sta     _temp2
;
; nt = (temp2 & 1) << 1; // 0 or 2
;
	ldx     #$00
	lda     _temp2
	ldx     #$00
	and     #$01
	jsr     shlax1
	ldx     #$00
	sta     _nt
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(nt, temp1, temp3);
;
	lda     _nt
	jsr     pusha
	lda     _temp1
	jsr     pusha
	lda     _temp3
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; buffer_1_mt(address, ENERGY_REFILL_TILE);
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     #$2B
	jsr     _buffer_1_mt
;
; }
;
L06F8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; map = nt_current & 1; //even or odd?
;
	ldx     #$00
	lda     _nt_current
	ldx     #$00
	and     #$01
	ldx     #$00
	sta     _map
;
; if (!map) {
;
	ldx     #$00
	lda     _map
	jsr     bnega
	jeq     L06EB
;
; memcpy(c_map, level_nametables[nt_current], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _nt_current
	jsr     aslax1
	clc
	adc     #<(_level_nametables)
	tay
	txa
	adc     #>(_level_nametables)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; else {
;
	jmp     L06F2
;
; memcpy(c_map2, level_nametables[nt_current], 240);
;
L06EB:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _nt_current
	jsr     aslax1
	clc
	adc     #<(_level_nametables)
	tay
	txa
	adc     #>(_level_nametables)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; }
;
L06F2:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; load_level();
;
	jsr     _load_level
;
; load_room();
;
	jsr     _load_room
;
; level_index = 0;
;
	ldx     #$00
	lda     #$00
	sta     _level_index
;
; energy = MAX_ENERGY;
;
	ldx     #$00
	lda     #$70
	sta     _energy
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while (1){
;
	jmp     L042F
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0417:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; movement();
;
	jsr     _movement
;
; collect_item();
;
	jsr     _collect_item
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; if (valrigard.velocity_y < 0) {
;
	lda     _valrigard+6
	ldx     _valrigard+6+1
	cpx     #$80
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0427
;
; draw_screen_U();
;
	jsr     _draw_screen_U
;
; } else {
;
	jmp     L042A
;
; draw_screen_D();
;
L0427:	jsr     _draw_screen_D
;
; convert_to_decimal(score);
;
L042A:	lda     _score
	ldx     _score+1
	jsr     _convert_to_decimal
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if (pad1 & PAD_DOWN) {
;
	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$04
	stx     tmp1
	ora     tmp1
	jeq     L042F
;
; SET_STATUS_ALIVE();
;
	ldx     #$00
	lda     _player_flags
	and     #$FD
	sta     _player_flags
;
; while (1){
;
L042F:	jmp     L0417
;
; }
;
	rts

.endproc

