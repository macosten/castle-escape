;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_boss_ai_idle
	.export		_boss_ai_ascending
	.export		_boss_ai_descending
	.export		_boss_ai_damaged
	.export		_boss_ai_dying
	.export		_collision_with_boss
	.export		_draw_boss_flying
	.export		_draw_boss_idle
	.export		_draw_boss_dying
	.importzp	_TEMP
	.import		_sfx_play
	.import		_rand8
	.import		_add_scroll_y_fast_sub
	.import		_sub_scroll_y
	.import		_metatile_property_lookup_table
	.importzp	_temp0
	.importzp	_temp1
	.importzp	_temp2
	.importzp	_temp3
	.importzp	_temp4
	.importzp	_x
	.importzp	_temp_x
	.importzp	_coordinates
	.importzp	_collision
	.importzp	_collision_U
	.importzp	_collision_D
	.importzp	_collision_L
	.importzp	_collision_R
	.importzp	_player_flags
	.importzp	_enemy_is_using_bg_collision
	.importzp	_game_mode
	.importzp	_temp5
	.importzp	_temp6
	.importzp	_temppointer
	.importzp	_temp_mutablepointer
	.importzp	_hitbox
	.importzp	_valrigard
	.import		_cmaps
	.import		_boss_body_sprite_idle_lookup_table
	.import		_boss_body_sprite_flying_lookup_table
	.import		_boss_dying_sprite_lookup_table
	.import		_boss_dialog
	.import		_active_dboxdata
	.import		_enemies
	.import		_boss_state
	.import		_boss_memory
	.import		_trigger_dialog_box
	.import		_fire_at_target
	.import		_cannonball_ai_sub
	.import		_bg_collision
	.export		_boss_shoot_fireball
	.export		_boss_start_flying
	.export		_boss_ai_intro
	.export		_boss_collide_sub
	.export		_boss_state_deadliness

.segment	"RODATA"

_boss_state_deadliness:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00

; ---------------------------------------------------------------
; void __near__ boss_ai_idle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai_idle: near

.segment	"CODE"

;
; if (temp0 == enemies.extra[x]) {
;
	ldy     _x
	lda     _enemies+384,y
	cmp     _temp0
;
; boss_start_flying(); // Start flying
;
	jeq     _boss_start_flying
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_ai_ascending (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai_ascending: near

.segment	"CODE"

;
; temp1 = BOSS_BRADS_TARGET;
;
	lda     _boss_memory
	sta     _temp1
;
; cannonball_ai_sub();
;
	jsr     _cannonball_ai_sub
;
; if (temp0 & 1) { cannonball_ai_sub(); }
;
	lda     _temp0
	and     #$01
	beq     L024F
	jsr     _cannonball_ai_sub
;
; enemy_is_using_bg_collision = 1;
;
L024F:	lda     #$01
	sta     _enemy_is_using_bg_collision
;
; hitbox.x = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _hitbox
;
; hitbox.y = enemies.y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _hitbox+1
;
; hitbox.width = 16;
;
	lda     #$10
	sta     _hitbox+2
;
; hitbox.height = 16;
;
	sta     _hitbox+3
;
; bg_collision();
;
	jsr     _bg_collision
;
; if (collision_U >= 2 && !CANNONBALL_Y_DIRECTION(x)) { CANNONBALL_SET_POS_Y(x); } 
;
	lda     _collision_U
	cmp     #$02
	bcc     L0253
	ldy     _x
	lda     _enemies+256,y
	and     #$20
	bne     L0253
	ldy     _x
	lda     _enemies+256,y
	ora     #$20
;
; else if (collision_D >= 2 && CANNONBALL_Y_DIRECTION(x)) { CANNONBALL_SET_NEG_Y(x); }
;
	jmp     L0265
L0253:	lda     _collision_D
	cmp     #$02
	bcc     L0257
	ldy     _x
	lda     _enemies+256,y
	and     #$20
	beq     L0257
	ldy     _x
	lda     _enemies+256,y
	and     #$DF
L0265:	sta     _TEMP
	ldy     _x
	lda     _TEMP
	sta     _enemies+256,y
;
; if (collision_L >= 2 && !CANNONBALL_X_DIRECTION(x)) { CANNONBALL_SET_POS_X(x); }
;
L0257:	lda     _collision_L
	cmp     #$02
	bcc     L025B
	ldy     _x
	lda     _enemies+256,y
	and     #$40
	bne     L025B
	ldy     _x
	lda     _enemies+256,y
	ora     #$40
;
; else if (collision_R >= 2 && CANNONBALL_X_DIRECTION(x)) { CANNONBALL_SET_NEG_X(x); }
;
	jmp     L0266
L025B:	lda     _collision_R
	cmp     #$02
	lda     #$00
	bcc     L0260
	ldy     _x
	lda     _enemies+256,y
	and     #$40
	beq     L0260
	ldy     _x
	lda     _enemies+256,y
	and     #$BF
L0266:	sta     _TEMP
	ldy     _x
	lda     _TEMP
	sta     _enemies+256,y
;
; enemy_is_using_bg_collision = 0;
;
	lda     #$00
L0260:	sta     _enemy_is_using_bg_collision
;
; if (BOSS_FIREBALL_COOLDOWN) { --BOSS_FIREBALL_COOLDOWN; }
;
	lda     _boss_memory+1
	beq     L0106
	dec     _boss_memory+1
;
; else {
;
	jmp     L010B
;
; if (rand8() > 250) { 
;
L0106:	jsr     _rand8
	cmp     #$FB
	bcc     L010B
;
; boss_shoot_fireball(); ;
;
	jsr     _boss_shoot_fireball
;
; temp1 = enemies.extra[x]; // This gets modified by cannonball_ai_sub.
;
L010B:	ldy     _x
	lda     _enemies+384,y
	sta     _temp1
;
; temp0 = enemies.timer[x]; // (Already should be set to this)
;
	ldy     _x
	lda     _enemies+512,y
	sta     _temp0
;
; if (temp0 == temp1) { 
;
	lda     _temp1
	cmp     _temp0
	bne     L0117
;
; boss_state = BOSS_STATE_DESCENDING;
;
	lda     #$03
	sta     _boss_state
;
; enemies.timer[x] = 0;
;
	ldy     _x
	lda     #$00
	sta     _enemies+512,y
;
; }
;
L0117:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_ai_descending (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai_descending: near

.segment	"CODE"

;
; high_byte(temp5) = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+192,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+128,y
	sta     _temp5
;
; temp1 = enemies.x[x] + 8; 
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$08
	sta     _temp1
;
; add_scroll_y(temp5, 1, temp5);
;
	lda     _temp5
	sta     _TEMP
	lda     _temp5+1
	sta     _TEMP+1
	lda     #$01
	jsr     _add_scroll_y_fast_sub
	sta     _temp5
	stx     _temp5+1
;
; add_scroll_y(temp6, 16, temp5); 
;
	lda     _temp5
	sta     _TEMP
	lda     _temp5+1
	sta     _TEMP+1
	lda     #$10
	jsr     _add_scroll_y_fast_sub
	sta     _temp6
	stx     _temp6+1
;
; temp2 = low_byte(temp6); // Y of tile of interest
;
	lda     _temp6
	sta     _temp2
;
; temp4 = high_byte(temp6); // NT of tile of interest
;
	lda     _temp6+1
	sta     _temp4
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	beq     L0188
;
; temp0 = rand8();
;
	jsr     _rand8
	sta     _temp0
;
; enemies.extra[x] = temp0;
;
	ldy     _x
	lda     _temp0
	sta     _enemies+384,y
;
; boss_state = BOSS_STATE_IDLE;
;
	lda     #$01
	sta     _boss_state
;
; enemies.nt[x] = high_byte(temp5);
;
L0188:	ldy     _x
	lda     _temp5+1
	sta     _enemies+192,y
;
; enemies.actual_y[x] = low_byte(temp5);
;
	ldy     _x
	lda     _temp5
	sta     _enemies+128,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_ai_damaged (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai_damaged: near

.segment	"CODE"

;
; if (temp0 == 0) {
;
	lda     _temp0
;
; boss_start_flying();
;
	jeq     _boss_start_flying
;
; } else if ((temp0 & 0b11) == 0b11) {
;
	and     #$03
	cmp     #$03
	beq     L026A
;
; }
;
	rts
;
; high_byte(temp5) = enemies.nt[x];
;
L026A:	ldy     _x
	lda     _enemies+192,y
	sta     _temp5+1
;
; low_byte(temp5) = enemies.actual_y[x];
;
	ldy     _x
	lda     _enemies+128,y
	sta     _temp5
;
; temp1 = enemies.x[x] + 8; 
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$08
	sta     _temp1
;
; temp6 = sub_scroll_y(1, temp5);
;
	lda     #$01
	jsr     pusha
	lda     _temp5
	ldx     _temp5+1
	jsr     _sub_scroll_y
	sta     _temp6
	stx     _temp6+1
;
; temp2 = low_byte(temp6); // Y of tile of interest
;
	lda     _temp6
	sta     _temp2
;
; temp4 = high_byte(temp6); // NT of tile of interest
;
	lda     _temp6+1
	sta     _temp4
;
; coordinates = (temp1 >> 4) + (temp2 & 0xf0);
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp2
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, cmaps, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _cmaps,y
	sta     _temppointer
	lda     _cmaps+1,y
	sta     _temppointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(collision, temppointer, coordinates);
;
	ldy     _coordinates
	lda     (_temppointer),y
	sta     _collision
;
; if (!METATILE_IS_SOLID(collision)) {
;
	ldy     _collision
	lda     _metatile_property_lookup_table,y
	and     #$01
	bne     L01D9
;
; enemies.nt[x] = high_byte(temp6);
;
	ldy     _x
	lda     _temp6+1
	sta     _enemies+192,y
;
; enemies.actual_y[x] = low_byte(temp6);
;
	ldy     _x
	lda     _temp6
	sta     _enemies+128,y
;
; }
;
L01D9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_ai_dying (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai_dying: near

.segment	"CODE"

;
; if (enemies.timer[x] == 0) {
;
	ldy     _x
	lda     _enemies+512,y
	bne     L01E9
;
; game_mode = MODE_LEVEL_COMPLETE;
;
	lda     #$04
	sta     _game_mode
;
; }
;
L01E9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_with_boss (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_with_boss: near

.segment	"CODE"

;
; if (IS_SWINGING_SWORD && boss_state == BOSS_STATE_IDLE) {
;
	lda     _player_flags
	and     #$04
	beq     L01F6
	lda     _boss_state
	cmp     #$01
	bne     L01F6
;
; --BOSS_HP;
;
	dec     _boss_memory+2
;
; if (BOSS_HP == 0) {
;
	bne     L0270
;
; boss_state = BOSS_STATE_DYING; // Begin to end the level.
;
	lda     #$05
	sta     _boss_state
;
; sfx_play(SFX_ENEMY_KILL, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; } else {
;
	jmp     L0205
;
; boss_state = BOSS_STATE_DAMAGED;
;
L0270:	lda     #$04
	sta     _boss_state
;
; enemies.timer[x] = 127; // ~2 seconds of iframes (these will be incremented until it overflows)
;
L0205:	ldy     _x
	lda     #$7F
	sta     _enemies+512,y
;
; } else if (boss_state_deadliness[boss_state]) {
;
	rts
L01F6:	ldy     _boss_state
	lda     _boss_state_deadliness,y
	beq     L020D
;
; SET_STATUS_DEAD();
;
	lda     _player_flags
	ora     #$02
	sta     _player_flags
;
; }
;
L020D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_boss_flying (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_boss_flying: near

.segment	"CODE"

;
; temp3 >>= 2;
;
	lda     _temp3
	lsr     a
	lsr     a
	sta     _temp3
;
; temp3 &= 0b110; // Mask the frame number.
;
	and     #$06
	sta     _temp3
;
; temp4 |= temp3;// | ENEMY_DIRECTION(x);
;
	ora     _temp4
	sta     _temp4
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, boss_body_sprite_flying_lookup_table, temp4);
;
	asl     a
	tay
	lda     _boss_body_sprite_flying_lookup_table,y
	sta     _temppointer
	lda     _boss_body_sprite_flying_lookup_table+1,y
	sta     _temppointer+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_boss_idle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_boss_idle: near

.segment	"CODE"

;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, boss_body_sprite_idle_lookup_table, temp4);
;
	lda     _temp4
	asl     a
	tay
	lda     _boss_body_sprite_idle_lookup_table,y
	sta     _temppointer
	lda     _boss_body_sprite_idle_lookup_table+1,y
	sta     _temppointer+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_boss_dying (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_boss_dying: near

.segment	"CODE"

;
; temp3 >>= 2;
;
	lda     _temp3
	lsr     a
	lsr     a
	sta     _temp3
;
; temp3 &= 0b11;
;
	and     #$03
	sta     _temp3
;
; AsmSet2ByteFromPtrAtIndexVar(temppointer, boss_dying_sprite_lookup_table, temp3);
;
	asl     a
	tay
	lda     _boss_dying_sprite_lookup_table,y
	sta     _temppointer
	lda     _boss_dying_sprite_lookup_table+1,y
	sta     _temppointer+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_shoot_fireball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_shoot_fireball: near

.segment	"CODE"

;
; temp1 = x + 4;
;
	lda     _x
	clc
	adc     #$04
	sta     _temp1
;
; for (temp_x = x+1; temp_x < temp1; ++temp_x) {
;
	lda     _x
	clc
	adc     #$01
	sta     _temp_x
	ldx     #$00
L0271:	lda     _temp_x
	cmp     _temp1
	txa
	sbc     #$00
	bcc     L0273
;
; }
;
	rts
;
; if (IS_ENEMY_ACTIVE(temp_x)) { continue; } // ENEMY_NONE
;
L0273:	ldy     _temp_x
	lda     _enemies+256,y
	and     #$80
	jne     L0272
;
; enemies.type[temp_x] = ENEMY_BOSS_FIREBALL;
;
	ldy     _temp_x
	lda     #$0B
	sta     _enemies+320,y
;
; temp0 = enemies.x[x] + 6;
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$06
	sta     _temp0
;
; temp1 = enemies.actual_y[x] + 6;
;
	ldy     _x
	lda     _enemies+128,y
	clc
	adc     #$06
	sta     _temp1
;
; temp2 = enemies.nt[x];
;
	ldy     _x
	lda     _enemies+192,y
	sta     _temp2
;
; enemies.x[temp_x] = temp0;
;
	ldy     _temp_x
	lda     _temp0
	sta     _enemies,y
;
; enemies.actual_y[temp_x] = temp1;
;
	ldy     _temp_x
	lda     _temp1
	sta     _enemies+128,y
;
; enemies.nt[temp_x] = temp2;
;
	ldy     _temp_x
	lda     _temp2
	sta     _enemies+192,y
;
; temp0 = high_byte(valrigard.x) + (VALRIGARD_WIDTH/2);
;
	lda     _valrigard+1
	clc
	adc     #$05
	sta     _temp0
;
; temp1 = high_byte(valrigard.y) + 4;
;
	lda     _valrigard+3
	clc
	adc     #$04
	sta     _temp1
;
; temp2 = enemies.x[x] + 6; // ENEMY_WIDTH/2
;
	ldy     _x
	lda     _enemies,y
	clc
	adc     #$06
	sta     _temp2
;
; enemies.x[temp_x] = temp2;
;
	ldy     _temp_x
	lda     _temp2
	sta     _enemies,y
;
; temp3 = enemies.y[x] + 6; // ENEMY_HEIGHT/2
;
	ldy     _x
	lda     _enemies+64,y
	clc
	adc     #$06
	sta     _temp3
;
; enemies.y[temp_x] = temp3;
;
	ldy     _temp_x
	lda     _temp3
	sta     _enemies+64,y
;
; fire_at_target();
;
	jsr     _fire_at_target
;
; enemies.timer[temp_x] = temp0; // the brads value for this fireball.
;
	ldy     _temp_x
	lda     _temp0
	sta     _enemies+512,y
;
; BOSS_FIREBALL_COOLDOWN = 32;
;
	lda     #$20
	sta     _boss_memory+1
;
; return;
;
	rts
;
; for (temp_x = x+1; temp_x < temp1; ++temp_x) {
;
L0272:	inc     _temp_x
	jmp     L0271

.endproc

; ---------------------------------------------------------------
; void __near__ boss_start_flying (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_start_flying: near

.segment	"CODE"

;
; boss_state = BOSS_STATE_ASCENDING;
;
	lda     #$02
	sta     _boss_state
;
; temp0 = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp0
;
; temp0 += rand8() & 0b00111111; // x -- MSB is sign
;
	jsr     _rand8
	and     #$3F
	clc
	adc     _temp0
	sta     _temp0
;
; temp1 = enemies.y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp1
;
; temp1 += rand8() & 0b00111111; // y -- MSB is sign
;
	jsr     _rand8
	and     #$3F
	clc
	adc     _temp1
	sta     _temp1
;
; temp2 = enemies.x[x];
;
	ldy     _x
	lda     _enemies,y
	sta     _temp2
;
; temp3 = enemies.y[x];
;
	ldy     _x
	lda     _enemies+64,y
	sta     _temp3
;
; temp_x = x;
;
	lda     _x
	sta     _temp_x
;
; fire_at_target();
;
	jsr     _fire_at_target
;
; BOSS_BRADS_TARGET = temp0;
;
	lda     _temp0
	sta     _boss_memory
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_ai_intro (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_ai_intro: near

.segment	"CODE"

;
; SET_DIRECTION_RIGHT();
;
	lda     _player_flags
	ora     #$01
	sta     _player_flags
;
; active_dboxdata = boss_dialog;
;
	lda     #<(_active_dboxdata)
	ldx     #>(_active_dboxdata)
	jsr     pushax
	lda     #<(_boss_dialog)
	ldx     #>(_boss_dialog)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
;
; BOSS_HP = 3;
;
	lda     #$03
	sta     _boss_memory+2
;
; trigger_dialog_box();
;
	jsr     _trigger_dialog_box
;
; boss_state = BOSS_STATE_DESCENDING;
;
	lda     #$03
	sta     _boss_state
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ boss_collide_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_boss_collide_sub: near

.segment	"CODE"

;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0); 
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; temp0 = high_byte(temp5);
;
	lda     _temp5+1
	sta     _temp0
;
; AsmSet2ByteFromPtrAtIndexVar(temp_mutablepointer, cmaps, temp0);
;
	asl     a
	tay
	lda     _cmaps,y
	sta     _temp_mutablepointer
	lda     _cmaps+1,y
	sta     _temp_mutablepointer+1
;
; AsmSet1ByteFromZpPtrAtIndexVar(temp4, temp_mutablepointer, coordinates);
;
	ldy     _coordinates
	lda     (_temp_mutablepointer),y
	sta     _temp4
;
; temp0 = metatile_property_lookup_table[temp4];
;
	ldy     _temp4
	lda     _metatile_property_lookup_table,y
	sta     _temp0
;
; collision = METATILE_IS_SOLID(temp4);
;
	ldy     _temp4
	lda     _metatile_property_lookup_table,y
	and     #$01
	sta     _collision
;
; }
;
	rts

.endproc

